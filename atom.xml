<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stbyu&#39;s blog</title>
  
  <subtitle>Life,interesting!</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://stbyu.github.io/blog/"/>
  <updated>2020-05-31T09:02:12.451Z</updated>
  <id>http://stbyu.github.io/blog/</id>
  
  <author>
    <name>Stbyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【作业向】程序设计思维与实践 Week14 作业</title>
    <link href="http://stbyu.github.io/blog/2020/05/27/week14hw/"/>
    <id>http://stbyu.github.io/blog/2020/05/27/week14hw/</id>
    <published>2020-05-26T16:00:00.000Z</published>
    <updated>2020-05-31T09:02:12.451Z</updated>
    
    <content type="html"><![CDATA[<h1>【作业向】程序设计思维与实践 Week14作业<a id="more"></a></h1><h2 id="A-Q老师与石头剪刀布（必做）"><a class="header-anchor" href="#A-Q老师与石头剪刀布（必做）">♔</a>A Q老师与石头剪刀布（必做）</h2><h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3><p>每一个大人曾经都是一个小孩，Q老师 也一样。</p><p>为了回忆童年，Q老师 和 Monika 玩起了石头剪刀布的游戏，游戏一共 n 轮。无所不知的 Q老师 知道每一轮 Monika 的出招，然而作为限制， Q老师 在这 n 轮游戏中必须恰好出 a 次石头，b 次布和 c 次剪刀。</p><p>如果 Q老师 赢了 Monika n/2(上取整) 次，那么 Q老师就赢得了这场游戏，否则 Q老师 就输啦！</p><p>Q老师非常想赢，他想知道能否可以赢得这场游戏，如果可以的话，Q老师希望你能告诉他一种可以赢的出招顺序，任意一种都可以。</p><h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3><p>第一行一个整数 t(1 ≤ t ≤ 100)表示测试数据组数。然后接下来的 t 组数据，每一组都有三个整数：</p><ul><li>第一行一个整数 n(1 ≤ n ≤ 100)</li><li>第二行包含三个整数 a, b, c(0 ≤ a, b, c ≤ n)。保证 a+b+c=n</li><li>第三行包含一个长度为 n 的字符串 s，字符串 s 由且仅由 ‘R’, ‘P’, ‘S’ 这三个字母组成。第 i 个字母 s[i] 表示 Monika 在第 i 轮的出招。字母 ‘R’ 表示石头，字母 ‘P’ 表示布，字母 ‘S’ 表示剪刀</li></ul><h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3><p>对于每组数据：</p><ul><li>如果 Q老师 不能赢，则在第一行输出 “NO”(不含引号)</li><li>否则在第一行输出 “YES”(不含引号)，在第二行输出 Q老师 的出招序列 t。要求 t 的长度为 n 且仅由 ‘R’, ‘P’, ‘S’ 这三个字母构成。t 中需要正好包含 a 个 ‘R’，b 个 ‘P’ 和 c 个 ‘S’</li></ul><p>“YES”/&quot;NO&quot;是大小写不敏感的，但是 ‘R’, ‘P’, ‘S’ 是大小写敏感的。</p><h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3><h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">1 1 1</span><br><span class="line">RPS</span><br><span class="line">3</span><br><span class="line">3 0 0</span><br><span class="line">RPS</span><br></pre></td></tr></table></figure><h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">PSR</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3><p>运用贪心的思想，先算一下能赢的场数（如果能赢就一定赢）</p><p>ans=min(a,aa)+min(b,bb)+min(c,cc);</p><p>其中a，b，c为石头剪刀布分别能出的次数，aa，bb，cc为石头剪刀布分别可以赢的次数（即对手出相反决策的次数）。若ans*2小于n，则输出no；否则先按顺序把能赢的填上，然后剩下的随意分配。</p><p>（万万不可只扫一遍然后能赢就赢，不然就随便分配，因为这样在随便分配的时候可能会把后面赢的机会用掉而导致wa</p><h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,a,b,c,n,aa,bb,cc,ans;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">400005</span>],an[<span class="number">400005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;a,&amp;b,&amp;c);</span><br><span class="line">aa=bb=cc=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %c"</span>,&amp;s[i]);</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'R'</span>) bb++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'S'</span>) aa++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'P'</span>) cc++;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">min</span>(a,aa)+<span class="built_in">min</span>(b,bb)+<span class="built_in">min</span>(c,cc);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span>*ans&lt;n) <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'R'</span> &amp;&amp; b&gt;<span class="number">0</span>) an[i]=<span class="string">'P'</span>,b--;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'S'</span> &amp;&amp; a&gt;<span class="number">0</span>) an[i]=<span class="string">'R'</span>,a--;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'P'</span> &amp;&amp; c&gt;<span class="number">0</span>) an[i]=<span class="string">'S'</span>,c--;</span><br><span class="line"><span class="keyword">else</span> an[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(an[i]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a) <span class="built_in">printf</span>(<span class="string">"R"</span>),a--;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b) <span class="built_in">printf</span>(<span class="string">"P"</span>),b--;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c) <span class="built_in">printf</span>(<span class="string">"S"</span>),c--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%c"</span>,an[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Q老师与十字叉（必做）"><a class="header-anchor" href="#B-Q老师与十字叉（必做）">♔</a>B Q老师与十字叉（必做）</h2><h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3><p>Q老师 得到一张 n 行 m 列的网格图，上面每一个格子要么是白色的要么是黑色的。</p><p>Q老师认为失去了 十字叉 的网格图莫得灵魂. 一个十字叉可以用一个数对 x 和 y 来表示, 其中 1 ≤ x ≤ n 并且 1 ≤ y ≤ m, 满足在第 x 行中的所有格子以及在第 y 列的 所有格子都是黑色的</p><p>例如下面这5个网格图里都包含十字叉</p><p><img src="/blog/2020/05/27/week14hw/2.png" alt="img"></p><p>第四个图有四个十字叉，分别在 (1, 3), (1, 5), (3, 3) 和 (3, 5).</p><p>下面的图里没有十字叉</p><p><img src="/blog/2020/05/27/week14hw/1.png" alt="img"></p><p>Q老师 得到了一桶黑颜料，他想为这个网格图注入灵魂。 Q老师 每分钟可以选择一个白色的格子并且把它涂黑。现在他想知道要完成这个工作，最少需要几分钟？</p><h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3><p>第一行包含一个整数 q (1 ≤ q ≤ 5 * 10^4) — 表示测试组数</p><p>对于每组数据：</p><p>第一行有两个整数 n 和 m (1 ≤ n, m ≤ 5 * 10^4, n * m ≤ 4 * 10^5) — 表示网格图的行数和列数</p><p>接下来的 n 行中每一行包含 m 个字符 — ‘.’ 表示这个格子是白色的， ‘*’ 表示这个格子是黑色的</p><p>保证 q 组数据中 n 的总和不超过 5 * 10^4， n*m 的总和不超过 4 * 10^5。</p><h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3><p>答案输出 q 行, 第 i 行包含一个整数 — 表示第 i 组数据的答案</p><h3 id="Example-v2"><a class="header-anchor" href="#Example-v2">♔</a>Example</h3><h4 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">5 5</span><br><span class="line">..*..</span><br><span class="line">..*..</span><br><span class="line">*****</span><br><span class="line">..*..</span><br><span class="line">..*..</span><br><span class="line">3 4</span><br><span class="line">****</span><br><span class="line">.*..</span><br><span class="line">.*..</span><br><span class="line">4 3</span><br><span class="line">***</span><br><span class="line">*..</span><br><span class="line">*..</span><br><span class="line">*..</span><br><span class="line">5 5</span><br><span class="line">*****</span><br><span class="line">*.*.*</span><br><span class="line">*****</span><br><span class="line">..*.*</span><br><span class="line">..***</span><br><span class="line">1 4</span><br><span class="line">****</span><br><span class="line">5 5</span><br><span class="line">.....</span><br><span class="line">..*..</span><br><span class="line">.***.</span><br><span class="line">..*..</span><br><span class="line">.....</span><br><span class="line">5 3</span><br><span class="line">...</span><br><span class="line">.*.</span><br><span class="line">.*.</span><br><span class="line">***</span><br><span class="line">.*.</span><br><span class="line">3 3</span><br><span class="line">.*.</span><br><span class="line">*.*</span><br><span class="line">.*.</span><br><span class="line">4 4</span><br><span class="line">*.**</span><br><span class="line">....</span><br><span class="line">*.**</span><br><span class="line">*.**</span><br></pre></td></tr></table></figure><h4 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">4</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3><p>记录每一行和每一列的空白数，然后对行和列进行枚举，需要填充的数目为行的空白加列的空白加flag（flag的值，若行列交汇处为黑色，则flag=0，否则flag=-1）。</p><p>以及二维数组可能开不下，转成一维数组然后映射到二维即可。</p><h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,m,n,minn,flag;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">400005</span>],h[<span class="number">50005</span>],s[<span class="number">50005</span>]; </span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">minn=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="comment">//memset(a,0,sizeof(a));</span></span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));</span><br><span class="line"><span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %c"</span>,&amp;c);</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'*'</span>) a[i*m+j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> a[i*m+j]=<span class="number">0</span>,h[i]+=<span class="number">1</span>,s[j]+=<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i*m+j]) flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> flag=<span class="number">1</span>;</span><br><span class="line">minn=<span class="built_in">min</span>(minn,h[i]+s[j]-flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,minn);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Q老师的考验（必做）"><a class="header-anchor" href="#C-Q老师的考验（必做）">♔</a>C Q老师的考验（必做）</h2><h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3><p>Q老师 对数列有一种非同一般的热爱，尤其是优美的斐波那契数列。</p><p>这一天，Q老师 为了增强大家对于斐波那契数列的理解，决定在斐波那契的基础上创建一个新的数列 f(x) 来考一考大家。数列 f(x) 定义如下：</p><p>当 x &lt; 10 时，f(x) = x；<br>当 x ≥ 10 时，f(x) = a0 * f(x-1) + a1 * f(x-2) + a2 * f(x-3) + …… + a9 * f(x-10)，ai 只能为 0 或 1。</p><p>Q老师 将给定 a0～a9，以及两个正整数 k m，询问 f(k) % m 的数值大小。</p><p>聪明的你能通过 Q老师 的考验吗？</p><h3 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h3><p>输出文件包含多组测试用例，每组测试用例格式如下：</p><p>第一行给定两个正整数 k m。（k &lt; 2e9, m &lt; 1e5）</p><p>第二行给定十个整数，分别表示 a0～a9。</p><h3 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h3><p>对于每一组测试用例输出一行，表示 f(k) % m 的数值大小。</p><h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3><h4 id="Input-v6"><a class="header-anchor" href="#Input-v6">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10 9999</span><br><span class="line">1 1 1 1 1 1 1 1 1 1</span><br><span class="line">20 500</span><br><span class="line">1 0 1 0 1 0 1 0 1 0</span><br></pre></td></tr></table></figure><h4 id="Output-v6"><a class="header-anchor" href="#Output-v6">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">45</span><br><span class="line">104</span><br></pre></td></tr></table></figure><h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3><p>这道题使用递推的方法即可，但由于数据量过大，要使用矩阵快速幂进行加速，递推式如下：</p><p><img src="/blog/2020/05/27/week14hw/3.png" alt="img"></p><h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> k,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">data <span class="keyword">operator</span>*(<span class="keyword">const</span> data&amp;b)</span><br><span class="line">&#123;</span><br><span class="line">data c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">10</span>; j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">10</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line">c.a[i][j]+=(a[i][k]*b.a[k][j])%m;</span><br><span class="line">c.a[i][j]%=m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">data()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,h,sum;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;k,&amp;m)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">data a;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a.a[<span class="number">0</span>][i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;<span class="number">10</span>; i++) a.a[i][i<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">data ans;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) ans.a[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(h=k<span class="number">-9</span>; h; h&gt;&gt;=<span class="number">1</span>,a=a*a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(h&amp;<span class="number">1</span>)</span><br><span class="line">ans=ans*a;</span><br><span class="line">&#125;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum+=(ans.a[<span class="number">0</span>][i]*(<span class="number">9</span>-i))%m;</span><br><span class="line">sum%=m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Q老师染砖（选做）"><a class="header-anchor" href="#D-Q老师染砖（选做）">♔</a>D Q老师染砖（选做）</h2><h3 id="Problem-v4"><a class="header-anchor" href="#Problem-v4">♔</a>Problem</h3><p>衣食无忧的 Q老师 有一天突发奇想，想要去感受一下劳动人民的艰苦生活。</p><p>具体工作是这样的，有 N 块砖排成一排染色，每一块砖需要涂上红、蓝、绿、黄这 4 种颜色中的其中 1 种。且当这 N 块砖中红色和绿色的块数均为偶数时，染色效果最佳。</p><p>为了使工作效率更高，Q老师 想要知道一共有多少种方案可以使染色效果最佳，你能帮帮他吗？</p><h3 id="Input-v7"><a class="header-anchor" href="#Input-v7">♔</a>Input</h3><p>第一行为 T，代表数据组数。(1 ≤ T ≤ 100)</p><p>接下来 T 行每行包括一个数字 N，代表有 N 块砖。(1 ≤ N ≤ 1e9)</p><h3 id="Output-v7"><a class="header-anchor" href="#Output-v7">♔</a>Output</h3><p>第一行为 T，代表数据组数。(1 ≤ T ≤ 100)</p><p>接下来 T 行每行包括一个数字 N，代表有 N 块砖。(1 ≤ N ≤ 1e9)</p><h3 id="Examples-v2"><a class="header-anchor" href="#Examples-v2">♔</a>Examples</h3><h4 id="Input-v8"><a class="header-anchor" href="#Input-v8">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="Output-v8"><a class="header-anchor" href="#Output-v8">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="解题思路-v4"><a class="header-anchor" href="#解题思路-v4">♔</a>解题思路</h3><p>还是使用递推的方法，令</p><ul><li><p>A[i] 为染完第i块后，有均有偶数个红绿的方案数。</p></li><li><p>B[i]为染完第i块后，均有奇数个红绿的方案数</p></li><li><p>C[i]为染完第i快后，一奇一偶的方案数</p></li></ul><p>其中各个状态的转移方式为</p><p><img src="/blog/2020/05/27/week14hw/5.png" alt="img"></p><p>则</p><p><img src="/blog/2020/05/27/week14hw/4.png" alt="img"></p><h3 id="代码-v4"><a class="header-anchor" href="#代码-v4">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">data <span class="keyword">operator</span>*(<span class="keyword">const</span> data&amp;b)</span><br><span class="line">&#123;</span><br><span class="line">data c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">10</span>; j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">10</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line">c.a[i][j]+=(a[i][k]*b.a[k][j])%<span class="number">10007</span>;</span><br><span class="line">c.a[i][j]%=<span class="number">10007</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">data()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,h,sum;</span><br><span class="line">data a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">a.a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">a.a[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">a.a[<span class="number">1</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">a.a[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">a.a[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">a.a[<span class="number">2</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">a.a[<span class="number">3</span>][<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">a.a[<span class="number">3</span>][<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">a.a[<span class="number">3</span>][<span class="number">3</span>]=<span class="number">2</span>;</span><br><span class="line">data ans;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) ans.a[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(h=n; h; h&gt;&gt;=<span class="number">1</span>,a=a*a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(h&amp;<span class="number">1</span>)</span><br><span class="line">ans=ans*a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans.a[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Q老师度假（选做）"><a class="header-anchor" href="#E-Q老师度假（选做）">♔</a>E Q老师度假（选做）</h2><h3 id="Problem-v5"><a class="header-anchor" href="#Problem-v5">♔</a>Problem</h3><p>忙碌了一个学期的 Q老师 决定奖励自己 N 天假期。</p><p>假期中不同的穿衣方式会有不同的快乐值。</p><p>已知 Q老师 一共有 M 件衬衫，且如果昨天穿的是衬衫 A，今天穿的是衬衫 B，则 Q老师 今天可以获得 f[A][B] 快乐值。</p><p>在 N 天假期结束后，Q老师 最多可以获得多少快乐值？</p><h3 id="Input-v9"><a class="header-anchor" href="#Input-v9">♔</a>Input</h3><p>输入文件包含多组测试样例，每组测试样例格式描述如下：</p><p>第一行给出两个整数 N M，分别代表假期长度与 Q老师 的衬衫总数。（2 ≤ N ≤ 100000, 1 ≤ M ≤ 100）</p><p>接下来 M 行，每行给出 M 个整数，其中第 i 行的第 j 个整数，表示 f[i][j]。（1 ≤ f[i][j] ≤ 1000000）</p><p>测试样例组数不会超过 10。</p><h3 id="Output-v9"><a class="header-anchor" href="#Output-v9">♔</a>Output</h3><p>每组测试样例输出一行，表示 Q老师 可以获得的最大快乐值。</p><h3 id="Examples-v3"><a class="header-anchor" href="#Examples-v3">♔</a>Examples</h3><h4 id="Input-v10"><a class="header-anchor" href="#Input-v10">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">0 1</span><br><span class="line">1 0</span><br><span class="line">4 3</span><br><span class="line">1 2 3</span><br><span class="line">1 2 3</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure><h4 id="Output-v10"><a class="header-anchor" href="#Output-v10">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h3 id="解题思路-v5"><a class="header-anchor" href="#解题思路-v5">♔</a>解题思路</h3><p>还是需要矩阵快速幂加速，但需要自行定义一种运算方式</p><p><img src="/blog/2020/05/27/week14hw/6.png" alt="img"></p><p>矩阵快速幂的转化方法为</p><p><img src="/blog/2020/05/27/week14hw/7.png" alt="img"></p><h3 id="代码-v5"><a class="header-anchor" href="#代码-v5">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll T,n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ll a[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">ll len;</span><br><span class="line">data <span class="keyword">operator</span>*(<span class="keyword">const</span> data&amp;b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">data <span class="title">c</span><span class="params">(len)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>; i&lt;=len; i++)</span><br><span class="line"><span class="keyword">for</span>(ll j=<span class="number">1</span>; j&lt;=len; j++)</span><br><span class="line"><span class="keyword">for</span>(ll k=<span class="number">1</span>; k&lt;=len; k++)</span><br><span class="line">&#123;</span><br><span class="line">c.a[i][j]=<span class="built_in">max</span>(c.a[i][j],a[i][k]+b.a[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">data(ll x)</span><br><span class="line">&#123;</span><br><span class="line">len=x;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll i,j,h,sum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">data <span class="title">a</span><span class="params">(m)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a.a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">data <span class="title">ans</span><span class="params">(m)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(i=n<span class="number">-1</span>; i; )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i&amp;<span class="number">1</span>) ans=ans*a;</span><br><span class="line">i&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">a=a*a;</span><br><span class="line">&#125;</span><br><span class="line">T=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++) </span><br><span class="line">T=<span class="built_in">max</span>(T,ans.a[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,T);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;【作业向】程序设计思维与实践 Week14作业&lt;/h1&gt;
    
    </summary>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>【作业向】程序设计思维与实践 Week14 限时大模拟</title>
    <link href="http://stbyu.github.io/blog/2020/05/26/week14hwmn/"/>
    <id>http://stbyu.github.io/blog/2020/05/26/week14hwmn/</id>
    <published>2020-05-25T16:00:00.000Z</published>
    <updated>2020-05-31T09:15:22.955Z</updated>
    
    <content type="html"><![CDATA[<h1>【作业向】程序设计思维与实践 Week14限时大模拟<a id="more"></a></h1><h2 id="A-猫睡觉问题"><a class="header-anchor" href="#A-猫睡觉问题">♔</a>A  猫睡觉问题</h2><div class="row">    <embed src="A.pdf" width="100%" height="550" type="application/pdf"></div><p>本题是一个关于时间区间的模拟题，要注意以下几个方面：</p><ul><li>将时间统一转换为分钟，便于计算</li><li>将时间从24小时制改为48小时制，便于处理跨夜的问题</li><li>在最后一个番后面插入（第一个番+24小时）</li><li>在两个番的中间，能多长睡就睡多长</li><li>得到了新的睡觉区间后立即和前一个睡觉区间的结尾作比较，但是否超过最长醒着的时间，若超过则立即中止</li><li>判断睡觉区间是否等于0，若等于0，则输出no（因为猫可能这一天里可以不睡觉，但如果一直不睡，醒着的时间迟早会超过上限）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> s,e;</span><br><span class="line">&#125;fan[<span class="number">25</span>],slep[<span class="number">25</span>]; </span><br><span class="line"><span class="keyword">int</span> n,ssum,flag,a,b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wly</span><span class="params">(data x,data y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.s&lt;y.s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,h,l,sum;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line">ssum=<span class="number">0</span>;</span><br><span class="line">a*=<span class="number">60</span>,b*=<span class="number">60</span>;</span><br><span class="line"><span class="built_in">memset</span>(fan,<span class="number">0</span>,<span class="keyword">sizeof</span>(fan));</span><br><span class="line"><span class="built_in">memset</span>(slep,<span class="number">0</span>,<span class="keyword">sizeof</span>(slep));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%2d:%2d-%2d:%2d"</span>,&amp;h,&amp;j,&amp;k,&amp;l);</span><br><span class="line">fan[i].s=h*<span class="number">60</span>+j;fan[i].e=k*<span class="number">60</span>+l;</span><br><span class="line"><span class="keyword">if</span>(fan[i].e&lt;fan[i].s) fan[i].e+=<span class="number">1440</span>;</span><br><span class="line">&#125;</span><br><span class="line">sort(fan+<span class="number">1</span>,fan+n+<span class="number">1</span>,wly);</span><br><span class="line">fan[n+<span class="number">1</span>].s=fan[<span class="number">1</span>].s+<span class="number">1440</span>,fan[n+<span class="number">1</span>].e=fan[<span class="number">1</span>].e+<span class="number">1400</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(fan[i+<span class="number">1</span>].s-fan[i].e<span class="number">-1</span>&gt;=a)</span><br><span class="line">&#123;</span><br><span class="line">slep[++ssum].s=fan[i].e+<span class="number">1</span>;</span><br><span class="line">slep[ssum].e=fan[i+<span class="number">1</span>].s<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(ssum&gt;<span class="number">1</span> &amp;&amp; slep[ssum].s-slep[ssum<span class="number">-1</span>].e<span class="number">-1</span>&gt;b)</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ssum&gt;<span class="number">0</span> &amp;&amp; slep[<span class="number">1</span>].s+<span class="number">1440</span>-slep[ssum].e<span class="number">-1</span>&gt;b) flag=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//printf("--%d--%d--",flag,ssum);</span></span><br><span class="line"><span class="keyword">if</span>(!flag &amp;&amp; ssum)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Yes\n%d\n"</span>,ssum);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=ssum;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02d:%02d-%02d:%02d\n"</span>,(slep[i].s%<span class="number">1440</span>)/<span class="number">60</span>,(slep[i].s%<span class="number">1440</span>)%<span class="number">60</span>,(slep[i].e%<span class="number">1440</span>)/<span class="number">60</span>,(slep[i].e%<span class="number">1440</span>)%<span class="number">60</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;【作业向】程序设计思维与实践 Week14限时大模拟&lt;/h1&gt;
    
    </summary>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>【作业向】程序设计思维与实践 Week13 作业</title>
    <link href="http://stbyu.github.io/blog/2020/05/25/week13hw/"/>
    <id>http://stbyu.github.io/blog/2020/05/25/week13hw/</id>
    <published>2020-05-24T16:00:00.000Z</published>
    <updated>2020-05-31T09:38:00.778Z</updated>
    
    <content type="html"><![CDATA[<h1>【作业向】程序设计思维与实践 Week13作业<a id="more"></a></h1><h2 id="A-TT的神秘任务-必做"><a class="header-anchor" href="#A-TT的神秘任务-必做">♔</a>A TT的神秘任务 - 必做</h2><h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3><p>这一天，TT 遇到了一个神秘人。</p><p>神秘人给了两个数字，分别表示 n 和 k，并要求 TT 给出 k 个奇偶性相同的正整数，使得其和等于 n。</p><p>例如 n = 10，k = 3，答案可以为 [4 2 4]。</p><p>TT 觉得这个任务太简单了，不愿意做，你能帮他完成吗？</p><p>本题是SPJ</p><h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3><p>第一行一个整数 T，表示数据组数，不超过 1000。</p><p>之后 T 行，每一行给出两个正整数，分别表示 n（1 ≤ n ≤ 1e9）、k（1 ≤ k ≤ 100）。</p><h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3><p>如果存在这样 k 个数字，则第一行输出 “YES”，第二行输出 k 个数字。</p><p>如果不存在，则输出 “NO”。</p><h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3><h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">10 3</span><br><span class="line">100 4</span><br><span class="line">8 7</span><br><span class="line">97 2</span><br><span class="line">8 8</span><br><span class="line">3 10</span><br><span class="line">5 3</span><br><span class="line">1000000000 9</span><br></pre></td></tr></table></figure><h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">4 2 4</span><br><span class="line">YES</span><br><span class="line">55 5 5 35</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">1 1 1 1 1 1 1 1</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">3 1 1</span><br><span class="line">YES</span><br><span class="line">111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3><p>本题可以使用贪心的方法，检查用k-1个1填充后剩下的数字是否是奇数，或用k-1个2填充后剩下的数是否是偶数即可判断。</p><h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,k; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">if</span>(n-k+<span class="number">1</span>&gt;<span class="number">0</span> &amp;&amp; (n-k+<span class="number">1</span>)%<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;k;i++) <span class="built_in">printf</span>(<span class="string">"1 "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-k+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n<span class="number">-2</span>*(k<span class="number">-1</span>)&gt;<span class="number">0</span> &amp;&amp; (n<span class="number">-2</span>*(k<span class="number">-1</span>))%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;k;i++) <span class="built_in">printf</span>(<span class="string">"2 "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n<span class="number">-2</span>*(k<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-TT的神秘任务-必做"><a class="header-anchor" href="#B-TT的神秘任务-必做">♔</a>B TT的神秘任务 - 必做</h2><h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3><p>在你们的帮助下，TT 轻松地完成了上一个神秘任务。</p><p>但是令人没有想到的是，几天后，TT 再次遇到了那个神秘人。</p><p>而这一次，神秘人决定加大难度，并许诺 TT，如果能够完成便给他一个奖励。</p><p>任务依旧只给了两个数字，分别表示 n 和 k，不过这一次是要求 TT 给出无法被 n 整除的第 k 大的正整数。</p><p>例如 n = 3，k = 7，则前 7 个无法被 n 整除的正整数为 [1 2 4 5 7 8 10]，答案为 10。</p><p>好奇的 TT 想要知道奖励究竟是什么，你能帮帮他吗？</p><h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3><p>第一行一个整数 T，表示数据组数，不超过 1000。</p><p>之后 T 行，每一行给出两个正整数，分别表示 n（2 ≤ n ≤ 1e9）、k（1 ≤ k ≤ 1e9）。</p><h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3><p>对于每一组数据，输出无法被 n 整除的第 k 大的正整数。</p><h3 id="Example-v2"><a class="header-anchor" href="#Example-v2">♔</a>Example</h3><h4 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3 7</span><br><span class="line">4 12</span><br><span class="line">2 1000000000</span><br><span class="line">7 97</span><br><span class="line">1000000000 1000000000</span><br><span class="line">2 1</span><br></pre></td></tr></table></figure><h4 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">15</span><br><span class="line">1999999999</span><br><span class="line">113</span><br><span class="line">1000000001</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3><p>我们知道，1~k中可以被n整除的数有k/n个，因此答案需要k+k/n,但新加的k/n个数中还会有被n整除的数（禁止套娃），因此我们需要进行循环操作，直到ans/n-k/n等于0。</p><h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll T,n,k,ans; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;k);</span><br><span class="line">ans=k+(k/n);</span><br><span class="line"><span class="keyword">while</span>(ans/n-k/n)</span><br><span class="line">&#123;</span><br><span class="line">j=ans/n-k/n;</span><br><span class="line">k=ans;</span><br><span class="line">ans=k+j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-TT的奖励-必做"><a class="header-anchor" href="#C-TT的奖励-必做">♔</a>C TT的奖励 - 必做</h2><h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3><p>在大家不辞辛劳的帮助下，TT 顺利地完成了所有的神秘任务。</p><p>神秘人很高兴，决定给 TT 一个奖励，即白日做梦之捡猫咪游戏。</p><p>捡猫咪游戏是这样的，猫咪从天上往下掉，且只会掉在 [0, 10] 范围内，具体的坐标范围如下图所示。</p><p><img src="/blog/2020/05/25/week13hw/1.png" alt="img"></p><p>TT 初始站在位置五上，且每秒只能在移动不超过一米的范围内接住掉落的猫咪，如果没有接住，猫咪就会跑掉。例如，在刚开始的一秒内，TT 只能接到四、五、六这三个位置其中一个位置的猫咪。</p><p>喜爱猫咪的 TT 想要接住尽可能多的猫咪，你能帮帮他吗？</p><h3 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h3><p>多组样例。每组样例输入一个 m (0 &lt; m &lt; 100000)，表示有 m 只猫咪。</p><p>在接下来的 m 行中，每行有两个整数 a b (0 &lt; b &lt; 100000)，表示在第 b 秒的时候有一只猫咪掉落在 a 点上。</p><p>注意，同一个点上同一秒可能掉落多只猫咪。m = 0 时输入结束。</p><h3 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h3><p>输出一个整数 x，表示 TT 可能接住的最多的猫咪数。</p><h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3><h4 id="Input-v6"><a class="header-anchor" href="#Input-v6">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">5 1</span><br><span class="line">4 1</span><br><span class="line">6 1</span><br><span class="line">7 2</span><br><span class="line">7 2</span><br><span class="line">8 3</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="Output-v6"><a class="header-anchor" href="#Output-v6">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3><p>类似于dp入门题目中的<strong>数字三角形</strong></p><p>用dp[i] [j]代表在i位置的第j秒的接住猫咪数，从后向前遍历，状态转移方程为</p><p><img src="/blog/2020/05/25/week13hw/3.png" alt="img"></p><h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">15</span>][<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> n,maxt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n)</span><br><span class="line">&#123;</span><br><span class="line">maxt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;j,&amp;k);</span><br><span class="line">a[j][k]++;</span><br><span class="line">maxt=<span class="built_in">max</span>(maxt,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=maxt<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=<span class="number">10</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">0</span>) a[j][i]+=<span class="built_in">max</span>(a[j][i+<span class="number">1</span>],a[j+<span class="number">1</span>][i+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">else</span> a[j][i]+=<span class="built_in">max</span>(a[j<span class="number">-1</span>][i+<span class="number">1</span>],<span class="built_in">max</span>(a[j][i+<span class="number">1</span>],a[j+<span class="number">1</span>][i+<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[<span class="number">5</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-TT的苹果树-选做"><a class="header-anchor" href="#D-TT的苹果树-选做">♔</a>D TT的苹果树 - 选做</h2><h3 id="Problem-v4"><a class="header-anchor" href="#Problem-v4">♔</a>Problem</h3><p>在大家的三连助攻下，TT 一举获得了超级多的猫咪，因此决定开一间猫咖，将快乐与大家一同分享。并且在开业的那一天，为了纪念这个日子，TT 在猫咖门口种了一棵苹果树。</p><p>一年后，苹果熟了，到了该摘苹果的日子了。</p><p>已知树上共有 N 个节点，每个节点对应一个快乐值为 w[i] 的苹果，为了可持续发展，TT 要求摘了某个苹果后，不能摘它父节点处的苹果。</p><p>TT 想要令快乐值总和尽可能地大，你们能帮帮他吗？</p><h3 id="Input-v7"><a class="header-anchor" href="#Input-v7">♔</a>Input</h3><p>结点按 1～N 编号。</p><p>第一行为 N (1 ≤ N ≤ 6000) ，代表结点个数。</p><p>接下来 N 行分别代表每个结点上苹果的快乐值 w[i]（-128 ≤ w[i] ≤ 127)。</p><p>接下来 N-1 行，每行两个数 L K，代表 K 是 L 的一个父节点。</p><p>输入有多组，以 0 0 结束。</p><h3 id="Output-v7"><a class="header-anchor" href="#Output-v7">♔</a>Output</h3><p>每组数据输出一个整数，代表所选苹果快乐值总和的最大值。</p><h3 id="Examples-v2"><a class="header-anchor" href="#Examples-v2">♔</a>Examples</h3><h4 id="Input-v8"><a class="header-anchor" href="#Input-v8">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1 3</span><br><span class="line">7 4</span><br><span class="line">2 3</span><br><span class="line">4 5</span><br><span class="line">6 4</span><br><span class="line">3 5</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><h4 id="Output-v8"><a class="header-anchor" href="#Output-v8">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="解题思路-v4"><a class="header-anchor" href="#解题思路-v4">♔</a>解题思路</h3><p>这一题是一个树形dp，类似于比较经典的树形dp题目<em><strong>没有上司的舞会</strong></em></p><p>设状态f[i] [0]为以i为根且未选择i节点的最大苹果数，f[i] [1]为以i为根且选择了i节点的最大苹果数。转移方程为</p><p><img src="/blog/2020/05/25/week13hw/2.png" alt="img"></p><p>其中，x为i的子节点，ai为节点i的苹果数。</p><p>然后用dfs的方法从根节点开始遍历这棵树即可。</p><h3 id="代码-v4"><a class="header-anchor" href="#代码-v4">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,ecnt;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">6005</span>][<span class="number">2</span>],a[<span class="number">6005</span>],f[<span class="number">6005</span>];</span><br><span class="line"><span class="keyword">int</span> adj[<span class="number">6005</span>],nxt[<span class="number">6005</span>],too[<span class="number">6005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=adj[x];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(too[i]!=f[x])</span><br><span class="line">&#123;</span><br><span class="line">dfs(too[i]);</span><br><span class="line">dp[x][<span class="number">1</span>]+=dp[too[i]][<span class="number">0</span>];</span><br><span class="line">dp[x][<span class="number">0</span>]+=<span class="built_in">max</span>(dp[too[i]][<span class="number">0</span>],dp[too[i]][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[x][<span class="number">1</span>]+=a[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n)</span><br><span class="line">&#123;</span><br><span class="line">ecnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">memset</span>(adj,<span class="number">0</span>,<span class="keyword">sizeof</span>(adj));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]),f[i]=i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;j,&amp;k);</span><br><span class="line">nxt[++ecnt]=adj[k],adj[k]=ecnt,too[ecnt]=j;</span><br><span class="line">f[j]=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(f[i]==i)</span><br><span class="line">&#123;</span><br><span class="line">dfs(i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="built_in">max</span>(dp[i][<span class="number">0</span>],dp[i][<span class="number">1</span>]));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-TT的神秘任务3-选做"><a class="header-anchor" href="#E-TT的神秘任务3-选做">♔</a>E TT的神秘任务3 - 选做</h2><h3 id="Problem-v5"><a class="header-anchor" href="#Problem-v5">♔</a>Problem</h3><p>TT 猫咖的生意越来越红火，人越来越多，也越来越拥挤。</p><p>为了解决这个问题，TT 决定扩大营业规模，但猫从哪里来呢？</p><p>TT 第一时间想到了神秘人，想要再次通过完成任务的方式获得猫咪。</p><p>而这一次，神秘人决定加大难度。</p><p>给定一个环，A[1], A[2], A[3], … , A[n]，其中 A[1] 的左边是 A[n]。要求从环上找出一段长度不超过 K 的连续序列，使其和最大。</p><p>这一次，TT 陷入了沉思，他需要你们的帮助。</p><h3 id="Input-v9"><a class="header-anchor" href="#Input-v9">♔</a>Input</h3><p>第一行一个整数 T，表示数据组数，不超过 100。</p><p>每组数据第一行给定两个整数 N K。（1 ≤ N ≤ 100000, 1 ≤ K ≤ N）</p><p>接下来一行，给出 N 个整数。（-1000 ≤ A[i] ≤ 1000）。</p><h3 id="Output-v9"><a class="header-anchor" href="#Output-v9">♔</a>Output</h3><p>对于每一组数据，输出满足条件的最大连续和以及起始位置和终止位置。</p><p>如果有多个结果，输出起始位置最小的，如果还是有多组结果，输出长度最短的。</p><h3 id="Examples-v3"><a class="header-anchor" href="#Examples-v3">♔</a>Examples</h3><h4 id="Input-v10"><a class="header-anchor" href="#Input-v10">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">6 3</span><br><span class="line">6 -1 2 -6 5 -5</span><br><span class="line">6 4</span><br><span class="line">6 -1 2 -6 5 -5</span><br><span class="line">6 3</span><br><span class="line">-1 2 -6 5 -5 6</span><br><span class="line">6 6</span><br><span class="line">-1 -1 -1 -1 -1 -1</span><br></pre></td></tr></table></figure><h4 id="Output-v10"><a class="header-anchor" href="#Output-v10">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7 1 3</span><br><span class="line">7 1 3</span><br><span class="line">7 6 2</span><br><span class="line">-1 1 1</span><br></pre></td></tr></table></figure><h3 id="解题思路-v5"><a class="header-anchor" href="#解题思路-v5">♔</a>解题思路</h3><p>本题用到了单调队列优化的dp，同时因为是一个环，因此我们将环进行复制，以达到展开的目的。</p><p>具体的解题方法为：</p><p>先求出a数组的前缀和（展开后的），然后将a数组的第1~n个加入到单调队列中（表示结尾），然后开始枚举开头，对于每一个开头i，先将a的第i+n-1个加入到单调队列，然后将单调队列中在a中下标小于i的头节点弹出。然后进行求解，更新最大值即数组的开头结尾即可。</p><p>同时，因为要起始位置最小以及长度最短的，起始位置最小可以用小于号更新答案来保证，长度最短可以用单调队列，在排序的时候将在a中的下标作为第二关键字来排序保证。</p><h3 id="代码-v5"><a class="header-anchor" href="#代码-v5">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,ms,me,n,k;</span><br><span class="line">ll a[<span class="number">200005</span>],maxsum;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(pair&lt;ll,<span class="keyword">int</span>&gt; a,pair&lt;ll,<span class="keyword">int</span>&gt; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.first&lt;b.first) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a.first==b.first)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a.second&gt;b.second) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;pair&lt;ll,<span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt; pair&lt;ll,<span class="keyword">int</span>&gt; &gt; , cmp &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">a[i]+=a[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++) a[n+i]=a[n+i<span class="number">-1</span>]+(a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=k; i++) q.push(make_pair(a[i],i));</span><br><span class="line">maxsum=<span class="number">-0x7fffffff</span>;</span><br><span class="line">maxsum=<span class="built_in">max</span>(maxsum,q.top().first-a[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//printf("%d----\n",q.top().first-a[0]);</span></span><br><span class="line">ms=<span class="number">1</span>,me=q.top().second;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line">q.push(make_pair(a[i+k<span class="number">-1</span>],i+k<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">while</span>(q.top().second&lt;i) q.pop();</span><br><span class="line"><span class="keyword">if</span>(maxsum&lt;q.top().first-a[i<span class="number">-1</span>])</span><br><span class="line">&#123;</span><br><span class="line">maxsum=q.top().first-a[i<span class="number">-1</span>];</span><br><span class="line">ms=i;</span><br><span class="line">me=q.top().second;</span><br><span class="line"><span class="keyword">if</span>(me&gt;n) me-=n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld %d %d\n"</span>,maxsum,ms,me);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;【作业向】程序设计思维与实践 Week13作业&lt;/h1&gt;
    
    </summary>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>CCF CSP 201609-3 炉石传说</title>
    <link href="http://stbyu.github.io/blog/2020/05/21/csp201609-3/"/>
    <id>http://stbyu.github.io/blog/2020/05/21/csp201609-3/</id>
    <published>2020-05-20T16:00:00.000Z</published>
    <updated>2020-05-20T11:06:18.237Z</updated>
    
    <content type="html"><![CDATA[<h1>CCF CSP 201609-3 炉石传说<a id="more"></a></h1><div class="row">    <embed src="201609-3.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h2><p>这一题还是比较简单的，运用vector的基本操作就可以完成题目的要求。对于召唤，则在vector对应的位置进行插入；攻击时，将对应角色的hp减去相应的攻击值即可 ，若出现随从死亡的情况，则在vector中erase相应的元素；结束回合时，根据类似于滚动数组的思想操作。最后判断英雄hp值并进行输出即可。</p><h2 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> hp[<span class="number">2</span>]=&#123;<span class="number">30</span>,<span class="number">30</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; sc[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,pl;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,h;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="comment">//getline(cin,s);</span></span><br><span class="line">sc[<span class="number">0</span>].push_back(make_pair(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">sc[<span class="number">1</span>].push_back(make_pair(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//getline(cin,s);</span></span><br><span class="line"><span class="comment">//istringstream sa(s);</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">"summon"</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;j;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;h;</span><br><span class="line"><span class="comment">//printf("%d %d %d",j,k,h);</span></span><br><span class="line">sc[pl].insert(sc[pl].begin()+j,make_pair(k,h));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">"attack"</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;j;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">hp[<span class="number">1</span>-pl]-=sc[pl][j].first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">sc[pl][j].second-=sc[<span class="number">1</span>-pl][k].first;</span><br><span class="line">sc[<span class="number">1</span>-pl][k].second-=sc[pl][j].first;</span><br><span class="line"><span class="comment">//printf("-----%d-----%d------\n",sc[0].size(),sc[1].size());</span></span><br><span class="line"><span class="keyword">if</span>(sc[pl][j].second&lt;=<span class="number">0</span>) sc[pl].erase(sc[pl].begin()+j);</span><br><span class="line"><span class="keyword">if</span>(sc[<span class="number">1</span>-pl][k].second&lt;=<span class="number">0</span>) sc[<span class="number">1</span>-pl].erase(sc[<span class="number">1</span>-pl].begin()+k);</span><br><span class="line"><span class="comment">//printf("-----%d-----%d------\n",sc[0].size(),sc[1].size());</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> pl=<span class="number">1</span>-pl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(hp[<span class="number">0</span>]&gt;<span class="number">0</span> &amp;&amp; hp[<span class="number">1</span>]&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(hp[<span class="number">0</span>]&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n%d"</span>,hp[<span class="number">0</span>],sc[<span class="number">0</span>].size()<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;sc[<span class="number">0</span>].size();i++) <span class="built_in">printf</span>(<span class="string">" %d"</span>,sc[<span class="number">0</span>][i].second);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n%d\n%d"</span>,hp[<span class="number">1</span>],sc[<span class="number">1</span>].size()<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;sc[<span class="number">1</span>].size();i++) <span class="built_in">printf</span>(<span class="string">" %d"</span>,sc[<span class="number">1</span>][i].second);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;CCF CSP 201609-3 炉石传说&lt;/h1&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://stbyu.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/categories/%E7%AC%94%E8%AE%B0/csp/"/>
    
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
      <category term="笔记" scheme="http://stbyu.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="模拟" scheme="http://stbyu.github.io/blog/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>CCF CSP 201809-3 元素选择器</title>
    <link href="http://stbyu.github.io/blog/2020/05/20/csp201809-3/"/>
    <id>http://stbyu.github.io/blog/2020/05/20/csp201809-3/</id>
    <published>2020-05-19T16:00:00.000Z</published>
    <updated>2020-05-20T10:59:43.747Z</updated>
    
    <content type="html"><![CDATA[<h1>CCF CSP 201809-3 元素选择器<a id="more"></a></h1><div class="row">    <embed src="201809-3.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h2><p>本题采用简化的树形结构存储数据，对于每一个数据用一个结构体，记录它的层级、行号、父亲的编号、标签和id。</p><p>在读入的时候，它前面离它最近的层级小于它的元素就是它的父亲，其他的按照读入的内容处理即可。</p><p>对于选择器，首先判断是否是后代选择器。若不是，则遍历每一个元素查询是否匹配；若是，则遍历每一个元素，先找到最后一级，然后向祖先方向寻找匹配的前级元素。</p><p>最后输出结果即可。</p><h2 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> bq,id;</span><br><span class="line"><span class="keyword">int</span> i,fa,ce;</span><br><span class="line">&#125;ht[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,f,cj,fsum,fid[<span class="number">105</span>];</span><br><span class="line"><span class="built_in">string</span> s,cs[<span class="number">85</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findd</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">i=cj;</span><br><span class="line">j=x;</span><br><span class="line"><span class="comment">//printf("____%d_____\n",x);</span></span><br><span class="line"><span class="keyword">while</span>(j &amp;&amp; i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;j&lt;&lt;"-"&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(cs[i][<span class="number">0</span>]==<span class="string">'#'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ht[j].id.find(cs[i])!=ht[j].id.npos) i--;</span><br><span class="line"><span class="comment">//printf("cnm");</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ht[j].bq.find(cs[i])!=ht[j].bq.npos)i--;</span><br><span class="line">&#125;</span><br><span class="line">j=ht[j].fa;</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>) fid[++fsum]=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">getline(<span class="built_in">cin</span>,s);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">getline(<span class="built_in">cin</span>,s);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;s.length();j++) </span><br><span class="line"><span class="keyword">if</span>(s[j]!=<span class="string">'.'</span>) <span class="keyword">break</span>;</span><br><span class="line">ht[i].ce=j;</span><br><span class="line"><span class="keyword">if</span>(ht[f].ce&gt;=ht[i].ce) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(f&gt;<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span>(ht[--f].ce&lt;ht[i].ce) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">ht[i].fa=f;</span><br><span class="line"><span class="keyword">for</span>(k=j;k&lt;s.length();k++)</span><br><span class="line"><span class="keyword">if</span>(s[k]==<span class="string">' '</span>) <span class="keyword">break</span>;</span><br><span class="line">ht[i].bq=s.substr(j,k-j);</span><br><span class="line"><span class="keyword">if</span>(k+<span class="number">1</span>&lt;s.length()) ht[i].id=s.substr(k+<span class="number">1</span>);</span><br><span class="line">transform(ht[i].bq.begin(), ht[i].bq.end(), ht[i].bq.begin(), ::<span class="built_in">tolower</span>);</span><br><span class="line">f=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for(i=1;i&lt;=n;i++) cout&lt;&lt;ht[i].bq&lt;&lt;"-"&lt;&lt;ht[i].id&lt;&lt;"-"&lt;&lt;i&lt;&lt;"-"&lt;&lt;ht[i].fa&lt;&lt;"-"&lt;&lt;ht[i].ce&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">getline(<span class="built_in">cin</span>,s);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>,k=<span class="number">0</span>,cj=<span class="number">0</span>;j&lt;s.length();j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[j]==<span class="string">' '</span>)</span><br><span class="line">&#123;</span><br><span class="line">cs[++cj]=s.substr(k,j-k);</span><br><span class="line"><span class="keyword">if</span>(cs[cj][<span class="number">0</span>]!=<span class="string">'#'</span>)</span><br><span class="line">transform(cs[cj].begin(), cs[cj].end(), cs[cj].begin(), ::<span class="built_in">tolower</span>);</span><br><span class="line"><span class="comment">//cout&lt;&lt;"+++"&lt;&lt;cs[cj]&lt;&lt;"+++"&lt;&lt;endl;</span></span><br><span class="line">k=j+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k&lt;s.length())</span><br><span class="line">&#123;</span><br><span class="line">cs[++cj]=s.substr(k);</span><br><span class="line"><span class="keyword">if</span>(cs[cj][<span class="number">0</span>]!=<span class="string">'#'</span>)</span><br><span class="line">transform(cs[cj].begin(), cs[cj].end(), cs[cj].begin(), ::<span class="built_in">tolower</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//cout&lt;&lt;"------"&lt;&lt;cs[1]&lt;&lt;"-----"&lt;&lt;cs[2]&lt;&lt;"---"&lt;&lt;cs[3]&lt;&lt;"---"&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//for(j=1;j&lt;=cj;j++) cout&lt;&lt;"-"&lt;&lt;cs[j]&lt;&lt;"-"&lt;&lt;j&lt;&lt;endl;</span></span><br><span class="line">fsum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(cj==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cs[<span class="number">1</span>][<span class="number">0</span>]==<span class="string">'#'</span>) <span class="comment">//findj(1);</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ht[j].id.find(cs[<span class="number">1</span>])!=ht[j].id.npos)</span><br><span class="line">fid[++fsum]=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//findb(1);</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ht[j].bq.find(cs[<span class="number">1</span>])!=ht[j].bq.npos)</span><br><span class="line">fid[++fsum]=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//if(cj&gt;2) printf("cnm"); </span></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ht[j].bq.find(cs[cj])!=ht[j].bq.npos) findd(j);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ht[j].id.find(cs[cj])!=ht[j].id.npos) findd(j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,fsum);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=fsum;j++) <span class="built_in">printf</span>(<span class="string">" %d"</span>,fid[j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;CCF CSP 201809-3 元素选择器&lt;/h1&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://stbyu.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/categories/%E7%AC%94%E8%AE%B0/csp/"/>
    
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
      <category term="笔记" scheme="http://stbyu.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="模拟" scheme="http://stbyu.github.io/blog/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>【作业向】程序设计思维与实践 CSP-M3</title>
    <link href="http://stbyu.github.io/blog/2020/05/15/csp-m3/"/>
    <id>http://stbyu.github.io/blog/2020/05/15/csp-m3/</id>
    <published>2020-05-14T16:00:00.000Z</published>
    <updated>2020-05-15T03:39:42.802Z</updated>
    
    <content type="html"><![CDATA[<h1>【作业向】程序设计思维与实践 CSP-M3<a id="more"></a></h1><div class="row">    <embed src="第三周题目.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="A-瑞神的序列"><a class="header-anchor" href="#A-瑞神的序列">♔</a>A  瑞神的序列</h2><p>一个比较简单的模拟题，读入一个数的时候将其与上一个数比较，若不同则段数加1，最后输出总段数即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,sum,pre=<span class="number">0x7fffffff</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;j);</span><br><span class="line"><span class="keyword">if</span>(j!=pre)</span><br><span class="line">&#123;</span><br><span class="line">sum++;</span><br><span class="line">pre=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-消消乐大师——Q老师"><a class="header-anchor" href="#B-消消乐大师——Q老师">♔</a>B 消消乐大师——Q老师</h2><p>一道模拟题，对于每个格子只向右或向下遍历，遇到不同的数值则停止，若走出的距离大于三则将经过的格子标记。最后输出的时候若格子已被标记则输出0，否则正常输出。</p><p>（又及：一定要遍历每一个格子！！！考试的时候怕TLE就写了个被标记的格子不再遍历，导致清况判断不全，才得了20分😭</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">35</span>][<span class="number">35</span>],visit[<span class="number">35</span>][<span class="number">35</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">i=x+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(a[i<span class="number">-1</span>][y]==a[i][y] &amp;&amp; i&lt;=n) i++;</span><br><span class="line"><span class="keyword">if</span>(i-x&gt;=<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=x;j&lt;i;j++) visit[j][y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">i=y+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(a[x][i<span class="number">-1</span>]==a[x][i] &amp;&amp; i&lt;=m) i++;</span><br><span class="line"><span class="keyword">if</span>(i-y&gt;=<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=y;j&lt;i;j++) visit[x][j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++) </span><br><span class="line">dfs(i,j);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(visit[i][j]) <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i][j]);</span><br><span class="line"><span class="keyword">if</span>(j!=m) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i!=n) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-咕咕东学英语"><a class="header-anchor" href="#C-咕咕东学英语">♔</a>C 咕咕东学英语</h2><p>这一题乍一看是个字符串的题目，但由于只有AB两个字母这一题应该是一个数学问题。我们可以知道，不符合要求的字串形如：ABBBB…、BAAAA…、AAAAB…以及BBBBA…这四种。因此我们只需要求出总的字串的数量，然后减去不符合条件的字串的数量即可。</p><p>为了解决这个问题，我们对字符串进行统计，将相邻的相同的字母合并，得到一个数列。这个数列按顺序记录了各个字母连续出现的次数，然后我们将总的字串的数量减去 a[1]+a[cnt]+a[k]*2(2&lt;=k&lt;=cnt-1) 后得到的就是最终的答案。</p><p>（又及：改完bug一定要提交！！！！因为忘了提交少拿了10分，我需要好好清醒清醒</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll n,cnt,sum;</span><br><span class="line">ll a[<span class="number">300005</span>];</span><br><span class="line"><span class="keyword">char</span> c,p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">sum=n*(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %c"</span>,&amp;c);</span><br><span class="line"><span class="keyword">if</span>(c==p) a[cnt]++;</span><br><span class="line"><span class="keyword">else</span> a[++cnt]=<span class="number">1</span>;</span><br><span class="line">p=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt&gt;=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;cnt;i++) sum-=a[i]*<span class="number">2</span>;</span><br><span class="line">sum-=(a[<span class="number">1</span>]+a[cnt]);</span><br><span class="line">sum+=cnt<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;【作业向】程序设计思维与实践 CSP-M3&lt;/h1&gt;
    
    </summary>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>【作业向】程序设计思维与实践 Week12 作业</title>
    <link href="http://stbyu.github.io/blog/2020/05/14/week12hw/"/>
    <id>http://stbyu.github.io/blog/2020/05/14/week12hw/</id>
    <published>2020-05-13T16:00:00.000Z</published>
    <updated>2020-05-15T13:48:09.257Z</updated>
    
    <content type="html"><![CDATA[<h1>【作业向】程序设计思维与实践 Week12作业<a id="more"></a></h1><h2 id="A-必做题1"><a class="header-anchor" href="#A-必做题1">♔</a>A 必做题1</h2><h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3><p>给出n个数，zjm想找出出现至少(n+1)/2次的数， 现在需要你帮忙找出这个数是多少？</p><h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3><p>本题包含多组数据：<br>每组数据包含两行。<br>第一行一个数字N(1&lt;=N&lt;=999999) ，保证N为奇数。<br>第二行为N个用空格隔开的整数。<br>数据以EOF结束。</p><h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3><p>对于每一组数据，你需要输出你找到的唯一的数。</p><h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3><h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 3 2 3 3</span><br><span class="line">11</span><br><span class="line">1 1 1 1 1 5 5 5 5 5 5</span><br><span class="line">7</span><br><span class="line">1 1 1 1 1 1 1</span><br></pre></td></tr></table></figure><h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">5</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3><p>遍历一遍记录出现次数，找到出现次数大于（n+1）/2的数立即结束循环（因为只能有一个这种数）</p><h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000005</span>],n,maxn;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">maxn=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;j);</span><br><span class="line">a[j]++;</span><br><span class="line">maxn=<span class="built_in">max</span>(maxn,j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=maxn;i++)</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;=(n+<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-必做题2"><a class="header-anchor" href="#B-必做题2">♔</a>B 必做题2</h2><h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3><p>zjm被困在一个三维的空间中,现在要寻找最短路径逃生！<br>空间由立方体单位构成。<br>zjm每次向上下前后左右移动一个单位需要一分钟，且zjm不能对角线移动。<br>空间的四周封闭。zjm的目标是走到空间的出口。<br>是否存在逃出生天的可能性？如果存在，则需要多少时间？</p><h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3><p>输入第一行是一个数表示空间的数量。<br>每个空间的描述的第一行为L，R和C（皆不超过30）。<br>L表示空间的高度，R和C分别表示每层空间的行与列的大小。<br>随后L层，每层R行，每行C个字符。<br>每个字符表示空间的一个单元。’#‘表示不可通过单元，’.‘表示空白单元。<br>zjm的起始位置在’S’，出口为’E’。每层空间后都有一个空行。<br>L，R和C均为0时输入结束。</p><h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3><p>每个空间对应一行输出。<br>如果可以逃生，则输出如下<br>Escaped in x minute(s).<br>x为最短脱离时间。</p><p>如果无法逃生，则输出如下<br>Trapped!</p><h3 id="Example-v2"><a class="header-anchor" href="#Example-v2">♔</a>Example</h3><h4 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">3 4 5</span><br><span class="line">S....</span><br><span class="line">.###.</span><br><span class="line">.##..</span><br><span class="line">###.#</span><br><span class="line"></span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">##.##</span><br><span class="line">##...</span><br><span class="line"></span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">#.###</span><br><span class="line">####E</span><br><span class="line"></span><br><span class="line">1 3 3</span><br><span class="line">S##</span><br><span class="line">#E#</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">0 0 0</span><br></pre></td></tr></table></figure><h4 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Escaped in 11 minute(s).</span><br><span class="line">Trapped!</span><br></pre></td></tr></table></figure><h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3><p>一道比较简单的bfs题，注意边界的处理和六个方向的处理（以及不要学我上来顺手写了个dfs然后TLE了就行</p><h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">int</span> l;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> h,m,n,minn,flag;</span><br><span class="line"><span class="keyword">int</span> sh,sm,sn,eh,em,en;</span><br><span class="line"><span class="keyword">int</span> kj[<span class="number">35</span>][<span class="number">35</span>][<span class="number">35</span>],visit[<span class="number">35</span>][<span class="number">35</span>][<span class="number">35</span>];</span><br><span class="line"><span class="keyword">int</span> fx[<span class="number">6</span>][<span class="number">3</span>]= &#123;&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">queue</span>&lt;data&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;h,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(h!=<span class="number">0</span> || n!=<span class="number">0</span> || m!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(kj,<span class="number">0</span>,<span class="keyword">sizeof</span>(kj));</span><br><span class="line"><span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=h; i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;=m; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %c"</span>,&amp;c);</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'.'</span>) kj[i][j][k]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'#'</span>) kj[i][j][k]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'S'</span>) sh=i,sn=j,sm=k;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'E'</span>) eh=i,en=j,em=k,kj[i][j][k]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">data u,v;</span><br><span class="line">u.x=sn,u.y=sm,u.z=sh,u.l=<span class="number">0</span>;</span><br><span class="line">visit[sh][sn][sm]=<span class="number">1</span>;</span><br><span class="line">q.push(u);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">u=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="comment">//printf("-%d-%d-%d-\n",u.z,u.x,u.y);</span></span><br><span class="line"><span class="keyword">if</span>(u.z==eh &amp;&amp; u.x==en &amp;&amp; u.y==em)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Escaped in %d minute(s).\n"</span>,u.l);</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(u.z+fx[i][<span class="number">0</span>]&gt;<span class="number">0</span> &amp;&amp; u.z+fx[i][<span class="number">0</span>]&lt;=h &amp;&amp; u.x+fx[i][<span class="number">1</span>]&gt;<span class="number">0</span> &amp;&amp; u.x+fx[i][<span class="number">1</span>]&lt;=n &amp;&amp; u.y+fx[i][<span class="number">2</span>]&gt;<span class="number">0</span> &amp;&amp; u.y+fx[i][<span class="number">2</span>]&lt;=m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!visit[u.z+fx[i][<span class="number">0</span>]][u.x+fx[i][<span class="number">1</span>]][u.y+fx[i][<span class="number">2</span>]] &amp;&amp; kj[u.z+fx[i][<span class="number">0</span>]][u.x+fx[i][<span class="number">1</span>]][u.y+fx[i][<span class="number">2</span>]])</span><br><span class="line">&#123;</span><br><span class="line">visit[u.z+fx[i][<span class="number">0</span>]][u.x+fx[i][<span class="number">1</span>]][u.y+fx[i][<span class="number">2</span>]]=<span class="number">1</span>;</span><br><span class="line">v.z=u.z+fx[i][<span class="number">0</span>],v.x=u.x+fx[i][<span class="number">1</span>],v.y=u.y+fx[i][<span class="number">2</span>],v.l=u.l+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//printf("+-%d-%d-%d-\n",v.z,v.x,v.y);</span></span><br><span class="line">q.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("%d+++\n",flag);</span></span><br><span class="line"><span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">"Trapped!\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;h,&amp;n,&amp;m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-必做题3"><a class="header-anchor" href="#C-必做题3">♔</a>C 必做题3</h2><h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3><p>东东每个学期都会去寝室接受扫楼的任务，并清点每个寝室的人数。<br>每个寝室里面有ai个人(1&lt;=i&lt;=n)。从第i到第j个宿舍一共有sum(i,j)=a[i]+…+a[j]个人<br>这让宿管阿姨非常开心，并且让东东扫楼m次，每一次数第i到第j个宿舍sum(i,j)<br>问题是要找到sum(i1, j1) + … + sum(im,jm)的最大值。且ix &lt;= iy &lt;=jx和ix &lt;= jy &lt;=jx的情况是不被允许的。也就是说m段都不能相交。<br>注：1 ≤ i ≤ n ≤ 1e6 , -32768 ≤ ai ≤ 32767 人数可以为负数。。。。(1&lt;=n&lt;=1000000)</p><h3 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h3><p>输入m，输入n。后面跟着输入n个ai 处理到 EOF</p><h3 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h3><p>输出最大和</p><h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3><h4 id="Input-v6"><a class="header-anchor" href="#Input-v6">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 3 1 2 3</span><br><span class="line">2 6 -1 4 -2 3 -2 3</span><br></pre></td></tr></table></figure><h4 id="Output-v6"><a class="header-anchor" href="#Output-v6">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3><p>我们用二维数组dp[i] [j]表示选了i段，到第j个为止，最大的结果，其中第j个必选。对于第j个数，我们有两种处理方法：</p><p>与最后一段合并，dp[i] [j]=dp[i] [j-1]+a[j];<br>成为新的一段，dp[i] [j]=dp[i-1] [k]+a[j]; (i-1&lt;k&lt;j)</p><p>然后三者取最大值即可，但是问题是这样会MLE，由于dp[i] [j]都是从dp[i-1]或者dp[i]推过来的，我们将第一维优化掉，只开两个一维数组就可以了。</p><h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,ans;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1000005</span>],dpp[<span class="number">1000005</span>],a[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">memset</span>(dpp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dpp));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">-0x7fffffff</span>;</span><br><span class="line"><span class="keyword">for</span>(j=i;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">dp[j]=<span class="built_in">max</span>(dp[j<span class="number">-1</span>]+a[j],dpp[j<span class="number">-1</span>]+a[j]);</span><br><span class="line">dpp[j<span class="number">-1</span>]=ans;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,dp[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-选做题1"><a class="header-anchor" href="#D-选做题1">♔</a>D 选做题1</h2><h3 id="Problem-v4"><a class="header-anchor" href="#Problem-v4">♔</a>Problem</h3><p>We give the following inductive definition of a “regular brackets” sequence:</p><ul><li>the empty sequence is a regular brackets sequence,</li><li>if <em>s</em> is a regular brackets sequence, then (<em>s</em>) and [<em>s</em>] are regular brackets sequences, and</li><li>if <em>a</em> and <em>b</em> are regular brackets sequences, then <em>ab</em> is a regular brackets sequence.</li><li>no other sequence is a regular brackets sequence</li></ul><p>For instance, all of the following character sequences are regular brackets sequences:</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(), [], (()), ()[], ()[()]</span><br></pre></td></tr></table></figure></blockquote><p>while the following character sequences are not:</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(, ], )(, ([)], ([(]</span><br></pre></td></tr></table></figure></blockquote><p>Given a brackets sequence of characters <em>a</em>1<em>a</em>2 … <em>an</em>, your goal is to find the length of the longest regular brackets sequence that is a subsequence of <em>s</em>. That is, you wish to find the largest <em>m</em> such that for indices <em>i</em>1, <em>i</em>2, …, <em>im</em> where 1 ≤ <em>i</em>1 &lt; <em>i</em>2 &lt; … &lt; <em>im</em> ≤ <em>n</em>, <em>ai</em>1<em>ai</em>2 … <em>aim</em> is a regular brackets sequence.</p><p>Given the initial sequence <code>([([]])]</code>, the longest regular brackets subsequence is <code>[([])]</code>.</p><h3 id="Input-v7"><a class="header-anchor" href="#Input-v7">♔</a>Input</h3><p>The input test file will contain multiple test cases. Each input test case consists of a single line containing only the characters <code>(</code>, <code>)</code>, <code>[</code>, and <code>]</code>; each input test will have length between 1 and 100, inclusive. The end-of-file is marked by a line containing the word “end” and should not be processed.</p><h3 id="Output-v7"><a class="header-anchor" href="#Output-v7">♔</a>Output</h3><p>For each input case, the program should print the length of the longest possible regular brackets subsequence on a single line.</p><h3 id="Examples-v2"><a class="header-anchor" href="#Examples-v2">♔</a>Examples</h3><h4 id="Input-v8"><a class="header-anchor" href="#Input-v8">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">((()))</span><br><span class="line">()()()</span><br><span class="line">([]])</span><br><span class="line">)[)(</span><br><span class="line">([][][)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="Output-v8"><a class="header-anchor" href="#Output-v8">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">6</span><br><span class="line">4</span><br><span class="line">0</span><br><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="解题思路-v4"><a class="header-anchor" href="#解题思路-v4">♔</a>解题思路</h3><p>一道区间DP题，dp[i] [j]表示区间 [i,j] 中合法序列的长度，根据上述条件进行状态转移即可：</p><p>条件一：<br>空串为合法序列，那么初始化 dp 数组为 0 即可<br>条件二：遇到合法序列的左右括号匹配则长度加 2<br>dp[i] [j]=max(dp[i] [j],dp[i+1] [j−1]+2)<br>条件三：A、B为合法序列，则AB为合法序列<br>dp[i] [j]=max(dp[i] [j],dp[i] [k]+dp[k+1] [j])</p><p>最后的答案为dp[0] [n-1]</p><h3 id="代码-v4"><a class="header-anchor" href="#代码-v4">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">105</span>][<span class="number">105</span>],n; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,h;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">" %s"</span>,c)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[<span class="number">0</span>]==<span class="string">'e'</span>) <span class="keyword">break</span>;</span><br><span class="line">n=<span class="built_in">strlen</span>(c);</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;n;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i+k&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">j=i+k;</span><br><span class="line"><span class="keyword">if</span>((c[i]==<span class="string">'('</span> &amp;&amp; c[j]==<span class="string">')'</span>) || (c[i]==<span class="string">'['</span> &amp;&amp; c[j]==<span class="string">']'</span>))</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=dp[i+<span class="number">1</span>][j<span class="number">-1</span>]+<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(h=i;h&lt;j;h++)</span><br><span class="line">dp[i][j]=<span class="built_in">max</span>(dp[i][j],dp[i][h]+dp[h+<span class="number">1</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[<span class="number">0</span>][n<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-选做题2"><a class="header-anchor" href="#E-选做题2">♔</a>E 选做题2</h2><h3 id="Problem-v5"><a class="header-anchor" href="#Problem-v5">♔</a>Problem</h3><p>马上假期就要结束了，zjm还有 n 个作业，完成某个作业需要一定的时间，而且每个作业有一个截止时间，若超过截止时间，一天就要扣一分。<br>zjm想知道如何安排做作业，使得扣的分数最少。<br>Tips: 如果开始做某个作业，就必须把这个作业做完了，才能做下一个作业。</p><h3 id="Input-v9"><a class="header-anchor" href="#Input-v9">♔</a>Input</h3><p>有多组测试数据。第一行一个整数表示测试数据的组数<br>第一行一个整数 n(1&lt;=n&lt;=15)<br>接下来n行，每行一个字符串(长度不超过100) S 表示任务的名称和两个整数 D 和 C，分别表示任务的截止时间和完成任务需要的天数。<br>这 n 个任务是按照字符串的字典序<strong>从小到大</strong>给出。</p><h3 id="Output-v9"><a class="header-anchor" href="#Output-v9">♔</a>Output</h3><p>每组测试数据，输出最少扣的分数，并输出完成作业的方案，如果有多个方案，输出字典序最小的一个。</p><h3 id="Examples-v3"><a class="header-anchor" href="#Examples-v3">♔</a>Examples</h3><h4 id="Input-v10"><a class="header-anchor" href="#Input-v10">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">Computer 3 3</span><br><span class="line">English 20 1</span><br><span class="line">Math 3 2</span><br><span class="line">3</span><br><span class="line">Computer 3 3</span><br><span class="line">English 6 3</span><br><span class="line">Math 6 3</span><br></pre></td></tr></table></figure><h4 id="Output-v10"><a class="header-anchor" href="#Output-v10">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">Computer</span><br><span class="line">Math</span><br><span class="line">English</span><br><span class="line">3</span><br><span class="line">Computer</span><br><span class="line">English</span><br><span class="line">Math</span><br></pre></td></tr></table></figure><h3 id="解题思路-v5"><a class="header-anchor" href="#解题思路-v5">♔</a>解题思路</h3><p>一道状压DP例题：</p><p>令 S 表示当前完成的作业集合，dp[S] 表示完成 S 作业集合后被扣的最少分数</p><p>则状态转移方程为：</p><ul><li>dp[S∣(1&lt;&lt;x)]=dp[S]+作业x被扣的分数</li><li>作业x被扣的分数=max(S作业集合对应的总时间+作业x完成所需时间−作业x的DDL，0）</li><li>保证字典序最小：由于任务是按照字符串的字典序从小到大给出的，所以 S 从小到大枚举，即 x 从小到大枚举即可。</li></ul><p>输出方案：对每个状态 S 记录 pre[S] 表示其对应的最后一个作业，回溯即可。</p><h3 id="代码-v5"><a class="header-anchor" href="#代码-v5">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> n[<span class="number">25</span>];</span><br><span class="line"><span class="keyword">int</span> ddl,w;</span><br><span class="line">&#125; hw[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> sum,tmp,dp[<span class="number">40005</span>],pre[<span class="number">40005</span>];</span><br><span class="line"><span class="keyword">int</span> n,T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeout</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x) <span class="keyword">return</span>;</span><br><span class="line">makeout(x-(<span class="number">1</span>&lt;&lt;(pre[x]<span class="number">-1</span>)));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,hw[pre[x]].n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,h;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="keyword">sizeof</span>(pre));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">scanf</span>(<span class="string">" %s%d%d"</span>,hw[i].n,&amp;hw[i].ddl,&amp;hw[i].w);</span><br><span class="line">dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;(<span class="number">1</span>&lt;&lt;n); i++)</span><br><span class="line">&#123;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;j)) sum+=hw[j+<span class="number">1</span>].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">&#123;</span><br><span class="line">tmp=<span class="built_in">max</span>(sum+hw[j+<span class="number">1</span>].w-hw[j+<span class="number">1</span>].ddl,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(dp[i]+tmp&lt;dp[i|(<span class="number">1</span>&lt;&lt;j)])</span><br><span class="line">&#123;</span><br><span class="line">dp[i|(<span class="number">1</span>&lt;&lt;j)]=dp[i]+tmp;</span><br><span class="line">pre[i|(<span class="number">1</span>&lt;&lt;j)]=j+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>]);</span><br><span class="line">makeout((<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;【作业向】程序设计思维与实践 Week12作业&lt;/h1&gt;
    
    </summary>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>【作业向】程序设计思维与实践 Week11 作业</title>
    <link href="http://stbyu.github.io/blog/2020/05/13/week11hw/"/>
    <id>http://stbyu.github.io/blog/2020/05/13/week11hw/</id>
    <published>2020-05-12T16:00:00.000Z</published>
    <updated>2020-05-15T02:27:19.591Z</updated>
    
    <content type="html"><![CDATA[<h1>【作业向】程序设计思维与实践 Week11作业<a id="more"></a></h1><h2 id="A-必做题11-1"><a class="header-anchor" href="#A-必做题11-1">♔</a>A 必做题11-1</h2><h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3><p>蒜头君从现在开始工作，年薪 N 万。他希望在蒜厂附近买一套 60 平米的房子，现在价格是 200 万。假设房子价格以每年百分之 K 增长，并且蒜头君未来年薪不变，且不吃不喝，不用交税，每年所得 N 万全都积攒起来，问第几年能够买下这套房子？（第一年年薪 N 万，房价 200万）</p><h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3><p>一行，包含两个正整数 N(10≤N≤50)，K(1≤K≤20)，中间用单个空格隔开。</p><h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3><p>如果在第 20 年或者之前就能买下这套房子，则输出一个整数 M，表示最早需要在第 M 年能买下；否则输出<code>&quot;Impossible&quot;</code>。</p><h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3><h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">50 10</span><br></pre></td></tr></table></figure><h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3><p>计算题，单词别打错就行23333</p><h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> f=<span class="number">200.0</span>,p,g,q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i,a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">        p=<span class="number">1.0</span>+b/<span class="number">100.0</span>;</span><br><span class="line">        g=<span class="number">0.0</span>+a;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++,f*=p)</span><br><span class="line">        &#123;</span><br><span class="line">                q+=g;</span><br><span class="line">               <span class="keyword">if</span>(q&gt;=f)</span><br><span class="line">               &#123;<span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Impossible"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-必做题11-2"><a class="header-anchor" href="#B-必做题11-2">♔</a>B 必做题11-2</h2><h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3><p>蒜头君的班级里有 n*n 个同学，现在全班同学已经排列成一个 n∗n 的方阵，但是老师却临时给出了一组新的列队方案</p><p>为了方便列队，所以老师只关注这个方阵中同学的性别，不看具体的人是谁</p><p>这里我们用 0 表示男生，用 1 表示女生</p><p>现在蒜头君告诉你同学们已经排好的方阵是什么样的，再告诉你老师希望的方阵是什么样的</p><p>他想知道同学们已经列好的方阵能否通过顺时针旋转变成老师希望的方阵</p><ol><li>不需要旋转则输出 0</li><li>顺时针旋转 90° 则输出 1</li><li>顺时针旋转 180° 则输出 2</li><li>顺时针旋转 270° 则输出 3</li></ol><p>若不满足以上四种情况则输出 −1</p><p>若满足多种情况，则输出较小的数字</p><h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3><p>第一行为一个整数 n</p><p>接下来的 n 行同学们已经列好的 01 方阵；</p><p>再接下来的 n 行表示老师希望的的 01 方阵。</p><h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3><p>输出仅有一行，该行只有一个整数，如题所示。</p><h3 id="Example-v2"><a class="header-anchor" href="#Example-v2">♔</a>Example</h3><h4 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">0 0 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line">0 1 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line">0 1 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line">0 0 0 0</span><br></pre></td></tr></table></figure><h4 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3><p>使用循环进行比较即可，注意循环条件的设置，详见代码。</p><h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll a[<span class="number">25</span>][<span class="number">25</span>],b[<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line">ll n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll i,j;</span><br><span class="line">ll flag=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i][j]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;b[i][j]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i][j]!=a[i][j])</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i][j]!=a[n-j+<span class="number">1</span>][i])</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i][j]!=a[n-i+<span class="number">1</span>][n-j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"2"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i][j]!=a[j][n-i+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"3"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-必做题11-3"><a class="header-anchor" href="#C-必做题11-3">♔</a>C 必做题11-3</h2><h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3><p>Julius Caesar 曾经使用过一种很简单的密码。对于明文中的每个字符，将它用它字母表中后 55 位对应的字符来代替，这样就得到了密文。比如字符<code>'A'</code>用<code>'F'</code>来代替。如下是密文和明文中字符的对应关系。</p><p>密文A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p><p>明文V W X Y Z A B C D E F G H I J K L M N O P Q R S T U</p><p>你的任务是对给定的密文进行解密得到明文。</p><p>你需要注意的是，密文中出现的字母都是大写字母。密文中也包括非字母的字符，对这些字符不用进行解码。</p><h3 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h3><p>一行，给出密文，密文不为空，而且其中的字符数不超过 200。</p><h3 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h3><p>输出一行，即密文对应的明文。</p><p>输出时每行末尾的多余空格，不影响答案正确性</p><h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3><h4 id="Input-v6"><a class="header-anchor" href="#Input-v6">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX</span><br></pre></td></tr></table></figure><h4 id="Output-v6"><a class="header-anchor" href="#Output-v6">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES</span><br></pre></td></tr></table></figure><h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3><p>可以看到密文和明文的位移为5，以此规律对于大写字母进行变换，其他字符原样输出。</p><h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(c!=<span class="string">'\n'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c&lt;=<span class="string">'Z'</span> &amp;&amp; c&gt;=<span class="string">'A'</span>) c=<span class="string">'A'</span>+(c-<span class="string">'A'</span><span class="number">-5</span>+<span class="number">26</span>)%<span class="number">26</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,c);</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-必做题11-4"><a class="header-anchor" href="#D-必做题11-4">♔</a>D 必做题11-4</h2><h3 id="Problem-v4"><a class="header-anchor" href="#Problem-v4">♔</a>Problem</h3><p>东东和他的女朋友(幻想的)去寿司店吃晚餐(在梦中)，他发现了一个有趣的事情，这家餐厅提供的 n 个的寿司被连续的放置在桌子上 (有序)，东东可以选择一段连续的寿司来吃</p><p>东东想吃鳗鱼，但是东妹想吃金枪鱼。核 平 起 见，他们想选择一段连续的寿司（这段寿司必须满足金枪鱼的数量等于鳗鱼的数量，且前一半全是一种，后一半全是另外一种）我们用1代表鳗鱼，2代表金枪鱼。</p><p>比如，[2,2,2,1,1,1]这段序列是合法的，[1,2,1,2,1,2]是非法的。因为它不满足第二个要求。</p><p>东东希望你能帮助他找到最长的一段合法寿司，以便自己能吃饱。</p><h3 id="Input-v7"><a class="header-anchor" href="#Input-v7">♔</a>Input</h3><p>输入：<br>第一行：一个整数n（2≤n≤100000），寿司序列的长度。<br>第二行：n个整数（每个整数不是1就是2，意义如上所述）</p><h3 id="Output-v7"><a class="header-anchor" href="#Output-v7">♔</a>Output</h3><p>输出：一个整数（代表东东可以选择的最长的一段连续的且合法的寿司）</p><h3 id="Examples-v2"><a class="header-anchor" href="#Examples-v2">♔</a>Examples</h3><h4 id="Input-v8"><a class="header-anchor" href="#Input-v8">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">2 2 2 1 1 2 2</span><br></pre></td></tr></table></figure><h4 id="Output-v8"><a class="header-anchor" href="#Output-v8">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="解题思路-v4"><a class="header-anchor" href="#解题思路-v4">♔</a>解题思路</h3><p>使用sum1和sum2记录连续出现的1，2的个数，答案只能是min(sum1,sum2)*2，记录答案的最大值即可。</p><h3 id="代码-v4"><a class="header-anchor" href="#代码-v4">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> no,pr,sum1,sum2,n,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pr);</span><br><span class="line">    <span class="keyword">if</span>(pr==<span class="number">1</span>) sum1++;</span><br><span class="line">    <span class="keyword">else</span> sum2++;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;no);</span><br><span class="line">        <span class="keyword">if</span>(no==pr)</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="keyword">if</span>(no==<span class="number">1</span>) sum1++;</span><br><span class="line">             <span class="keyword">else</span> sum2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(no==<span class="number">1</span>) sum1=<span class="number">1</span>;</span><br><span class="line">             <span class="keyword">else</span> sum2=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,<span class="built_in">min</span>(sum1,sum2)*<span class="number">2</span>);</span><br><span class="line">        pr=no;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-选做题11-1-东东与ATM"><a class="header-anchor" href="#E-选做题11-1-东东与ATM">♔</a>E 选做题11-1 东东与ATM</h2><h3 id="Problem-v5"><a class="header-anchor" href="#Problem-v5">♔</a>Problem</h3><p>一家银行计划安装一台用于提取现金的机器。<br>机器能够按要求的现金量发送适当的账单。<br>机器使用正好N种不同的面额钞票，例如D_k，k = 1,2,…,N，并且对于每种面额D_k，机器都有n_k张钞票。<br>例如，<br>N = 3，<br>n_1 = 10，D_1 = 100，<br>n_2 = 4，D_2 = 50，<br>n_3 = 5，D_3 = 10<br>表示机器有10张面额为100的钞票、4张面额为50的钞票、5张面额为10的钞票。<br>东东在写一个 ATM 的程序，可根据具体金额请求机器交付现金。<br>注意，这个程序计算程序得出的最大现金少于或等于可以根据设备的可用票据供应有效交付的现金。</p><h3 id="Input-v9"><a class="header-anchor" href="#Input-v9">♔</a>Input</h3><p>程序输入来自标准输入。 输入中的每个数据集代表特定交易，其格式为：Cash N n1 D1 n2 D2 … nN DN其中0 &lt;= Cash &lt;= 100000是所请求的现金量，0 &lt;= N &lt;= 10是 纸币面额的数量，0 &lt;= nk &lt;= 1000是Dk面额的可用纸币的数量，1 &lt;= Dk &lt;= 1000，k = 1，N。 输入中的数字之间可以自由出现空格。 输入数据正确。</p><h3 id="Output-v9"><a class="header-anchor" href="#Output-v9">♔</a>Output</h3><p>对于每组数据，程序将在下一行中将结果打印到单独一行上的标准输出中。</p><h3 id="Examples-v3"><a class="header-anchor" href="#Examples-v3">♔</a>Examples</h3><h4 id="Input-v10"><a class="header-anchor" href="#Input-v10">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">735 3  4 125  6 5  3 350</span><br><span class="line">633 4  500 30  6 100  1 5  0 1</span><br><span class="line">735 0</span><br><span class="line">0 3  10 100  10 50  10 10</span><br></pre></td></tr></table></figure><h4 id="Output-v10"><a class="header-anchor" href="#Output-v10">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">735</span><br><span class="line">630</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="解题思路-v5"><a class="header-anchor" href="#解题思路-v5">♔</a>解题思路</h3><p>经典的背包问题，将每种金额按照二进制拆分，然后转化为0/1背包。</p><h3 id="代码-v5"><a class="header-anchor" href="#代码-v5">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">100005</span>],a[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> maxn,n,cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> d,k;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;maxn,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;k,&amp;d);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=k;j*=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[++cnt]=d*j;</span><br><span class="line">k-=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k!=<span class="number">0</span>) a[++cnt]=d*k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=maxn;j&gt;=a[i];j--)</span><br><span class="line">&#123;</span><br><span class="line">f[j]=<span class="built_in">max</span>(f[j],f[j-a[i]]+a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[maxn]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-选做题11-2-东东开车了"><a class="header-anchor" href="#F-选做题11-2-东东开车了">♔</a>F 选做题11-2 东东开车了</h2><h3 id="Problem-v6"><a class="header-anchor" href="#Problem-v6">♔</a>Problem</h3><p>东东开车出去泡妞(在梦中)，车内提供了 n 张CD唱片，已知东东开车的时间是 n 分钟，他该如何去选择唱片去消磨这无聊的时间呢</p><p>假设:</p><ul><li>CD数量不超过20张</li><li>没有一张CD唱片超过 <em>N</em> 分钟</li><li>每张唱片只能听一次</li><li>唱片的播放长度为整数</li><li><em>N</em> 也是整数</li></ul><p>我们需要找到最能消磨时间的唱片数量，并按使用顺序输出答案（必须是听完唱片，不能有唱片没听完却到了下车时间的情况发生）</p><p>本题是 Special Judge</p><h3 id="Input-v11"><a class="header-anchor" href="#Input-v11">♔</a>Input</h3><p>多组输入</p><p>每行输入第一个数字<em>N</em>, 代表总时间，第二个数字 <em>M</em> 代表有 <em>M</em> 张唱片，后面紧跟 <em>M</em> 个数字，代表每张唱片的时长 例如样例一: <em>N</em>=5, <em>M</em>=3, 第一张唱片为 1 分钟, 第二张唱片 3 分钟, 第三张 4 分钟</p><p>所有数据均满足以下条件:</p><p>N≤10000<br>M≤20</p><h3 id="Output-v11"><a class="header-anchor" href="#Output-v11">♔</a>Output</h3><p>输出所有唱片的时长和总时长，具体输出格式见样例</p><h3 id="Examples-v4"><a class="header-anchor" href="#Examples-v4">♔</a>Examples</h3><h4 id="Input-v12"><a class="header-anchor" href="#Input-v12">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5 3 1 3 4</span><br><span class="line">10 4 9 8 4 2</span><br><span class="line">20 4 10 5 7 4</span><br><span class="line">90 8 10 23 1 2 3 4 5 7</span><br><span class="line">45 8 4 10 44 43 12 9 8 2</span><br></pre></td></tr></table></figure><h4 id="Output-v12"><a class="header-anchor" href="#Output-v12">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 4 sum:5</span><br><span class="line">8 2 sum:10</span><br><span class="line">10 5 4 sum:19</span><br><span class="line">10 23 1 2 3 4 5 7 sum:55</span><br><span class="line">4 10 12 9 8 2 sum:45</span><br></pre></td></tr></table></figure><h3 id="解题思路-v6"><a class="header-anchor" href="#解题思路-v6">♔</a>解题思路</h3><p>本题需要在求解背包问题的过程中进行路径的记录，当f[j]&lt;=f[ j-a[i] ]+a[i]时，pre[i] [j]置为1，在输出时逆序输出即可。</p><h3 id="代码-v6"><a class="header-anchor" href="#代码-v6">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">100005</span>],a[<span class="number">25</span>],xu[<span class="number">25</span>],pre[<span class="number">25</span>][<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> maxn,n,cnt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;maxn,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line"><span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="keyword">sizeof</span>(pre));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=maxn;j&gt;=a[i];j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(f[j]&lt;=f[j-a[i]]+a[i])</span><br><span class="line">&#123;</span><br><span class="line">f[j]=f[j-a[i]]+a[i];</span><br><span class="line">pre[i][j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">j=maxn,i=n;</span><br><span class="line"><span class="keyword">while</span>(j &amp;&amp; i&gt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(pre[i][j])</span><br><span class="line">&#123;</span><br><span class="line">xu[++cnt]=a[i];</span><br><span class="line"><span class="comment">//printf("%d ",a[i]);</span></span><br><span class="line">j-=a[i];</span><br><span class="line">&#125;</span><br><span class="line">i--;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(i=cnt;i&gt;=<span class="number">1</span>;i--) <span class="built_in">printf</span>(<span class="string">"%d "</span>,xu[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"sum:%d\n"</span>,f[maxn]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;【作业向】程序设计思维与实践 Week11作业&lt;/h1&gt;
    
    </summary>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>【作业向】程序设计思维与实践 Week10 限时大模拟</title>
    <link href="http://stbyu.github.io/blog/2020/04/25/week10hwmn/"/>
    <id>http://stbyu.github.io/blog/2020/04/25/week10hwmn/</id>
    <published>2020-04-24T16:00:00.000Z</published>
    <updated>2020-04-25T08:00:19.001Z</updated>
    
    <content type="html"><![CDATA[<h1>【作业向】程序设计思维与实践 Week10 限时大模拟<a id="more"></a></h1><h2 id="A-签到题"><a class="header-anchor" href="#A-签到题">♔</a>A  签到题</h2><div class="row">    <embed src="A.pdf" width="100%" height="550" type="application/pdf"></div><p>这是真·签到题，若读入的三个数中有偶数，则可以平均分配，直接输出0；若没有偶数则无法平均分配，为了差距最小，则输出三个数中较小的两个数的乘积。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll a[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">1</span>]%<span class="number">2</span>==<span class="number">0</span> || a[<span class="number">2</span>]%<span class="number">2</span>==<span class="number">0</span> || a[<span class="number">3</span>]%<span class="number">2</span>==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld"</span>,a[<span class="number">1</span>]*a[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-团队聚会"><a class="header-anchor" href="#B-团队聚会">♔</a>B 团队聚会</h2><div class="row">    <embed src="B.pdf" width="100%" height="550" type="application/pdf"></div><p>这一题还是比较考验代码能力和思维能力的，我的做法是将读入的事件拆开，分成开始和结束两个事件，并记录是事件类型及所属的队员，然后按时间进行排序。排好序后检查开头的事件是否是1800/01/01 00:00:00，若不是则加入一个时间为1800/01/01 00:00:00的空事件；然后检查结尾的事件是否为2200/01/01 00:00:00，若不是则加入一个时间为2200/01/01 00:00:00的空事件。然后再进行排序（这样写常数可能大了一些）。</p><p>接下来进行一次遍历，若一个事件不与上一个事件时间重复，则加入到时间队列中；若时间重复则跳过（奇怪的常数增加了）。然后定义数组visit[i] [j],若为一，则表示第i个人在第j个时间有事情，这一个我们通过类似于前缀和的方法来处理。处理完成后需要再处理出visit[0] [j]表示在第j个时间有visit[0] [j]个人有事情，至此处理的部分就完成了。</p><p>然后进行求解，一个时间满足要求的条件是在该时段有事情的人要小于等于一，且总人数减去有事情的人数大于等于总人数减1。又因为时间段要尽可能的长，因此我们需要找的起点是连续一段满足条件的时间段中的第一个时间段，终点是连续一段满足条件的时间段后的第一个不满足条件的时间段。</p><p>然后判断是否大于等于一小时，这里都转化为秒来计算。又因为每个月只有30天，所以无法使用ctime中自带的函数进行转换。我的方法是，对于时间a和b（a早于b），t等于b的年减去a的年，t自乘12，t等于t+b的月减a的月，然后t自乘30，t等于t+b的天减a的天，，，以此类推就可以算出b比a晚多少秒，若t大于等于3600秒，则符合要求，则进行输出，否则继续遍历。</p><p>由此可见，这个做法的时间复杂度主要是在排序上，总的时间复杂度是O(Tmnlog(mn))还是比较优秀的。</p><p><img src="/blog/2020/04/25/week10hwmn/image-20200425155942723.png" alt="image-20200425155942723"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> n,y,r,s,f,m;</span><br><span class="line"><span class="keyword">int</span> peo,flg,pti;</span><br><span class="line">&#125;pe[<span class="number">5000</span>],pep[<span class="number">5000</span>];</span><br><span class="line"><span class="keyword">int</span> T,n,m,pcnt,psum,pre,pt;</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">25</span>][<span class="number">5000</span>];</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">50000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wly</span><span class="params">(data a,data b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.n&lt;b.n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a.n==b.n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a.y&lt;b.y) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a.y==b.y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a.r&lt;b.r) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a.r==b.r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a.s&lt;b.s) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a.s==b.s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a.f&lt;b.f) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a.f==b.f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a.m&lt;b.m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a.m==b.m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a.flg&lt;b.flg) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a.flg==b.flg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a.peo&lt;b.peo) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(data a,data b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll tim=<span class="number">0</span>;</span><br><span class="line">tim=b.n-a.n;</span><br><span class="line">tim*=<span class="number">12</span>;</span><br><span class="line">tim=(b.y+tim)-a.y;</span><br><span class="line">tim*=<span class="number">30</span>;</span><br><span class="line">tim=(b.r+tim)-a.r;</span><br><span class="line">tim*=<span class="number">24</span>;</span><br><span class="line">tim=(b.s+tim)-a.s;</span><br><span class="line">tim*=<span class="number">60</span>;</span><br><span class="line">tim=(b.f+tim)-a.f;</span><br><span class="line">tim*=<span class="number">60</span>;</span><br><span class="line">tim=(b.m+tim)-a.m;</span><br><span class="line"><span class="keyword">if</span>(tim&gt;=<span class="number">3600</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen("in_ff","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("a1.txt","w",stdout);</span></span><br><span class="line"><span class="keyword">int</span> i,j,k,h;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">for</span>(h=<span class="number">1</span>;h&lt;=T;h++)</span><br><span class="line">&#123;</span><br><span class="line">pcnt=<span class="number">0</span>;</span><br><span class="line">psum=<span class="number">0</span>;</span><br><span class="line">pt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(pe,<span class="number">0</span>,<span class="keyword">sizeof</span>(pe));</span><br><span class="line"><span class="built_in">memset</span>(pep,<span class="number">0</span>,<span class="keyword">sizeof</span>(pep));</span><br><span class="line"><span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line">++pcnt;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%4d%2d%2d%2d%2d%2d"</span>,&amp;pe[pcnt].n,&amp;pe[pcnt].y,&amp;pe[pcnt].r,&amp;pe[pcnt].s,&amp;pe[pcnt].f,&amp;pe[pcnt].m);</span><br><span class="line">pe[pcnt].peo=i;pe[pcnt].flg=<span class="number">0</span>;</span><br><span class="line">++pcnt;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%4d%2d%2d%2d%2d%2d"</span>,&amp;pe[pcnt].n,&amp;pe[pcnt].y,&amp;pe[pcnt].r,&amp;pe[pcnt].s,&amp;pe[pcnt].f,&amp;pe[pcnt].m);</span><br><span class="line">pe[pcnt].peo=i;pe[pcnt].flg=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//c=getchar();</span></span><br><span class="line"><span class="comment">//while(c!='\n') c=getchar();</span></span><br><span class="line">gets(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("%d-----\n",pcnt);</span></span><br><span class="line">sort(pe+<span class="number">1</span>,pe+<span class="number">1</span>+pcnt,wly);</span><br><span class="line"><span class="keyword">if</span>(!(pe[pcnt].n==<span class="number">2200</span> &amp;&amp; pe[pcnt].y==<span class="number">1</span> &amp;&amp; pe[pcnt].r==<span class="number">1</span> &amp;&amp; pe[pcnt].s==<span class="number">0</span> &amp;&amp; pe[pcnt].f==<span class="number">0</span> &amp;&amp; pe[pcnt].m==<span class="number">0</span>))</span><br><span class="line">pe[++pcnt].n=<span class="number">2200</span>;pe[pcnt].y=<span class="number">1</span>;pe[pcnt].r=<span class="number">1</span>;pe[pcnt].flg=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!(pe[<span class="number">1</span>].n==<span class="number">1800</span> &amp;&amp; pe[<span class="number">1</span>].y==<span class="number">1</span> &amp;&amp; pe[<span class="number">1</span>].r==<span class="number">1</span> &amp;&amp; pe[<span class="number">1</span>].s==<span class="number">0</span> &amp;&amp; pe[<span class="number">1</span>].f==<span class="number">0</span> &amp;&amp; pe[<span class="number">1</span>].m==<span class="number">0</span>))</span><br><span class="line">pe[++pcnt].n=<span class="number">1800</span>;pe[pcnt].y=<span class="number">1</span>;pe[pcnt].r=<span class="number">1</span>;pe[pcnt].s=<span class="number">0</span>;pe[pcnt].f=<span class="number">0</span>;pe[pcnt].m=<span class="number">0</span>;</span><br><span class="line">sort(pe+<span class="number">1</span>,pe+<span class="number">1</span>+pcnt,wly);</span><br><span class="line"><span class="comment">//for(i=1;i&lt;=pcnt;i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf("-%d- %4d %2d %2d %2d %2d %2d %2d\n",visit[0][i],pe[i].n,pe[i].y,pe[i].r,pe[i].s,pe[i].f,pe[i].m,pe[i].peo);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">pep[++psum]=pe[<span class="number">1</span>];</span><br><span class="line">pe[<span class="number">1</span>].pti=psum;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=pcnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(pe[i].n==pe[i<span class="number">-1</span>].n &amp;&amp; pe[i].y==pe[i<span class="number">-1</span>].y &amp;&amp; pe[i].r==pe[i<span class="number">-1</span>].r &amp;&amp; pe[i].s==pe[i<span class="number">-1</span>].s &amp;&amp; pe[i].f==pe[i<span class="number">-1</span>].f &amp;&amp; pe[i].m==pe[i<span class="number">-1</span>].m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(pe[i].peo==pe[i<span class="number">-1</span>].peo &amp;&amp; pe[i].flg==pe[i<span class="number">-1</span>].flg) <span class="keyword">continue</span>;</span><br><span class="line">pe[i].pti=psum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pep[++psum]=pe[i];</span><br><span class="line">pe[i].pti=psum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=pcnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(pe[i].peo==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(pe[i].flg) visit[pe[i].peo][pe[i].pti]-=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> visit[pe[i].peo][pe[i].pti]+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for(i=1;i&lt;=pcnt;i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//for(j=1;j&lt;=n;j++) printf("%d ",visit[j][i]);</span></span><br><span class="line"><span class="comment">//printf("\n");</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=psum;j++) visit[i][j]+=visit[i][j<span class="number">-1</span>];</span><br><span class="line"><span class="comment">//printf("-------\n"); </span></span><br><span class="line"><span class="comment">//for(i=1;i&lt;=pcnt;i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//for(j=1;j&lt;=n;j++) printf("%d ",visit[j][i]);</span></span><br><span class="line"><span class="comment">//printf("\n");</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=psum;i++) </span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++) <span class="keyword">if</span>(visit[j][i]) visit[<span class="number">0</span>][i]+=<span class="number">1</span>;</span><br><span class="line">visit[<span class="number">0</span>][psum]=n;</span><br><span class="line"><span class="comment">//for(i=1;i&lt;=pcnt;i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf("-%d- %4d %2d %2d %2d %2d %2d %2d\n",visit[0][i],pe[i].n,pe[i].y,pe[i].r,pe[i].s,pe[i].f,pe[i].m,pe[i].peo);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Scenario #%d:\n"</span>,h);</span><br><span class="line">pre=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(pre&lt;=psum &amp;&amp; (visit[<span class="number">0</span>][pre]&gt;<span class="number">1</span> || n-visit[<span class="number">0</span>][pre]&lt;<span class="number">2</span>)) pre++;</span><br><span class="line"><span class="comment">//printf("---%d---\n",pre);</span></span><br><span class="line"><span class="keyword">for</span>(i=pre+<span class="number">1</span>;i&lt;=psum;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(visit[<span class="number">0</span>][i]&lt;=<span class="number">1</span> &amp;&amp; n-visit[<span class="number">0</span>][i]&gt;=<span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(judge(pep[pre],pep[i])) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"appointment possible from %02d/%02d/%04d %02d:%02d:%02d to %02d/%02d/%04d %02d:%02d:%02d\n"</span>,pep[pre].y,pep[pre].r,pep[pre].n,pep[pre].s,pep[pre].f,pep[pre].m,pep[i].y,pep[i].r,pep[i].n,pep[i].s,pep[i].f,pep[i].m);</span><br><span class="line">pt=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=psum &amp;&amp; (visit[<span class="number">0</span>][i]&gt;<span class="number">1</span> || n-visit[<span class="number">0</span>][i]&lt;<span class="number">2</span>)) i++;</span><br><span class="line">pre=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!pt) <span class="built_in">printf</span>(<span class="string">"no appointment possible\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;【作业向】程序设计思维与实践 Week10 限时大模拟&lt;/h1&gt;
    
    </summary>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>【作业向】程序设计思维与实践 Week10 作业</title>
    <link href="http://stbyu.github.io/blog/2020/04/25/week10hw/"/>
    <id>http://stbyu.github.io/blog/2020/04/25/week10hw/</id>
    <published>2020-04-24T16:00:00.000Z</published>
    <updated>2020-04-25T04:08:16.929Z</updated>
    
    <content type="html"><![CDATA[<h1>【作业向】程序设计思维与实践 Week10作业<a id="more"></a></h1><h2 id="A-Game23"><a class="header-anchor" href="#A-Game23">♔</a>A Game23</h2><h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3><p>东东在玩游戏“Game23”。</p><p>在一开始他有一个数字n，他的目标是把它转换成m，在每一步操作中，他可以将n乘以2或乘以3，他可以进行任意次操作。输出将n转换成m的操作次数，如果转换不了输出-1。</p><h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3><p>输入的唯一一行包括两个整数n和m（1&lt;=n&lt;=m&lt;=5*10^8).</p><h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3><p>输出从n转换到m的操作次数，否则输出-1.</p><h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3><h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">120 51840</span><br></pre></td></tr></table></figure><h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3><p>这一题需要判断m/n是否可以由2<sup>k</sup>*3<sup>j</sup>组成，若可以则输出k+j的值，否则输出-1。</p><h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll m,n,sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">if</span>(n&gt;m || m%n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m==n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">m=m/n;</span><br><span class="line"><span class="keyword">while</span>(m &amp;&amp; m%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum++;</span><br><span class="line">m/=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m &amp;&amp; m%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum++;</span><br><span class="line">m/=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m!=<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld"</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-LIS-LCS"><a class="header-anchor" href="#B-LIS-LCS">♔</a>B LIS &amp; LCS</h2><h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3><p>东东有两个序列A和B。</p><p>他想要知道序列A的LIS和序列AB的LCS的长度。</p><p>注意，LIS为严格递增的，即a1&lt;a2&lt;…&lt;ak(ai&lt;=1,000,000,000)。</p><h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3><p>第一行两个数n，m（1&lt;=n&lt;=5,000,1&lt;=m&lt;=5,000）<br>第二行n个数，表示序列A<br>第三行m个数，表示序列B</p><h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3><p>输出一行数据ans1和ans2，分别代表序列A的LIS和序列AB的LCS的长度</p><h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3><p>这一题是比较经典的动态规划的题目，对于最长上升子序列，递推式为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">dp1[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&lt;a[i]) dp1[i]=<span class="built_in">max</span>(dp1[i],dp1[j]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,dp1[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于最长公共子序列，递推式为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==b[j]) dp2[i][j]=<span class="built_in">max</span>(dp2[i][j],dp2[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dp2[i][j]=<span class="built_in">max</span>(dp2[i<span class="number">-1</span>][j],dp2[i][j<span class="number">-1</span>]);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp1[<span class="number">5005</span>],dp2[<span class="number">5005</span>][<span class="number">5005</span>],ans;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5005</span>],b[<span class="number">5005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">dp1[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&lt;a[i]) dp1[i]=<span class="built_in">max</span>(dp1[i],dp1[j]+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//else dp1[i]=max(dp1[i],dp1[j]);</span></span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,dp1[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,ans);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==b[j]) dp2[i][j]=<span class="built_in">max</span>(dp2[i][j],dp2[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dp2[i][j]=<span class="built_in">max</span>(dp2[i<span class="number">-1</span>][j],dp2[i][j<span class="number">-1</span>]);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,dp2[n][m]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-拿数问题-II"><a class="header-anchor" href="#C-拿数问题-II">♔</a>C 拿数问题 II</h2><h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3><p>YJQ 上完第10周的程序设计思维与实践后，想到一个绝妙的主意，他对拿数问题做了一点小修改，使得这道题变成了 拿数问题 II。</p><p>给一个序列，里边有 n 个数，每一步能拿走一个数，比如拿第 i 个数， Ai = x，得到相应的分数 x，但拿掉这个 Ai 后，x+1 和 x-1 (如果有 Aj = x+1 或 Aj = x-1 存在) 就会变得不可拿（但是有 Aj = x 的话可以继续拿这个 x）。求最大分数。</p><p><strong>本题和课上讲的有些许不一样，但是核心是一样，需要你自己思考。</strong></p><h3 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h3><p>第一行包含一个整数 <em>n</em> (1 ≤ <em>n</em> ≤ 105)，表示数字里的元素的个数</p><p>第二行包含n个整数<em>a</em>1, <em>a</em>2, …, <em>a**n</em> (1 ≤ <em>a**i</em> ≤ 105)</p><h3 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h3><p>输出一个整数：n你能得到最大分值。</p><h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3><h4 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">1 2 1 3 2 2 2 2 3</span><br></pre></td></tr></table></figure><h4 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3><p>这一题要先对数据进行一个处理，要记录下出现的每个数的个数存储在a[i]中。然后进行递推，式子为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">1</span>]=a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=maxn;i++)</span><br><span class="line">dp[i]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>],dp[i<span class="number">-2</span>]+i*a[i]);</span><br></pre></td></tr></table></figure><p>即第i个数取或者不取的两种状态。答案为dp[maxn]，maxn表示出现的最大的数。</p><h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll n,maxn;</span><br><span class="line">ll a[<span class="number">100005</span>],dp[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;j);</span><br><span class="line">a[j]++;</span><br><span class="line">maxn=<span class="built_in">max</span>(maxn,j);</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">1</span>]=a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=maxn;i++)</span><br><span class="line">dp[i]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>],dp[i<span class="number">-2</span>]+i*a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,dp[maxn]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;【作业向】程序设计思维与实践 Week10作业&lt;/h1&gt;
    
    </summary>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>CCF CSP 201604-3 路径解析</title>
    <link href="http://stbyu.github.io/blog/2020/04/24/csp201604-3/"/>
    <id>http://stbyu.github.io/blog/2020/04/24/csp201604-3/</id>
    <published>2020-04-23T16:00:00.000Z</published>
    <updated>2020-04-25T07:18:02.352Z</updated>
    
    <content type="html"><![CDATA[<h1>CCF CSP 201604-3 路径解析<a id="more"></a></h1><div class="row">    <embed src="路径解析.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h2><p>这一题不是很麻烦，接助string类型支持的各种方法可以比较容易的完成这个题目。首先我们要读入表示当前位置的字符串，然后去除掉重复的’/‘、多余的’/./‘以及末尾的’/‘。然后进行读入，若读入的字符串以’/‘开头，则读入的是绝对路径，直接进行处理，若不以’/‘开头，则是相对路径，则应在前面拼接上当前位置和’/‘再进行处理。处理过程为先去除掉重复的’/‘和多余的’/./‘，然后从头开始遍历，找到两个’/‘之间的位置若为’…‘则栈顶向下移一个，表示跳回到上一层，若不为’…‘，则压入栈中。处理完毕后从栈底到栈顶（使用数组模拟栈)依次输出即可。</p><h2 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,top;</span><br><span class="line"><span class="built_in">string</span> s,t,st[<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;s.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(s[i]==<span class="string">'/'</span> &amp;&amp; s[i+<span class="number">1</span>]==<span class="string">'/'</span>)</span><br><span class="line">&#123;</span><br><span class="line">s.erase(i,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(s.find(<span class="string">"/./"</span>)!=s.npos)</span><br><span class="line">&#123;</span><br><span class="line">s.erase(s.find(<span class="string">"/./"</span>)+<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s[s.size()<span class="number">-1</span>]==<span class="string">'/'</span>) s.erase(s.size()<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">&#123;</span><br><span class="line">top=<span class="number">0</span>;</span><br><span class="line">getline(<span class="built_in">cin</span>,t);</span><br><span class="line"><span class="keyword">if</span>(t[<span class="number">0</span>]!=<span class="string">'/'</span>) t=s+<span class="string">"/"</span>+t;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;t.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(t[i]==<span class="string">'/'</span> &amp;&amp; t[i+<span class="number">1</span>]==<span class="string">'/'</span>)</span><br><span class="line">&#123;</span><br><span class="line">t.erase(i,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(t.find(<span class="string">"/./"</span>)!=t.npos)</span><br><span class="line">&#123;</span><br><span class="line">t.erase(t.find(<span class="string">"/./"</span>)+<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t[t.size()<span class="number">-1</span>]!=<span class="string">'/'</span>) t[t.size()]=<span class="string">'/'</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;t.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">k=i;</span><br><span class="line"><span class="keyword">while</span>(t[i]!=<span class="string">'/'</span>) i++;</span><br><span class="line"><span class="keyword">if</span>(t.substr(k,i-k)==<span class="string">".."</span>)</span><br><span class="line">&#123;</span><br><span class="line">top--;</span><br><span class="line"><span class="keyword">if</span>(top&lt;<span class="number">0</span>) top=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">st[++top]=t.substr(k,i-k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=top;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"/"</span>&lt;&lt;st[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"/"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;CCF CSP 201604-3 路径解析&lt;/h1&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://stbyu.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/categories/%E7%AC%94%E8%AE%B0/csp/"/>
    
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
      <category term="笔记" scheme="http://stbyu.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="模拟" scheme="http://stbyu.github.io/blog/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>【作业向】程序设计思维与实践 Week9 作业</title>
    <link href="http://stbyu.github.io/blog/2020/04/23/week9hw/"/>
    <id>http://stbyu.github.io/blog/2020/04/23/week9hw/</id>
    <published>2020-04-22T16:00:00.000Z</published>
    <updated>2020-04-25T03:59:27.613Z</updated>
    
    <content type="html"><![CDATA[<h1>【作业向】程序设计思维与实践 Week9作业<a id="more"></a></h1><h2 id="A-咕咕东的目录管理器"><a class="header-anchor" href="#A-咕咕东的目录管理器">♔</a>A 咕咕东的目录管理器</h2><h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3><p>咕咕东的雪梨电脑的操作系统在上个月受到宇宙射线的影响，时不时发生故障，他受不了了，想要写一个高效易用零bug的操作系统 —— 这工程量太大了，所以他定了一个小目标，从实现一个目录管理器开始。前些日子，东东的电脑终于因为过度收到宇宙射线的影响而宕机，无法写代码。他的好友TT正忙着在B站看猫片，另一位好友瑞神正忙着打守望先锋。现在只有你能帮助东东！</p><p>初始时，咕咕东的硬盘是空的，命令行的当前目录为根目录 <code>root</code>。</p><p>目录管理器可以理解为要维护一棵有根树结构，每个目录的儿子必须保持字典序。</p><p><img src="/blog/2020/04/23/week9hw/GojFbt.png" alt="img"></p><p>现在咕咕东可以在命令行下执行以下表格中描述的命令：</p><table><thead><tr><th>命令</th><th>类型</th><th>实现</th><th>说明</th></tr></thead><tbody><tr><td>MKDIR <em>s</em></td><td>操作</td><td>在当前目录下创建一个子目录 <em>s</em>，<em>s</em> 是一个字符串</td><td>创建成功输出 “OK”；若当前目录下已有该子目录则输出 “ERR”</td></tr><tr><td>RM <em>s</em></td><td>操作</td><td>在当前目录下删除子目录 <em>s</em>，<em>s</em> 是一个字符串</td><td>删除成功输出 “OK”；若当前目录下该子目录不存在则输出 “ERR”</td></tr><tr><td>CD <em>s</em></td><td>操作</td><td>进入一个子目录 s，<em>s</em> 是一个字符串（执行后，当前目录可能会改变）</td><td>进入成功输出 “OK”；若当前目录下该子目录不存在则输出 “ERR” 特殊地，若 <em>s</em> 等于 “…” 则表示返回上级目录，同理，返回成功输出 “OK”，返回失败（当前目录已是根目录没有上级目录）则输出 “ERR”</td></tr><tr><td>SZ</td><td>询问</td><td>输出当前目录的大小</td><td>也即输出 1+当前目录的子目录数</td></tr><tr><td>LS</td><td>询问</td><td>输出多行表示当前目录的 “直接子目录” 名</td><td>若没有子目录，则输出 “EMPTY”；若子目录数属于 [1,10] 则全部输出；若子目录数大于 10，则输出前 5 个，再输出一行 “…”，输出后 5 个。</td></tr><tr><td>TREE</td><td>询问</td><td>输出多行表示以当前目录为根的子树的前序遍历结果</td><td>若没有后代目录，则输出 “EMPTY”；若后代目录数+1（当前目录）属于 [1,10] 则全部输出；若后代目录数+1（当前目录）大于 10，则输出前 5 个，再输出一行 “…”，输出后 5 个。若目录结构如上图，当前目录为 “root” 执行结果如下，<img src="/blog/2020/04/23/week9hw/GojYPU.png" alt="img"></td></tr><tr><td>UNDO</td><td>特殊</td><td>撤销操作</td><td>撤销最近一个 “成功执行” 的操作（即MKDIR或RM或CD）的影响，撤销成功输出 “OK” 失败或者没有操作用于撤销则输出 “ERR”</td></tr></tbody></table><h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3><p>输入文件包含多组测试数据，第一行输入一个整数表示测试数据的组数 T （T &lt;= 20）；</p><p>每组测试数据的第一行输入一个整数表示该组测试数据的命令总数 Q （Q &lt;= 1e5）；</p><p>每组测试数据的 2 ~ Q+1 行为具体的操作 （MKDIR、RM 操作总数不超过 5000）；</p><h3 id="面对数据范围你要思考的是他们代表的-“命令”-执行的最大可接受复杂度，只有这样你才能知道你需要设计的是怎样复杂度的系统。"><a class="header-anchor" href="#面对数据范围你要思考的是他们代表的-“命令”-执行的最大可接受复杂度，只有这样你才能知道你需要设计的是怎样复杂度的系统。">♔</a>面对数据范围你要思考的是他们代表的 “命令” 执行的最大可接受复杂度，只有这样你才能知道你需要设计的是怎样复杂度的系统。</h3><h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3><p>每组测试数据的输出结果间需要输出一行空行。注意大小写敏感。</p><h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3><h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">22</span><br><span class="line">MKDIR dira</span><br><span class="line">CD dirb</span><br><span class="line">CD dira</span><br><span class="line">MKDIR a</span><br><span class="line">MKDIR b</span><br><span class="line">MKDIR c</span><br><span class="line">CD ..</span><br><span class="line">MKDIR dirb</span><br><span class="line">CD dirb</span><br><span class="line">MKDIR x</span><br><span class="line">CD ..</span><br><span class="line">MKDIR dirc</span><br><span class="line">CD dirc</span><br><span class="line">MKDIR y</span><br><span class="line">CD ..</span><br><span class="line">SZ</span><br><span class="line">LS</span><br><span class="line">TREE</span><br><span class="line">RM dira</span><br><span class="line">TREE</span><br><span class="line">UNDO</span><br><span class="line">TREE</span><br></pre></td></tr></table></figure><h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">OK</span><br><span class="line">ERR</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">9</span><br><span class="line">dira</span><br><span class="line">dirb</span><br><span class="line">dirc</span><br><span class="line">root</span><br><span class="line">dira</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">dirb</span><br><span class="line">x</span><br><span class="line">dirc</span><br><span class="line">y</span><br><span class="line">OK</span><br><span class="line">root</span><br><span class="line">dirb</span><br><span class="line">x</span><br><span class="line">dirc</span><br><span class="line">y</span><br><span class="line">OK</span><br><span class="line">root</span><br><span class="line">dira</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">dirb</span><br><span class="line">x</span><br><span class="line">dirc</span><br><span class="line">y</span><br></pre></td></tr></table></figure><h3 id="英文原版题面："><a class="header-anchor" href="#英文原版题面：">♔</a>英文原版题面：</h3><p><img src="/blog/2020/04/23/week9hw/JSPJG6.png" alt="img"></p><h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3><p>这一题还是比较考验码力的，采用一个结构体来表示文件夹的节点，结构体的内容有本文件夹的名字，大小，上一级文件夹的编号以及用map表示的子文件夹的名字与编号的映射。对于创建和删除操作，直接进行即可，同时可以更新本文件夹以及各上层文件夹的大小并在栈中记录本操作。对于UNDO操作，首先查询栈中操作的个数，若无操作则UNDO失败，若有操作则进行栈顶操作的逆操作。对于LS操作，要注意的是输出后五个时用反向迭代器先移动到倒数第五个的位置，然后再向尾部遍历。对于TREE操作，采用懒更新的策略，若当前节点进行TREE操作后其本身及子节点的结构未曾发生变化，则直接输出已经存储过的，否则进行更新。更新时对于后五个节点，采用递归的方式更新，对于每一个遍历到的节点，从后往前遍历其子节点，若子节点的大小大于剩余需要的点数则遍历该节点，否则遍历该节点后将剩余的节点数减去该节点的大小。</p><h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> na;</span><br><span class="line"><span class="keyword">int</span> siz,flg,fa;</span><br><span class="line"><span class="built_in">string</span> pre[<span class="number">11</span>],bac[<span class="number">11</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; nxt;</span><br><span class="line">&#125;mir[<span class="number">100005</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> na;</span><br><span class="line"><span class="keyword">int</span> type,zi,snow;</span><br><span class="line">&#125;stck[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> T,n,now,top,ztop,t;</span><br><span class="line"><span class="built_in">string</span> zl,cs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preback</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> no)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t&gt;<span class="number">10</span>) <span class="keyword">return</span>;</span><br><span class="line">mir[x].pre[t++]=mir[no].na;</span><br><span class="line"><span class="comment">//cout&lt;&lt;"++++++"&lt;&lt;mir[no].na&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(mir[no].nxt.<span class="built_in">size</span>()&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line"><span class="keyword">for</span>(iter=mir[no].nxt.<span class="built_in">begin</span>();iter!=mir[no].nxt.<span class="built_in">end</span>();iter++)</span><br><span class="line">&#123;</span><br><span class="line">preback(x,iter-&gt;second);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bacback</span><span class="params">(<span class="keyword">int</span> ti,<span class="keyword">int</span> x,<span class="keyword">int</span> no)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*int sz=mir[no].nxt.size();</span></span><br><span class="line"><span class="comment">map&lt;string,int&gt; ::iterator iter=mir[no].nxt.end();</span></span><br><span class="line"><span class="comment">while(sz--)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">iter--;</span></span><br><span class="line"><span class="comment">int szz=mir[iter-&gt;second].siz;</span></span><br><span class="line"><span class="comment">if(szz&gt;=t)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">bacback(ti,x,iter-&gt;second);</span></span><br><span class="line"><span class="comment">return;</span></span><br><span class="line"><span class="comment">&#125; </span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">bacback(szz,x,iter-&gt;second);</span></span><br><span class="line"><span class="comment">ti-=szz;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">int</span> ni=ti;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::reverse_iterator rter;</span><br><span class="line"><span class="keyword">for</span>(rter=mir[no].nxt.rbegin();rter!=mir[no].nxt.rend();rter++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mir[rter-&gt;second].siz&gt;=ni)</span><br><span class="line">&#123;</span><br><span class="line">bacback(ni,x,rter-&gt;second);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">bacback(mir[rter-&gt;second].siz,x,rter-&gt;second);</span><br><span class="line">ni-=mir[rter-&gt;second].siz;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">mir[x].bac[t++]=mir[no].na;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maketree</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t=<span class="number">1</span>;</span><br><span class="line">mir[x].flg=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//bacback(x,x);</span></span><br><span class="line">preback(x,x);</span><br><span class="line"><span class="keyword">if</span>(mir[x].siz&gt;<span class="number">10</span>) </span><br><span class="line">&#123;</span><br><span class="line">t=<span class="number">1</span>;</span><br><span class="line">bacback(<span class="number">5</span>,x,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mir[x].siz;i++) </span><br><span class="line">mir[x].bac[i]=mir[x].pre[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeupdate</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;"----"&lt;&lt;num&lt;&lt;endl;</span></span><br><span class="line">mir[x].siz+=num;</span><br><span class="line">mir[x].flg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(mir[x].fa) makeupdate(mir[x].fa,num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen("1.txt","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("a1.txt","w",stdout);</span></span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">99999</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">mir[i].nxt.<span class="built_in">clear</span>();</span><br><span class="line">mir[i].flg=<span class="number">0</span>;</span><br><span class="line">mir[i].siz=<span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line">top=<span class="number">2</span>;now=<span class="number">1</span>;ztop=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//memset(mir,0,sizeof(mir));</span></span><br><span class="line"><span class="comment">//memset(stck,0,sizeof(stck));</span></span><br><span class="line">mir[now].na=<span class="string">"root"</span>;</span><br><span class="line">mir[now].flg=<span class="number">1</span>;</span><br><span class="line">mir[now].siz=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;"--"&lt;&lt;mir[now].na&lt;&lt;"--"&lt;&lt;endl;</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;zl;</span><br><span class="line"><span class="keyword">if</span>(zl==<span class="string">"MKDIR"</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;cs;</span><br><span class="line"><span class="keyword">if</span>(mir[now].nxt.<span class="built_in">find</span>(cs)!=mir[now].nxt.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ERR\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mir[now].nxt[cs]=top;</span><br><span class="line">mir[top].na=cs;</span><br><span class="line">mir[top].fa=now;</span><br><span class="line">mir[top].siz=<span class="number">0</span>;</span><br><span class="line">mir[top].flg=<span class="number">0</span>;</span><br><span class="line">makeupdate(top,<span class="number">1</span>);</span><br><span class="line">top++;</span><br><span class="line">stck[++ztop].na=cs;</span><br><span class="line">stck[ztop].type=<span class="number">1</span>;</span><br><span class="line">stck[ztop].snow=now;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(zl==<span class="string">"RM"</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;cs;</span><br><span class="line"><span class="keyword">if</span>(mir[now].nxt.<span class="built_in">find</span>(cs)!=mir[now].nxt.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">stck[++ztop].na=cs;</span><br><span class="line">stck[ztop].type=<span class="number">2</span>;</span><br><span class="line">stck[ztop].zi=mir[now].nxt[cs];</span><br><span class="line">stck[ztop].snow=now;</span><br><span class="line">makeupdate(now,<span class="number">0</span>-(mir[mir[now].nxt[cs]].siz));</span><br><span class="line">mir[mir[now].nxt[cs]].flg=<span class="number">0</span>;</span><br><span class="line">mir[now].nxt.erase(cs);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ERR\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(zl==<span class="string">"CD"</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;cs;</span><br><span class="line"><span class="keyword">if</span>(cs==<span class="string">".."</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mir[now].fa)</span><br><span class="line">&#123;</span><br><span class="line">stck[++ztop].na=mir[now].na;</span><br><span class="line">stck[ztop].type=<span class="number">3</span>;</span><br><span class="line">stck[ztop].zi=<span class="number">0</span>;</span><br><span class="line">stck[ztop].snow=mir[now].fa;</span><br><span class="line">now=mir[now].fa;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ERR\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mir[now].nxt.<span class="built_in">find</span>(cs)!=mir[now].nxt.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">now=mir[now].nxt[cs];</span><br><span class="line">stck[++ztop].type=<span class="number">3</span>;</span><br><span class="line">stck[ztop].zi=<span class="number">1</span>;</span><br><span class="line">stck[ztop].snow=now;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ERR\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(zl==<span class="string">"SZ"</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,mir[now].siz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(zl==<span class="string">"LS"</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mir[now].nxt.<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"EMPTY\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mir[now].nxt.<span class="built_in">size</span>()&lt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line"><span class="keyword">for</span>(iter=mir[now].nxt.<span class="built_in">begin</span>();iter!=mir[now].nxt.<span class="built_in">end</span>();iter++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;iter-&gt;first&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line"><span class="keyword">for</span>(iter=mir[now].nxt.<span class="built_in">begin</span>(),j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++,iter++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;iter-&gt;first&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"..."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::reverse_iterator rter;</span><br><span class="line"><span class="keyword">for</span>(rter=mir[now].nxt.rbegin(),j=<span class="number">1</span>;j&lt;<span class="number">5</span>;j++,rter++);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++,rter--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;rter-&gt;first&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(zl==<span class="string">"TREE"</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!mir[now].flg) maketree(now);</span><br><span class="line"><span class="keyword">if</span>(mir[now].nxt.<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"EMPTY\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mir[now].siz&lt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=mir[now].siz;j++) <span class="built_in">cout</span>&lt;&lt;mir[now].pre[j]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++) <span class="built_in">cout</span>&lt;&lt;mir[now].pre[j]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"..."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">5</span>;j&gt;=<span class="number">1</span>;j--) <span class="built_in">cout</span>&lt;&lt;mir[now].bac[j]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(zl==<span class="string">"UNDO"</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ztop==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ERR\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(stck[ztop].type==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">makeupdate(stck[ztop].snow,<span class="number">0</span>-mir[mir[stck[ztop].snow].nxt[stck[ztop].na]].siz);</span><br><span class="line">mir[stck[ztop].snow].nxt.erase(stck[ztop].na);</span><br><span class="line">ztop--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(stck[ztop].type==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">mir[stck[ztop].snow].nxt[stck[ztop].na]=stck[ztop].zi;</span><br><span class="line">makeupdate(stck[ztop].snow,mir[stck[ztop].zi].siz);</span><br><span class="line">ztop--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(stck[ztop].type==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(stck[ztop].zi==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">now=mir[stck[ztop].snow].nxt[stck[ztop].na];</span><br><span class="line">ztop--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(stck[ztop].zi==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">now=mir[stck[ztop].snow].fa;</span><br><span class="line">ztop--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(T) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-东东学打牌"><a class="header-anchor" href="#B-东东学打牌">♔</a>B 东东学打牌</h2><h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3><p>最近，东东沉迷于打牌。所以他找到 HRZ、ZJM 等人和他一起打牌。由于人数众多，东东稍微修改了亿下游戏规则：</p><ul><li>所有扑克牌只按数字来算大小，忽略花色。</li><li>每张扑克牌的大小由一个值表示。A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K 分别指代 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13。</li><li>每个玩家抽得 5 张扑克牌，组成一手牌！（每种扑克牌的张数是无限的，你不用担心，东东家里有无数副扑克牌）</li></ul><p>理所当然地，一手牌是有不同类型，并且有大小之分的。</p><p>举个栗子，现在东东的 “一手牌”（记为 α），瑞神的 “一手牌”（记为 β），要么 α &gt; β，要么 α &lt; β，要么 α = β。</p><p>那么这两个 “一手牌”，如何进行比较大小呢？首先对于不同类型的一手牌，其值的大小即下面的标号；对于同类型的一手牌，根据组成这手牌的 5 张牌不同，其值不同。下面依次列举了这手牌的形成规则：</p><ol><li>大牌：这手牌不符合下面任一个形成规则。如果 α 和 β 都是大牌，那么定义它们的大小为组成这手牌的 5 张牌的大小总和。</li><li>对子：5 张牌中有 2 张牌的值相等。如果 α 和 β 都是对子，比较这个 “对子” 的大小，如果 α 和 β 的 “对子” 大小相等，那么比较剩下 3 张牌的总和。</li><li>两对：5 张牌中有两个不同的对子。如果 α 和 β 都是两对，先比较双方较大的那个对子，如果相等，再比较双方较小的那个对子，如果还相等，只能比较 5 张牌中的最后那张牌组不成对子的牌。</li><li>三个：5 张牌中有 3 张牌的值相等。如果 α 和 β 都是 “三个”，比较这个 “三个” 的大小，如果 α 和 β 的 “三个” 大小相等，那么比较剩下 2 张牌的总和。</li><li>三带二：5 张牌中有 3 张牌的值相等，另外 2 张牌值也相等。如果 α 和 β 都是 “三带二”，先比较它们的 “三个” 的大小，如果相等，再比较 “对子” 的大小。</li><li>炸弹：5 张牌中有 4 张牌的值相等。如果 α 和 β 都是 “炸弹”，比较 “炸弹” 的大小，如果相等，比较剩下那张牌的大小。</li><li>顺子：5 张牌中形成 x, x+1, x+2, x+3, x+4。如果 α 和 β 都是 “顺子”，直接比较两个顺子的最大值。</li><li>龙顺：5 张牌分别为 10、J、Q、K、A。</li></ol><p>作为一个称职的魔法师，东东得知了全场人手里 5 张牌的情况。他现在要输出一个排行榜。排行榜按照选手们的 “一手牌” 大小进行排序，如果两个选手的牌相等，那么人名字典序小的排在前面。</p><p>不料，此时一束宇宙射线扫过，为了躲避宇宙射线，东东慌乱中清空了他脑中的 Cache。请你告诉东东，全场人的排名。</p><h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3><p>输入包含多组数据。每组输入开头一个整数 n (1 &lt;= n &lt;= 1e5)，表明全场共多少人。<br>随后是 n 行，每行一个字符串 s1 和 s2 （1 &lt;= |s1|,|s2| &lt;= 10）， s1 是对应人的名字，s2 是他手里的牌情况。</p><h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3><p>对于每组测试数据，输出 n 行，即这次全场人的排名。</p><h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3><h4 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">DongDong AAA109</span><br><span class="line">ZJM 678910</span><br><span class="line">Hrz 678910</span><br></pre></td></tr></table></figure><h4 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hrz</span><br><span class="line">ZJM</span><br><span class="line">DongDong</span><br></pre></td></tr></table></figure><h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3><p>这一题和上一次的打牌那个题比较像，对于每一个玩家，判断其手牌的类型，并提取关键字及关键字个数，和玩家名一起存储到结构体中。并用自定义了比较函数的sort函数对该结构体进行排序，然后按顺序输出玩家名称即可。</p><h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> typ,flgs,flg[<span class="number">4</span>];</span><br><span class="line"><span class="built_in">string</span> na;</span><br><span class="line">&#125;pl[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gettyp</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pi[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len=c.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i]==<span class="string">'1'</span>) </span><br><span class="line">&#123;</span><br><span class="line">pi[cnt++]=<span class="number">10</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[i]&gt;=<span class="string">'2'</span> &amp;&amp; c[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">pi[cnt++]=c[i]-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[i]==<span class="string">'A'</span>)</span><br><span class="line">pi[cnt++]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[i]==<span class="string">'J'</span>)</span><br><span class="line">pi[cnt++]=<span class="number">11</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[i]==<span class="string">'Q'</span>)</span><br><span class="line">pi[cnt++]=<span class="number">12</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[i]==<span class="string">'K'</span>)</span><br><span class="line">pi[cnt++]=<span class="number">13</span>;</span><br><span class="line">&#125;</span><br><span class="line">sort(pi,pi+<span class="number">5</span>);</span><br><span class="line"><span class="comment">/*if(pi[0]==pi[1] &amp;&amp; pi[1]==pi[2] &amp;&amp; pi[2]==pi[3] &amp;&amp; pi[3]==pi[4])</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">pl[x].typ=1;</span></span><br><span class="line"><span class="comment">pl[x].flg[1]=pi[0]+pi[1]+pi[2]+pi[3]+pi[4];</span></span><br><span class="line"><span class="comment">pl[x].flgs=1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else*/</span> <span class="keyword">if</span>(pi[<span class="number">0</span>]==<span class="number">1</span> &amp;&amp; pi[<span class="number">1</span>]==<span class="number">10</span> &amp;&amp; pi[<span class="number">2</span>]==<span class="number">11</span> &amp;&amp; pi[<span class="number">3</span>]==<span class="number">12</span> &amp;&amp; pi[<span class="number">4</span>]==<span class="number">13</span>)<span class="comment">//longshun </span></span><br><span class="line">&#123;</span><br><span class="line">pl[x].typ=<span class="number">8</span>;</span><br><span class="line">pl[x].flgs=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">0</span>]+<span class="number">1</span>==pi[<span class="number">1</span>] &amp;&amp; pi[<span class="number">1</span>]+<span class="number">1</span>==pi[<span class="number">2</span>] &amp;&amp; pi[<span class="number">2</span>]+<span class="number">1</span>==pi[<span class="number">3</span>] &amp;&amp; pi[<span class="number">3</span>]+<span class="number">1</span>==pi[<span class="number">4</span>])<span class="comment">//shunzi</span></span><br><span class="line">&#123;</span><br><span class="line">pl[x].typ=<span class="number">7</span>;</span><br><span class="line">pl[x].flg[<span class="number">1</span>]=pi[<span class="number">4</span>];</span><br><span class="line">pl[x].flgs=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">0</span>]==pi[<span class="number">1</span>] &amp;&amp; pi[<span class="number">1</span>]==pi[<span class="number">2</span>] &amp;&amp; pi[<span class="number">2</span>]==pi[<span class="number">3</span>])<span class="comment">//0123 4</span></span><br><span class="line">&#123;</span><br><span class="line">pl[x].typ=<span class="number">6</span>;</span><br><span class="line">pl[x].flg[<span class="number">1</span>]=pi[<span class="number">0</span>];</span><br><span class="line">pl[x].flg[<span class="number">2</span>]=pi[<span class="number">4</span>];</span><br><span class="line">pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">1</span>]==pi[<span class="number">2</span>] &amp;&amp; pi[<span class="number">2</span>]==pi[<span class="number">3</span>] &amp;&amp; pi[<span class="number">3</span>]==pi[<span class="number">4</span>])<span class="comment">//0 1234</span></span><br><span class="line">&#123;</span><br><span class="line">pl[x].typ=<span class="number">6</span>;</span><br><span class="line">pl[x].flg[<span class="number">1</span>]=pi[<span class="number">4</span>];</span><br><span class="line">pl[x].flg[<span class="number">2</span>]=pi[<span class="number">0</span>];</span><br><span class="line">pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">0</span>]==pi[<span class="number">1</span>] &amp;&amp; pi[<span class="number">1</span>]==pi[<span class="number">2</span>])<span class="comment">//012 3 4</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(pi[<span class="number">3</span>]==pi[<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">pl[x].typ=<span class="number">5</span>;</span><br><span class="line">pl[x].flg[<span class="number">1</span>]=pi[<span class="number">0</span>];</span><br><span class="line">pl[x].flg[<span class="number">2</span>]=pi[<span class="number">3</span>];</span><br><span class="line">pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pl[x].typ=<span class="number">4</span>;</span><br><span class="line">pl[x].flg[<span class="number">1</span>]=pi[<span class="number">0</span>];</span><br><span class="line">pl[x].flg[<span class="number">2</span>]=pi[<span class="number">3</span>]+pi[<span class="number">4</span>];</span><br><span class="line">pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">2</span>]==pi[<span class="number">3</span>] &amp;&amp; pi[<span class="number">3</span>]==pi[<span class="number">4</span>])<span class="comment">//0 1 234</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(pi[<span class="number">0</span>]==pi[<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">pl[x].typ=<span class="number">5</span>;</span><br><span class="line">pl[x].flg[<span class="number">1</span>]=pi[<span class="number">4</span>];</span><br><span class="line">pl[x].flg[<span class="number">2</span>]=pi[<span class="number">0</span>];</span><br><span class="line">pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pl[x].typ=<span class="number">4</span>;</span><br><span class="line">pl[x].flg[<span class="number">1</span>]=pi[<span class="number">4</span>];</span><br><span class="line">pl[x].flg[<span class="number">2</span>]=pi[<span class="number">0</span>]+pi[<span class="number">1</span>];</span><br><span class="line">pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">1</span>]==pi[<span class="number">2</span>] &amp;&amp; pi[<span class="number">2</span>]==pi[<span class="number">3</span>])<span class="comment">//0 123 4</span></span><br><span class="line">&#123;</span><br><span class="line">pl[x].typ=<span class="number">4</span>;</span><br><span class="line">pl[x].flg[<span class="number">1</span>]=pi[<span class="number">1</span>];</span><br><span class="line">pl[x].flg[<span class="number">2</span>]=pi[<span class="number">0</span>]+pi[<span class="number">4</span>];</span><br><span class="line">pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">0</span>]==pi[<span class="number">1</span>] &amp;&amp; pi[<span class="number">2</span>]==pi[<span class="number">3</span>])<span class="comment">//01 23 4</span></span><br><span class="line">&#123;</span><br><span class="line">pl[x].typ=<span class="number">3</span>;</span><br><span class="line">pl[x].flg[<span class="number">1</span>]=pi[<span class="number">3</span>];</span><br><span class="line">pl[x].flg[<span class="number">2</span>]=pi[<span class="number">1</span>];</span><br><span class="line">pl[x].flg[<span class="number">3</span>]=pi[<span class="number">4</span>];</span><br><span class="line">pl[x].flgs=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">0</span>]==pi[<span class="number">1</span>] &amp;&amp; pi[<span class="number">3</span>]==pi[<span class="number">4</span>])<span class="comment">//01 2 34</span></span><br><span class="line">&#123;</span><br><span class="line">pl[x].typ=<span class="number">3</span>;</span><br><span class="line">pl[x].flg[<span class="number">1</span>]=pi[<span class="number">4</span>];</span><br><span class="line">pl[x].flg[<span class="number">2</span>]=pi[<span class="number">1</span>];</span><br><span class="line">pl[x].flg[<span class="number">3</span>]=pi[<span class="number">2</span>];</span><br><span class="line">pl[x].flgs=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">1</span>]==pi[<span class="number">2</span>] &amp;&amp; pi[<span class="number">3</span>]==pi[<span class="number">4</span>])<span class="comment">//0 12 34</span></span><br><span class="line">&#123;</span><br><span class="line">pl[x].typ=<span class="number">3</span>;</span><br><span class="line">pl[x].flg[<span class="number">1</span>]=pi[<span class="number">4</span>];</span><br><span class="line">pl[x].flg[<span class="number">2</span>]=pi[<span class="number">1</span>];</span><br><span class="line">pl[x].flg[<span class="number">3</span>]=pi[<span class="number">0</span>];</span><br><span class="line">pl[x].flgs=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">0</span>]==pi[<span class="number">1</span>])<span class="comment">//01 2 3 4</span></span><br><span class="line">&#123;</span><br><span class="line">pl[x].typ=<span class="number">2</span>;</span><br><span class="line">pl[x].flg[<span class="number">1</span>]=pi[<span class="number">0</span>];</span><br><span class="line">pl[x].flg[<span class="number">2</span>]=pi[<span class="number">2</span>]+pi[<span class="number">3</span>]+pi[<span class="number">4</span>];</span><br><span class="line">pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">1</span>]==pi[<span class="number">2</span>])<span class="comment">//0 12 3 4</span></span><br><span class="line">&#123;</span><br><span class="line">pl[x].typ=<span class="number">2</span>;</span><br><span class="line">pl[x].flg[<span class="number">1</span>]=pi[<span class="number">1</span>];</span><br><span class="line">pl[x].flg[<span class="number">2</span>]=pi[<span class="number">0</span>]+pi[<span class="number">3</span>]+pi[<span class="number">4</span>];</span><br><span class="line">pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">2</span>]==pi[<span class="number">3</span>])<span class="comment">//0 1 23 4</span></span><br><span class="line">&#123;</span><br><span class="line">pl[x].typ=<span class="number">2</span>;</span><br><span class="line">pl[x].flg[<span class="number">1</span>]=pi[<span class="number">2</span>];</span><br><span class="line">pl[x].flg[<span class="number">2</span>]=pi[<span class="number">0</span>]+pi[<span class="number">1</span>]+pi[<span class="number">4</span>];</span><br><span class="line">pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">3</span>]==pi[<span class="number">4</span>])<span class="comment">//0 1 2 34</span></span><br><span class="line">&#123;</span><br><span class="line">pl[x].typ=<span class="number">2</span>;</span><br><span class="line">pl[x].flg[<span class="number">1</span>]=pi[<span class="number">3</span>];</span><br><span class="line">pl[x].flg[<span class="number">2</span>]=pi[<span class="number">0</span>]+pi[<span class="number">1</span>]+pi[<span class="number">2</span>];</span><br><span class="line">pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pl[x].typ=<span class="number">1</span>;</span><br><span class="line">pl[x].flg[<span class="number">1</span>]=pi[<span class="number">0</span>]+pi[<span class="number">1</span>]+pi[<span class="number">2</span>]+pi[<span class="number">3</span>]+pi[<span class="number">4</span>];</span><br><span class="line">pl[x].flgs=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wly</span><span class="params">(data x,data y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x.typ!=y.typ) <span class="keyword">return</span> x.typ&gt;y.typ;</span><br><span class="line"><span class="keyword">if</span>(x.typ==y.typ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x.flgs;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x.flg[i]!=y.flg[i]) <span class="keyword">return</span> x.flg[i]&gt;y.flg[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x.na&lt;y.na;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;pl[i].na&gt;&gt;c;</span><br><span class="line">gettyp(i);</span><br><span class="line">&#125;</span><br><span class="line">sort(pl+<span class="number">1</span>,pl+<span class="number">1</span>+n,wly);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf("-%d %d %d %d %d-\n",pl[i].typ,pl[i].flg[1],pl[i].flg[2],pl[i].flg[3],pl[i].flgs);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,pl[i].na.c_str());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-签到题"><a class="header-anchor" href="#C-签到题">♔</a>C 签到题</h2><h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3><p>公园有 x 条长凳。第 i 个长凳上坐着 a_i 个人。这时候又有 y 个人将来到公园，他们将选择坐在某些公园中的长凳上，那么当这 y 个人坐下后，记k = 所有椅子上的人数的最大值，那么k可能的最大值mx和最小值mn分别是多少。</p><h3 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h3><p>第一行包含一个整数 x (1 &lt;= x &lt;= 100) 表示公园中长椅的数目<br>第二行包含一个整数 y (1 &lt;= y &lt;= 1000) 表示有 y 个人来到公园<br>接下来 x 个整数 a_i (1&lt;=a_i&lt;=100)，表示初始时公园长椅上坐着的人数</p><h3 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h3><p>输出 mn 和 mx</p><h3 id="Examples-v2"><a class="header-anchor" href="#Examples-v2">♔</a>Examples</h3><h4 id="Input-v6"><a class="header-anchor" href="#Input-v6">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">7</span><br><span class="line">1</span><br><span class="line">6</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="Output-v6"><a class="header-anchor" href="#Output-v6">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 13</span><br></pre></td></tr></table></figure><h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3><p>这一题比较简单，对于最大值最大，直接输出最大值加新来的人数即可；对于最大值最小先求出各个椅子上最大的人数，然后求出各椅子上人数与最大人数的差的和，若和大于等于新来的人数，则直接输出最大值，否则输出（最大值-新来的人数）/ 椅子数的上取整结果。</p><h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,maxn,ksum;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">maxn=<span class="built_in">max</span>(maxn,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) ksum+=(maxn-a[i]);</span><br><span class="line"><span class="keyword">if</span>(ksum&gt;=m) <span class="built_in">printf</span>(<span class="string">"%d"</span>,maxn);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,maxn+(m-ksum+n<span class="number">-1</span>)/n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d"</span>,maxn+m);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;【作业向】程序设计思维与实践 Week9作业&lt;/h1&gt;
    
    </summary>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>【作业向】程序设计思维与实践 Week8 作业</title>
    <link href="http://stbyu.github.io/blog/2020/04/18/week8hw/"/>
    <id>http://stbyu.github.io/blog/2020/04/18/week8hw/</id>
    <published>2020-04-17T16:00:00.000Z</published>
    <updated>2020-04-24T03:06:39.434Z</updated>
    
    <content type="html"><![CDATA[<h1>【作业向】程序设计思维与实践 Week8作业<a id="more"></a></h1><h2 id="A-区间选点-II"><a class="header-anchor" href="#A-区间选点-II">♔</a>A 区间选点 II</h2><h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3><p>给定一个数轴上的 n 个区间，要求在数轴上选取最少的点使得第 i 个区间 [ai, bi] 里至少有 ci 个点</p><p><strong>使用差分约束系统的解法解决这道题</strong></p><h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3><p>输入第一行一个整数 n 表示区间的个数，接下来的 n 行，每一行两个用空格隔开的整数 a，b 表示区间的左右端点。1 &lt;= n &lt;= 50000， 0 &lt;= ai &lt;= bi &lt;= 50000 并且 1 &lt;= ci &lt;= bi - ai+1。</p><h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3><p>输出一个整数表示最少选取的点的个数</p><h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3><h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">3 7 3</span><br><span class="line">8 10 3</span><br><span class="line">6 8 1</span><br><span class="line">1 3 1</span><br><span class="line">10 11 1</span><br></pre></td></tr></table></figure><h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3><p>这一题用差分约束的方法来做的话就需要构造不等式组，其中</p><ul><li>记sum[i]表示数轴上[0,i]之间选点的个数</li><li>对于第i个区间[ai, bi]需要满足sum[bi] - sum[ai - 1] ≥ ci</li><li>同时还要保证0 ≤ sum[i] - sum[i- 1] ≤ 1</li></ul><p>（除此之外，由于点的编号从0开始，ai-1会小于0导致数组越界，故将各点整体加1</p><h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> adj[<span class="number">50005</span>],nxt[<span class="number">150005</span>],too[<span class="number">150005</span>],w[<span class="number">150005</span>],ecnt;</span><br><span class="line"><span class="keyword">int</span> n,s,t,dis[<span class="number">50005</span>],visit[<span class="number">50005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(s);</span><br><span class="line">visit[s]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">u=q.front();</span><br><span class="line">q.pop();</span><br><span class="line">visit[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=adj[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line">v=too[i];</span><br><span class="line"><span class="keyword">if</span>(dis[v]&lt;dis[u]+w[i])</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+w[i];</span><br><span class="line"><span class="keyword">if</span>(!visit[v])</span><br><span class="line">&#123;</span><br><span class="line">visit[v]=<span class="number">1</span>;</span><br><span class="line">q.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">s=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">nxt[++ecnt]=adj[a],adj[a]=ecnt,too[ecnt]=b+<span class="number">1</span>,w[ecnt]=c;</span><br><span class="line">s=<span class="built_in">min</span>(s,a);</span><br><span class="line">t=<span class="built_in">max</span>(t,b+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=s;i&lt;=t;i++)</span><br><span class="line">&#123;</span><br><span class="line">nxt[++ecnt]=adj[i],adj[i]=ecnt,too[ecnt]=i+<span class="number">1</span>,w[ecnt]=<span class="number">0</span>;</span><br><span class="line">nxt[++ecnt]=adj[i+<span class="number">1</span>],adj[i+<span class="number">1</span>]=ecnt,too[ecnt]=i,w[ecnt]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">spfa();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,dis[t]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-猫猫向前冲"><a class="header-anchor" href="#B-猫猫向前冲">♔</a>B 猫猫向前冲</h2><h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3><p>众所周知， TT 是一位重度爱猫人士，他有一只神奇的魔法猫。<br>有一天，TT 在 B 站上观看猫猫的比赛。一共有 N 只猫猫，编号依次为1，2，3，…，N进行比赛。比赛结束后，Up 主会为所有的猫猫从前到后依次排名并发放爱吃的小鱼干。不幸的是，此时 TT 的电子设备遭到了宇宙射线的降智打击，一下子都连不上网了，自然也看不到最后的颁奖典礼。<br>不幸中的万幸，TT 的魔法猫将每场比赛的结果都记录了下来，现在他想编程序确定字典序最小的名次序列，请你帮帮他。</p><h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3><p>输入有若干组，每组中的第一行为二个数N（1&lt;=N&lt;=500），M；其中N表示猫猫的个数，M表示接着有M行的输入数据。接下来的M行数据中，每行也有两个整数P1，P2表示即编号为 P1 的猫猫赢了编号为 P2 的猫猫。</p><h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3><p>给出一个符合要求的排名。输出时猫猫的编号之间有空格，最后一名后面没有空格!</p><p>其他说明：符合条件的排名可能不是唯一的，此时要求输出时编号小的队伍在前；输入数据保证是正确的，即输入数据确保一定能有一个符合要求的排名。</p><h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3><h4 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4 3</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">4 3</span><br></pre></td></tr></table></figure><h4 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 4 3</span><br></pre></td></tr></table></figure><h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3><p>对于每一组a胜过b，构建一条从a指向b的有向边，然后进行拓扑排序。特别的，对于输出时要求编号小的队伍在前，因此存储入度为0的节点的编号的队列使用按升序排序的优先队列。</p><h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,t;</span><br><span class="line"><span class="keyword">int</span> tu[<span class="number">505</span>][<span class="number">505</span>],d[<span class="number">505</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line">priority_queue&lt; <span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(tu,<span class="number">0</span>,<span class="keyword">sizeof</span>(tu));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;j,&amp;k);</span><br><span class="line"><span class="keyword">if</span>(tu[j][k]) <span class="keyword">continue</span>;</span><br><span class="line">tu[j][k]=<span class="number">1</span>;</span><br><span class="line">d[k]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">if</span>(d[i]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">q.push(i);</span><br><span class="line">&#125;</span><br><span class="line">t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">k=q.top();</span><br><span class="line"><span class="keyword">if</span>(t!=n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,k);</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,k);</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tu[k][i])</span><br><span class="line">&#123;</span><br><span class="line">d[i]--;</span><br><span class="line"><span class="keyword">if</span>(d[i]==<span class="number">0</span>) q.push(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-班长竞选"><a class="header-anchor" href="#C-班长竞选">♔</a>C 班长竞选</h2><h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3><p>大学班级选班长，N 个同学均可以发表意见 若意见为 A B 则表示 A 认为 B 合适，意见具有传递性，即 A 认为 B 合适，B 认为 C 合适，则 A 也认为 C 合适 勤劳的 TT 收集了M条意见，想要知道最高票数，并给出一份候选人名单，即所有得票最多的同学，你能帮帮他吗？</p><h3 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h3><p>本题有多组数据。第一行 T 表示数据组数。每组数据开始有两个整数 N 和 M (2 &lt;= n &lt;= 5000, 0 &lt;m &lt;= 30000)，接下来有 M 行包含两个整数 A 和 B(A != B) 表示 A 认为 B 合适。</p><h3 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h3><p>对于每组数据，第一行输出 “Case x: ”，x 表示数据的编号，从1开始，紧跟着是最高的票数。 接下来一行输出得票最多的同学的编号，用空格隔开，不忽略行末空格！</p><h3 id="Examples-v2"><a class="header-anchor" href="#Examples-v2">♔</a>Examples</h3><h4 id="Input-v6"><a class="header-anchor" href="#Input-v6">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4 3</span><br><span class="line">3 2</span><br><span class="line">2 0</span><br><span class="line">2 1</span><br><span class="line"></span><br><span class="line">3 3</span><br><span class="line">1 0</span><br><span class="line">2 1</span><br><span class="line">0 2</span><br></pre></td></tr></table></figure><h4 id="Output-v6"><a class="header-anchor" href="#Output-v6">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Case 1: 2</span><br><span class="line">0 1</span><br><span class="line">Case 2: 2</span><br><span class="line">0 1 2</span><br></pre></td></tr></table></figure><h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3><p>这一题首先要对建好的图求强连通分量，然后将各强连通分量缩成一个点并对缩号的点进行反向建图，从各入度为零的点开始跑dfs，记录他们所能到达的所有强连通分量的点数总和ppsum[i]，然后对各ppsum[i]求max，求得的max-1即为答案（因为要去掉自身），然后对各点进行判断，若该的所在的强连通分量的ppsum为取得的最大值，则将该点输出。</p><p>（又及：在跑dfs时因为建返图时会有重边，因此要注意对重边的处理</p><h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> adj[<span class="number">5005</span>],adj1[<span class="number">5005</span>],nxt[<span class="number">600005</span>],too[<span class="number">600005</span>],ecnt;</span><br><span class="line"><span class="keyword">int</span> dfn[<span class="number">5005</span>],low[<span class="number">5005</span>],visit[<span class="number">5005</span>],stck[<span class="number">5005</span>],fa[<span class="number">5005</span>],ppsum[<span class="number">5005</span>],psum[<span class="number">5005</span>],du[<span class="number">5005</span>],ti[<span class="number">5005</span>];</span><br><span class="line"><span class="keyword">int</span> M,n,m,top,times,ssum,maxp,pcnt,flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">visit[u]=<span class="number">1</span>,stck[++top]=u;</span><br><span class="line">dfn[u]=low[u]=++times;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=adj[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=too[i];</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])</span><br><span class="line">&#123;</span><br><span class="line">tarjan(v);</span><br><span class="line">low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(visit[v] &amp;&amp; dfn[v]&lt;low[u]) low[u]=dfn[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dfn[u]==low[u])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line">visit[u]=<span class="number">0</span>;</span><br><span class="line">fa[u]=++ssum;</span><br><span class="line">psum[ssum]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(v=stck[top--],v!=u) fa[v]=ssum,psum[ssum]++,visit[v]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=psum[x];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=adj1[x];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!visit[too[i]])</span><br><span class="line">&#123;</span><br><span class="line">visit[too[i]]=<span class="number">1</span>;</span><br><span class="line">cnt+=dfs(too[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,h;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;M);</span><br><span class="line"><span class="keyword">for</span>(h=<span class="number">1</span>;h&lt;=M;h++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(adj,<span class="number">0</span>,<span class="keyword">sizeof</span>(adj));</span><br><span class="line"><span class="built_in">memset</span>(adj1,<span class="number">0</span>,<span class="keyword">sizeof</span>(adj1));</span><br><span class="line"><span class="built_in">memset</span>(nxt,<span class="number">0</span>,<span class="keyword">sizeof</span>(nxt));</span><br><span class="line"><span class="built_in">memset</span>(du,<span class="number">0</span>,<span class="keyword">sizeof</span>(du));</span><br><span class="line"><span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span>(dfn));</span><br><span class="line"><span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="keyword">sizeof</span>(low));</span><br><span class="line"><span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line"><span class="built_in">memset</span>(ppsum,<span class="number">0</span>,<span class="keyword">sizeof</span>(ppsum));</span><br><span class="line">ecnt=top=times=ssum=maxp=pcnt=flag=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">nxt[++ecnt]=adj[x],adj[x]=ecnt,too[ecnt]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span>(!dfn[i]) tarjan(i);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=adj[i];j;j=nxt[j])</span><br><span class="line">&#123;</span><br><span class="line">k=too[j];</span><br><span class="line"><span class="keyword">if</span>(fa[i]!=fa[k])</span><br><span class="line">&#123;</span><br><span class="line">nxt[++ecnt]=adj1[fa[k]],adj1[fa[k]]=ecnt,too[ecnt]=fa[i];</span><br><span class="line">du[fa[i]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=ssum;i++) </span><br><span class="line"><span class="keyword">if</span>(!du[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">visit[i]=<span class="number">1</span>;</span><br><span class="line">maxp=<span class="built_in">max</span>(maxp,ppsum[i]=dfs(i));</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//for(i=1;i&lt;=ssum;i++)</span></span><br><span class="line"><span class="comment">//maxp=max(maxp,ppsum[i]);</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=ssum;i++)</span><br><span class="line"><span class="keyword">if</span>(ppsum[i]==maxp) ti[++pcnt]=i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,h,maxp<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=pcnt;j++)</span><br><span class="line"><span class="keyword">if</span>(fa[i]==ti[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">" %d"</span>,i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;【作业向】程序设计思维与实践 Week8作业&lt;/h1&gt;
    
    </summary>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>【作业向】程序设计思维与实践 CSP-M2</title>
    <link href="http://stbyu.github.io/blog/2020/04/17/csp-m2/"/>
    <id>http://stbyu.github.io/blog/2020/04/17/csp-m2/</id>
    <published>2020-04-16T16:00:00.000Z</published>
    <updated>2020-04-17T04:15:53.701Z</updated>
    
    <content type="html"><![CDATA[<h1>【作业向】程序设计思维与实践 CSP-M2<a id="more"></a></h1><div class="row">    <embed src="第二周题目.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="A-HRZ的序列"><a class="header-anchor" href="#A-HRZ的序列">♔</a>A  HRZ的序列</h2><p>这一题可以先对所有数进行遍历，求出最大和最小值，然后再次遍历，对于每个数ai判断ai是否等于最大值或最小值，ai-最小值是否等于最大值-ai，若都不符合则不满足条件，输出NO，跳出循环。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll T,n,maxi,mini,flag;</span><br><span class="line">ll ai[<span class="number">10005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll i,j,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line"><span class="keyword">if</span>(n&gt;=<span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;ai[<span class="number">1</span>]);</span><br><span class="line">maxi=mini=ai[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;ai[i]);</span><br><span class="line">maxi=<span class="built_in">max</span>(maxi,ai[i]);</span><br><span class="line">mini=<span class="built_in">min</span>(mini,ai[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ai[i]==maxi || ai[i]==mini || maxi-ai[i]==ai[i]-mini) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-HRZ学英语"><a class="header-anchor" href="#B-HRZ学英语">♔</a>B HRZ学英语</h2><p>这一题可以用尺取法来做，从第一个字符开始，若区间中的不同的字母的数量+？的数量等于26时进行输出，输出时若遇到？，为了保证字典序最小则从A开始向后查询第一个没有出现过的字母，标记并输出。若区间中的不同的字母的数量+？的数量小于26且下一个字符为？或没出现过时，右边的标记右移一位，并对字符数量作相应的修改；当下一个字符出现过时，则左边的标记右移，直到移出了下一个字母为止。当左右标记均大于字符串的长度时若还未输出，则输出-1</p><p>（又及：模拟考试时结束的边界条件没写好导致才得了40分😭，下次一定注意</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">27</span>],sumz;</span><br><span class="line"><span class="keyword">int</span> flag,n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,c);</span><br><span class="line">n=<span class="built_in">strlen</span>(c);</span><br><span class="line"><span class="keyword">if</span>(c[<span class="number">0</span>]==<span class="string">'?'</span>) sum[<span class="number">26</span>]++;</span><br><span class="line"><span class="keyword">else</span> sum[c[<span class="number">0</span>]-<span class="string">'A'</span>]++,sumz++;</span><br><span class="line"><span class="keyword">while</span>(l&lt;n &amp;&amp; r&lt;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[r]==<span class="string">'?'</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum[<span class="number">26</span>]++;</span><br><span class="line">r++;</span><br><span class="line"><span class="keyword">if</span>(sumz+sum[<span class="number">26</span>]==<span class="number">26</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!sum[c[r]-<span class="string">'A'</span>])</span><br><span class="line">&#123;</span><br><span class="line">sum[c[r++]-<span class="string">'A'</span>]=<span class="number">1</span>;</span><br><span class="line">sumz++;</span><br><span class="line"><span class="keyword">if</span>(sumz+sum[<span class="number">26</span>]==<span class="number">26</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[l]==<span class="string">'?'</span>) sum[<span class="number">26</span>]--;</span><br><span class="line"><span class="keyword">else</span> sum[c[l]-<span class="string">'A'</span>]=<span class="number">0</span>,sumz--;</span><br><span class="line">l++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sumz+sum[<span class="number">26</span>]==<span class="number">26</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=l;i&lt;r;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i]==<span class="string">'?'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)</span><br><span class="line"><span class="keyword">if</span>(!sum[j]) </span><br><span class="line">&#123;</span><br><span class="line">sum[j]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="string">'A'</span>+j);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%c"</span>,c[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-咕咕东的奇妙序列"><a class="header-anchor" href="#C-咕咕东的奇妙序列">♔</a>C 咕咕东的奇妙序列</h2><p>这一题就比较麻烦了，首先要预处理出1到9、1到99、1到999、1到9999。。。的长度，然后处理出第9组，第99组，第999组。。。的长度。然后读入q，先判断q在pow(10,n)-1组到pow(10,n+1)-1组之间，然后通过二分找到具体的组数。然后通过循环判断在该组的第几位，然后确定出具体的数字并输出。</p><p>这一题的细节的地方还是蛮多的，坑点也有，比如用c++自带的pow函数会出问题，只好自己写了一个，这还是蛮锻炼代码能力和思维能力的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll M,q,k;</span><br><span class="line">ll dl[<span class="number">20</span>],dll[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll a=((dl[k<span class="number">-1</span>]+k)+(dl[k<span class="number">-1</span>]+k*x))*x/<span class="number">2</span>;</span><br><span class="line">ll b=((dl[k<span class="number">-1</span>]+k)+(dl[k<span class="number">-1</span>]+k*(x+<span class="number">1</span>)))*(x+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(b&lt;q) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">power</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll n=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=y;i++) n*=x;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll i,j;</span><br><span class="line">dl[<span class="number">1</span>]=<span class="number">9</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">15</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">dl[i]=dl[i<span class="number">-1</span>]+i*(power(<span class="number">10</span>,i)-power(<span class="number">10</span>,i<span class="number">-1</span>));</span><br><span class="line"><span class="comment">//printf("%lld\n",dl[i]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">dll[i]=(dl[i<span class="number">-1</span>]+i+dl[i])*(power((ll)<span class="number">10</span>,i)-power((ll)<span class="number">10</span>,i<span class="number">-1</span>))/<span class="number">2</span>;</span><br><span class="line"><span class="comment">//printf("-%lld-\n",dll[i]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;M);</span><br><span class="line"><span class="keyword">while</span>(M--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=<span class="number">9</span>;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q&lt;=dll[k]) <span class="keyword">break</span>;</span><br><span class="line">q-=dll[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("%lld - %lld\n",q,k);</span></span><br><span class="line">ll l=<span class="number">0</span>,r=power(<span class="number">10</span>,k)<span class="number">-1</span>,mid;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid)) r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("%lld %lld\n",l,r);</span></span><br><span class="line">q-=((dl[k<span class="number">-1</span>]+k)+(dl[k<span class="number">-1</span>]+k*l))*l/<span class="number">2</span>;</span><br><span class="line"><span class="comment">//printf("%lld\n",q);</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q&lt;=dl[i])</span><br><span class="line">&#123;</span><br><span class="line">q-=dl[i<span class="number">-1</span>];</span><br><span class="line"><span class="comment">//printf("+%lld+\n",q);</span></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,q);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll hi=(q+i<span class="number">-1</span>)/i;</span><br><span class="line">ll xt=q%i;</span><br><span class="line">ll dsg=power(<span class="number">10</span>,i<span class="number">-1</span>)+hi<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(xt==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf("-=%lld=-\n",dsg);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dsg%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">xt=i-xt;</span><br><span class="line">ll xxx=power(<span class="number">10</span>,xt+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//printf("%lld-%lld-%lld-%lld-\n",dsg,xt,xxx,i);</span></span><br><span class="line">dsg=dsg%xxx;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(dsg/power(<span class="number">10</span>,xt))); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;【作业向】程序设计思维与实践 CSP-M2&lt;/h1&gt;
    
    </summary>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>【作业向】程序设计思维与实践 Week7 作业</title>
    <link href="http://stbyu.github.io/blog/2020/04/16/week7hw/"/>
    <id>http://stbyu.github.io/blog/2020/04/16/week7hw/</id>
    <published>2020-04-15T16:00:00.000Z</published>
    <updated>2020-04-24T03:06:23.313Z</updated>
    
    <content type="html"><![CDATA[<h1>【作业向】程序设计思维与实践 Week7作业<a id="more"></a></h1><h2 id="A-TT-的魔法猫"><a class="header-anchor" href="#A-TT-的魔法猫">♔</a>A TT 的魔法猫</h2><h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3><p>众所周知，TT 有一只魔法猫。</p><p>这一天，TT 正在专心致志地玩《猫和老鼠》游戏，然而比赛还没开始，聪明的魔法猫便告诉了 TT 比赛的最终结果。TT 非常诧异，不仅诧异于他的小猫咪居然会说话，更诧异于这可爱的小不点为何有如此魔力？</p><p>魔法猫告诉 TT，它其实拥有一张游戏胜负表，上面有 N 个人以及 M 个胜负关系，每个胜负关系为 A B，表示 A 能胜过 B，且胜负关系具有传递性。即 A 胜过 B，B 胜过 C，则 A 也能胜过 C。</p><p>TT 不相信他的小猫咪什么比赛都能预测，因此他想知道有多少对选手的胜负无法预先得知，你能帮帮他吗？</p><h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3><p>第一行给出数据组数。</p><p>每组数据第一行给出 N 和 M（N , M &lt;= 500）。</p><p>接下来 M 行，每行给出 A B，表示 A 可以胜过 B。</p><h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3><p>对于每一组数据，判断有多少场比赛的胜负不能预先得知。注意 (a, b) 与 (b, a) 等价，即每一个二元组只被计算一次。</p><h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3><h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3 3</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 3</span><br><span class="line">3 2</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">4 2</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">0</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3><p>由题意可知，这一题中的胜负关系具有传递性，故我们可以使用Floyd算法求出任意两点的胜负关系，我们可以设tu[a] [b]=1表示a比b强，tu[a] [b]=0表示a和b胜负关系不明，当tu[a] [b]=dis[b] [a]=0时表示a和b的胜负关系无法判断。这样我们在读入已知的胜负关系之后，在跑Floyd的时候将更新条件设置为tu[i] [j]=max(tu[i] [j],tu[i] [k]&amp;tu[k] [j])即可得到答案。但裸的Floyd会超时，我们需要做一下剪枝，即当tu[i] [k]=1时才将k作为中间点进行更新。</p><h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,m,n; </span><br><span class="line"><span class="keyword">int</span> tu[<span class="number">5005</span>][<span class="number">5005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++) tu[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">tu[a][b]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tu[i][k])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">tu[i][j]=<span class="built_in">max</span>(tu[i][j],tu[i][k]&amp;tu[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">b=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tu[i][j]==<span class="number">0</span> &amp;&amp; tu[j][i]==<span class="number">0</span>) b++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-TT-的旅行日记"><a class="header-anchor" href="#B-TT-的旅行日记">♔</a>B TT 的旅行日记</h2><h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3><p>众所周知，TT 有一只魔法猫。</p><p>今天他在 B 站上开启了一次旅行直播，记录他与魔法猫在喵星旅游时的奇遇。 TT 从家里出发，准备乘坐猫猫快线前往喵星机场。猫猫快线分为经济线和商业线两种，它们的速度与价钱都不同。当然啦，商业线要比经济线贵，TT 平常只能坐经济线，但是今天 TT 的魔法猫变出了一张商业线车票，可以坐一站商业线。假设 TT 换乘的时间忽略不计，请你帮 TT 找到一条去喵星机场最快的线路，不然就要误机了！</p><h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3><p>输入包含多组数据。每组数据第一行为 3 个整数 N, S 和 E (2 ≤ N ≤ 500, 1 ≤ S, E ≤ 100)，即猫猫快线中的车站总数，起点和终点（即喵星机场所在站）编号。</p><p>下一行包含一个整数 M (1 ≤ M ≤ 1000)，即经济线的路段条数。</p><p>接下来有 M 行，每行 3 个整数 X, Y, Z (1 ≤ X, Y ≤ N, 1 ≤ Z ≤ 100)，表示 TT 可以乘坐经济线在车站 X 和车站 Y 之间往返，其中单程需要 Z 分钟。</p><p>下一行为商业线的路段条数 K (1 ≤ K ≤ 1000)。</p><p>接下来 K 行是商业线路段的描述，格式同经济线。</p><p>所有路段都是双向的，但有可能必须使用商业车票才能到达机场。保证最优解唯一。</p><h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3><p>对于每组数据，输出3行。第一行按访问顺序给出 TT 经过的各个车站（包括起点和终点），第二行是 TT 换乘商业线的车站编号（如果没有使用商业线车票，输出&quot;Ticket Not Used&quot;，不含引号），第三行是 TT 前往喵星机场花费的总时间。</p><p><strong>本题不忽略多余的空格和制表符，且每一组答案间要输出一个换行</strong></p><h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3><h4 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">4 1 4</span><br><span class="line">4</span><br><span class="line">1 2 2</span><br><span class="line">1 3 3</span><br><span class="line">2 4 4</span><br><span class="line">3 4 5</span><br><span class="line">1</span><br><span class="line">2 4 3</span><br></pre></td></tr></table></figure><h4 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 2 4</span><br><span class="line">2</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3><p>由题意得，商业线至多可以使用一次，因此我们可以从起点和终点开始各跑一次堆优化的Dijkstra算法求最短路。起点到各点的最短路记为dis[i] [0]，使用pre[i] [0]记录各点被哪个节点松弛；终点到各点的最短路记为dis[i] [1]，使用pre[i] [1]记录各点被哪个节点松弛。然后读入各条商业线的信息端点u、v，花费w，然后进行比较不使用商业线和正反使用商业线这三种情况哪种消耗时间少并记录，最后根据结果输出即可。</p><h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s,e,k,mind,l,r;</span><br><span class="line"><span class="keyword">int</span> adj[<span class="number">1010</span>],nxt[<span class="number">20020</span>],too[<span class="number">20020</span>],w[<span class="number">20020</span>],ecnt;</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">1010</span>][<span class="number">2</span>],visit[<span class="number">1010</span>],pre[<span class="number">1010</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">priority_queue&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dij</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>()) q.pop();</span><br><span class="line"><span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">dis[x][f]=<span class="number">0</span>;</span><br><span class="line">q.push(make_pair(<span class="number">0</span>,x));</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line">u=q.top().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="comment">//if(visit[u]) continue;</span></span><br><span class="line">visit[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=adj[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line">v=too[i];</span><br><span class="line"><span class="keyword">if</span>(dis[v][f]&gt;dis[u][f]+w[i])</span><br><span class="line">&#123;</span><br><span class="line">dis[v][f]=dis[u][f]+w[i];</span><br><span class="line">pre[v][f]=u;</span><br><span class="line">q.push(make_pair(-dis[v][f],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeout1</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">makeout1(pre[x][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d"</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeout2</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d"</span>,x);</span><br><span class="line"><span class="keyword">if</span>(x==e) <span class="keyword">return</span>;</span><br><span class="line">makeout2(pre[x][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;s,&amp;e)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">adj[i]=<span class="number">0</span>;dis[i][<span class="number">0</span>]=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">dis[i][<span class="number">1</span>]=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">pre[i][<span class="number">0</span>]=<span class="number">0</span>;pre[i][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ecnt=<span class="number">0</span>;l=<span class="number">0</span>;r=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//memset(nxt,0,sizeof(nxt));</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">nxt[++ecnt]=adj[a],adj[a]=ecnt,too[ecnt]=b,w[ecnt]=c;</span><br><span class="line">nxt[++ecnt]=adj[b],adj[b]=ecnt,too[ecnt]=a,w[ecnt]=c;</span><br><span class="line">&#125;</span><br><span class="line">dij(s,<span class="number">0</span>);</span><br><span class="line">dij(e,<span class="number">1</span>);</span><br><span class="line">mind=dis[e][<span class="number">0</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="keyword">if</span>(mind&gt;dis[a][<span class="number">0</span>]+dis[b][<span class="number">1</span>]+c)</span><br><span class="line">&#123;</span><br><span class="line">mind=dis[a][<span class="number">0</span>]+dis[b][<span class="number">1</span>]+c;</span><br><span class="line">l=a,r=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mind&gt;dis[b][<span class="number">0</span>]+dis[a][<span class="number">1</span>]+c)</span><br><span class="line">&#123;</span><br><span class="line">mind=dis[b][<span class="number">0</span>]+dis[a][<span class="number">1</span>]+c;</span><br><span class="line">l=b,r=a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">makeout1(e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nTicket Not Used\n%d\n"</span>,mind);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">makeout1(l);</span><br><span class="line">makeout2(r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n%d\n%d\n"</span>,l,mind);</span><br><span class="line">&#125;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-TT的美梦"><a class="header-anchor" href="#C-TT的美梦">♔</a>C TT的美梦</h2><h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3><p>这一晚，TT 做了个美梦！</p><p>在梦中，TT 的愿望成真了，他成为了喵星的统领！喵星上有 N 个商业城市，编号 1 ～ N，其中 1 号城市是 TT 所在的城市，即首都。</p><p>喵星上共有 M 条有向道路供商业城市相互往来。但是随着喵星商业的日渐繁荣，有些道路变得非常拥挤。正在 TT 为之苦恼之时，他的魔法小猫咪提出了一个解决方案！TT 欣然接受并针对该方案颁布了一项新的政策。</p><p>具体政策如下：对每一个商业城市标记一个正整数，表示其繁荣程度，当每一只喵沿道路从一个商业城市走到另一个商业城市时，TT 都会收取它们（目的地繁荣程度 - 出发地繁荣程度）^ 3 的税。</p><p>TT 打算测试一下这项政策是否合理，因此他想知道从首都出发，走到其他城市至少要交多少的税，如果总金额小于 3 或者无法到达请悄咪咪地打出 ‘?’。</p><h3 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h3><p>第一行输入 T，表明共有 T 组数据。（1 &lt;= T &lt;= 50）</p><p>对于每一组数据，第一行输入 N，表示点的个数。（1 &lt;= N &lt;= 200）</p><p>第二行输入 N 个整数，表示 1 ～ N 点的权值 a[i]。（0 &lt;= a[i] &lt;= 20）</p><p>第三行输入 M，表示有向道路的条数。（0 &lt;= M &lt;= 100000）</p><p>接下来 M 行，每行有两个整数 A B，表示存在一条 A 到 B 的有向道路。</p><p>接下来给出一个整数 Q，表示询问个数。（0 &lt;= Q &lt;= 100000）</p><p>每一次询问给出一个 P，表示求 1 号点到 P 号点的最少税费。</p><h3 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h3><p>每个询问输出一行，如果不可达或税费小于 3 则输出 ‘?’。</p><h3 id="Examples-v2"><a class="header-anchor" href="#Examples-v2">♔</a>Examples</h3><h4 id="Input-v6"><a class="header-anchor" href="#Input-v6">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br><span class="line">6 7 8 9 10</span><br><span class="line">6</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">1 5</span><br><span class="line">5 4</span><br><span class="line">4 5</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">10</span><br><span class="line">1 2 4 4 5 6 7 8 9 10</span><br><span class="line">10</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 1</span><br><span class="line">1 4</span><br><span class="line">4 5</span><br><span class="line">5 6</span><br><span class="line">6 7</span><br><span class="line">7 8</span><br><span class="line">8 9</span><br><span class="line">9 10</span><br><span class="line">2</span><br><span class="line">3 10</span><br></pre></td></tr></table></figure><h4 id="Output-v6"><a class="header-anchor" href="#Output-v6">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Case 1:</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">Case 2:</span><br><span class="line">?</span><br><span class="line">?</span><br></pre></td></tr></table></figure><h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3><p>这一题在用spfa求最短路的同时要注意负环的处理，找到负环后应将负环上的点及能够到达负环的点打上标记，最后对于询问的点，若距离小于3或不可到达或被打上了标记则输出？，否则输出最短路的长度。</p><h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,m,n,q;</span><br><span class="line"><span class="keyword">int</span> h[<span class="number">205</span>],dis[<span class="number">205</span>],flag[<span class="number">205</span>],visit[<span class="number">205</span>],ti[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> adj[<span class="number">205</span>],nxt[<span class="number">200005</span>],too[<span class="number">200005</span>],w[<span class="number">200005</span>],ecnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">flag[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=adj[x];i;i=nxt[i]) </span><br><span class="line"><span class="keyword">if</span>(!flag[too[i]]) dfs(too[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line"><span class="built_in">memset</span>(ti,<span class="number">0</span>,<span class="keyword">sizeof</span>(ti));</span><br><span class="line"><span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line">dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">u=q.front();</span><br><span class="line">q.pop();</span><br><span class="line">visit[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(flag[u]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=adj[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line">v=too[i];</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+w[i])</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+w[i];</span><br><span class="line"><span class="keyword">if</span>(!visit[v])</span><br><span class="line">&#123;</span><br><span class="line">visit[v]=<span class="number">1</span>;</span><br><span class="line">q.push(v);</span><br><span class="line">ti[v]++;</span><br><span class="line"><span class="keyword">if</span>(ti[v]&gt;=n) dfs(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,t;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">1</span>;t&lt;=T;t++)</span><br><span class="line">&#123;</span><br><span class="line">ecnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(adj,<span class="number">0</span>,<span class="keyword">sizeof</span>(adj));</span><br><span class="line"><span class="built_in">memset</span>(nxt,<span class="number">0</span>,<span class="keyword">sizeof</span>(nxt));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;h[i]),dis[i]=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">nxt[++ecnt]=adj[a],adj[a]=ecnt,too[ecnt]=b,w[ecnt]=(h[b]-h[a])*(h[b]-h[a])*(h[b]-h[a]);</span><br><span class="line">&#125;</span><br><span class="line">spfa();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,t);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;j);</span><br><span class="line"><span class="keyword">if</span>(dis[j]&lt;<span class="number">3</span> || dis[j]==<span class="number">0x7fffffff</span> || flag[j]) <span class="built_in">printf</span>(<span class="string">"?\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;【作业向】程序设计思维与实践 Week7作业&lt;/h1&gt;
    
    </summary>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>【作业向】程序设计思维与实践 Week6 限时大模拟</title>
    <link href="http://stbyu.github.io/blog/2020/03/31/week6hwmn/"/>
    <id>http://stbyu.github.io/blog/2020/03/31/week6hwmn/</id>
    <published>2020-03-30T16:00:00.000Z</published>
    <updated>2020-04-01T12:02:35.997Z</updated>
    
    <content type="html"><![CDATA[<h1>【作业向】程序设计思维与实践 Week6限时大模拟<a id="more"></a></h1><h2 id="掌握魔法の东东-II"><a class="header-anchor" href="#掌握魔法の东东-II">♔</a><a href="https://vjudge.net/problem/Gym-270437J" target="_blank" rel="noopener">掌握魔法の东东 II</a></h2><h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3><p>从瑞神家打牌回来后，东东痛定思痛，决定苦练牌技，终成赌神！<br>东东有 <em>A</em> × <em>B</em> 张扑克牌。每张扑克牌有一个大小(整数，记为a，范围区间是 0 到 <em>A</em> - 1）和一个花色（整数，记为b，范围区间是 0 到 <em>B</em> - 1。<br>扑克牌是互异的，也就是独一无二的，也就是说没有两张牌大小和花色都相同。<br>“一手牌”的意思是你手里有5张不同的牌，这 5 张牌没有谁在前谁在后的顺序之分，它们可以形成一个牌型。 我们定义了 9 种牌型，如下是 9 种牌型的规则，我们用“低序号优先”来匹配牌型，即这“一手牌”从上到下满足的第一个牌型规则就是它的“牌型编号”（一个整数，属于1到9）：</p><ol><li>同花顺: 同时满足规则 2 和规则 3.</li><li>顺子 : 5张牌的大小形如 <em>x</em>, <em>x</em> + 1, <em>x</em> + 2, <em>x</em> + 3, <em>x</em> + 4</li><li>同花 : 5张牌都是相同花色的.</li><li>炸弹 : 5张牌其中有4张牌的大小相等.</li><li>三带二 : 5张牌其中有3张牌的大小相等，且另外2张牌的大小也相等.</li><li>两对: 5张牌其中有2张牌的大小相等，且另外3张牌中2张牌的大小相等.</li><li>三条: 5张牌其中有3张牌的大小相等.</li><li>一对: 5张牌其中有2张牌的大小相等.</li><li>要不起: 这手牌不满足上述的牌型中任意一个.</li></ol><p>现在, 东东从<em>A</em> × <em>B</em> 张扑克牌中拿走了 2 张牌！分别是 (<em>a</em>1, <em>b</em>1) 和 (<em>a</em>2, <em>b</em>2). （其中a表示大小，b表示花色）<br>现在要从剩下的扑克牌中再随机拿出 3 张！组成一手牌！！<br>其实东东除了会打代码，他业余还是一个魔法师，现在他要预言他的未来的可能性，即他将拿到的“一手牌”的可能性，我们用一个“牌型编号（一个整数，属于1到9）”来表示这手牌的牌型，那么他的未来有 9 种可能，但每种可能的方案数不一样。<br>现在，东东的阿戈摩托之眼没了，你需要帮他算一算 9 种牌型中，每种牌型的方案数。</p><h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3><p>第 1 行包含了整数 <em>A</em> 和 <em>B</em> (5 ≤ <em>A</em> ≤ 25, 1 ≤ <em>B</em> ≤ 4).</p><p>第 2 行包含了整数 <em>a</em>1, <em>b</em>1, <em>a</em>2, <em>b</em>2 (0 ≤ <em>a</em>1, <em>a</em>2 ≤ <em>A</em> - 1, 0 ≤ <em>b</em>1, <em>b</em>2 ≤ <em>B</em> - 1, (<em>a</em>1, <em>b</em>1) ≠ (<em>a</em>2, <em>b</em>2)).</p><h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3><p>输出一行，这行有 9 个整数，每个整数代表了 9 种牌型的方案数（按牌型编号从小到大的顺序）</p><h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3><h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">25 4</span><br><span class="line">0 0 24 3</span><br></pre></td></tr></table></figure><h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 0 2 18 1656 644 36432 113344</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3><p>看到这一题第一反应是NOIP2015的斗地主 😭，但还是有不同之处的斗地主是把牌发给你让你出，这个题是整副牌都可以用，然后凑五张就可以。</p><p>不过基本思路差不多，这一题可以直接枚举各种剩下的三张牌的所有可能性，复杂度也不高，100的三次方，完全可以跑过的。这一题的点在于如何判断，我们发现如果被选出的五张牌是排好序的，那么判断会简单的多，但是在dfs还需要恢复现场，那怎么办？再开个数组复制一下呗，反正就五张牌，复杂度又不高。这个问题解决之后还有一个问题，就是判断的顺序，一定要严格按照优先级进行判断并且思路一定要清晰，不要漏了情况。（但总有一种在写太吾绘卷的感觉，一万个if else ​</p><p>（ps：听说还有用排列组合公式算的同学，可怕</p><h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> p,h;</span><br><span class="line">&#125;p[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> card[<span class="number">25</span>][<span class="number">4</span>],sum[<span class="number">10</span>];</span><br><span class="line">data xu[<span class="number">6</span>],xuw[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> a,b,pcnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wly</span><span class="params">(data x,data y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x.p&lt;y.p) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x.p==y.p &amp;&amp; x.h&lt;y.h) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++) xuw[i]=xu[i];</span><br><span class="line">sort(xuw+<span class="number">1</span>,xuw+<span class="number">6</span>,wly);</span><br><span class="line"><span class="keyword">if</span>(xuw[<span class="number">1</span>].h==xuw[<span class="number">2</span>].h &amp;&amp; xuw[<span class="number">2</span>].h==xuw[<span class="number">3</span>].h &amp;&amp; xuw[<span class="number">3</span>].h==xuw[<span class="number">4</span>].h &amp;&amp; xuw[<span class="number">4</span>].h==xuw[<span class="number">5</span>].h)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(xuw[<span class="number">2</span>].p==xuw[<span class="number">1</span>].p+<span class="number">1</span> &amp;&amp; xuw[<span class="number">3</span>].p==xuw[<span class="number">2</span>].p+<span class="number">1</span> &amp;&amp; xuw[<span class="number">4</span>].p==xuw[<span class="number">3</span>].p+<span class="number">1</span> &amp;&amp; xuw[<span class="number">5</span>].p==xuw[<span class="number">4</span>].p+<span class="number">1</span>)</span><br><span class="line">sum[<span class="number">1</span>]++;</span><br><span class="line"><span class="keyword">else</span> sum[<span class="number">3</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">2</span>].p==xuw[<span class="number">1</span>].p+<span class="number">1</span> &amp;&amp; xuw[<span class="number">3</span>].p==xuw[<span class="number">2</span>].p+<span class="number">1</span> &amp;&amp; xuw[<span class="number">4</span>].p==xuw[<span class="number">3</span>].p+<span class="number">1</span> &amp;&amp; xuw[<span class="number">5</span>].p==xuw[<span class="number">4</span>].p+<span class="number">1</span>)</span><br><span class="line">sum[<span class="number">2</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">1</span>].p==xuw[<span class="number">2</span>].p &amp;&amp; xuw[<span class="number">2</span>].p==xuw[<span class="number">3</span>].p &amp;&amp; xuw[<span class="number">3</span>].p==xuw[<span class="number">4</span>].p)</span><br><span class="line">sum[<span class="number">4</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">2</span>].p==xuw[<span class="number">3</span>].p &amp;&amp; xuw[<span class="number">3</span>].p==xuw[<span class="number">4</span>].p &amp;&amp; xuw[<span class="number">4</span>].p==xuw[<span class="number">5</span>].p)</span><br><span class="line">sum[<span class="number">4</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">1</span>].p==xuw[<span class="number">2</span>].p &amp;&amp; xuw[<span class="number">2</span>].p==xuw[<span class="number">3</span>].p)<span class="comment">//123 45</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(xuw[<span class="number">4</span>].p==xuw[<span class="number">5</span>].p) sum[<span class="number">5</span>]++;</span><br><span class="line"><span class="keyword">else</span> sum[<span class="number">7</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">2</span>].p==xuw[<span class="number">3</span>].p &amp;&amp; xuw[<span class="number">3</span>].p==xuw[<span class="number">4</span>].p)<span class="comment">//1 234 5</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(xuw[<span class="number">1</span>].p==xuw[<span class="number">5</span>].p) sum[<span class="number">5</span>]++;</span><br><span class="line"><span class="keyword">else</span> sum[<span class="number">7</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">3</span>].p==xuw[<span class="number">4</span>].p &amp;&amp; xuw[<span class="number">4</span>].p==xuw[<span class="number">5</span>].p)<span class="comment">//12 345</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(xuw[<span class="number">1</span>].p==xuw[<span class="number">2</span>].p) sum[<span class="number">5</span>]++;</span><br><span class="line"><span class="keyword">else</span> sum[<span class="number">7</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">1</span>].p==xuw[<span class="number">2</span>].p)<span class="comment">//12 3 4 5</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(xuw[<span class="number">3</span>].p==xuw[<span class="number">4</span>].p || xuw[<span class="number">4</span>].p==xuw[<span class="number">5</span>].p) sum[<span class="number">6</span>]++;</span><br><span class="line"><span class="keyword">else</span> sum[<span class="number">8</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">2</span>].p==xuw[<span class="number">3</span>].p)<span class="comment">//1 23 4 5</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(xuw[<span class="number">1</span>].p==xuw[<span class="number">4</span>].p || xuw[<span class="number">4</span>].p==xuw[<span class="number">5</span>].p) sum[<span class="number">6</span>]++;</span><br><span class="line"><span class="keyword">else</span> sum[<span class="number">8</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">3</span>].p==xuw[<span class="number">4</span>].p)<span class="comment">//1 2 34 5</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(xuw[<span class="number">1</span>].p==xuw[<span class="number">2</span>].p || xuw[<span class="number">2</span>].p==xuw[<span class="number">5</span>].p) sum[<span class="number">6</span>]++;</span><br><span class="line"><span class="keyword">else</span> sum[<span class="number">8</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">4</span>].p==xuw[<span class="number">5</span>].p)<span class="comment">//1 2 3 45</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(xuw[<span class="number">1</span>].p==xuw[<span class="number">2</span>].p || xuw[<span class="number">2</span>].p==xuw[<span class="number">3</span>].p) sum[<span class="number">6</span>]++;</span><br><span class="line"><span class="keyword">else</span> sum[<span class="number">8</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> sum[<span class="number">9</span>]++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=t;i&lt;=pcnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!card[p[i].p][p[i].h])</span><br><span class="line">&#123;</span><br><span class="line">card[p[i].p][p[i].h]=<span class="number">1</span>;</span><br><span class="line">xu[x]=p[i];</span><br><span class="line">dfs(x+<span class="number">1</span>,i+<span class="number">1</span>);</span><br><span class="line">card[p[i].p][p[i].h]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;xu[<span class="number">1</span>].p,&amp;xu[<span class="number">1</span>].h,&amp;xu[<span class="number">2</span>].p,&amp;xu[<span class="number">2</span>].h);</span><br><span class="line">card[xu[<span class="number">1</span>].p][xu[<span class="number">1</span>].h]=<span class="number">1</span>;</span><br><span class="line">card[xu[<span class="number">2</span>].p][xu[<span class="number">2</span>].h]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(xu[<span class="number">1</span>].p&gt;xu[<span class="number">2</span>].p) swap(xu[<span class="number">1</span>],xu[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(xu[<span class="number">1</span>].p==xu[<span class="number">2</span>].p &amp;&amp; xu[<span class="number">1</span>].h&gt;xu[<span class="number">2</span>].h) swap(xu[<span class="number">1</span>],xu[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;a;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;b;j++)</span><br><span class="line"><span class="keyword">if</span>(!card[i][j])</span><br><span class="line">&#123;</span><br><span class="line">p[++pcnt].p=i;</span><br><span class="line">p[pcnt].h=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,sum[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;【作业向】程序设计思维与实践 Week6限时大模拟&lt;/h1&gt;
    
    </summary>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>【作业向】程序设计思维与实践 Week6 作业</title>
    <link href="http://stbyu.github.io/blog/2020/03/31/week6hw/"/>
    <id>http://stbyu.github.io/blog/2020/03/31/week6hw/</id>
    <published>2020-03-30T16:00:00.000Z</published>
    <updated>2020-04-01T09:16:35.516Z</updated>
    
    <content type="html"><![CDATA[<h1>【作业向】程序设计思维与实践 Week6作业<a id="more"></a></h1><h2 id="A-氪金带东"><a class="header-anchor" href="#A-氪金带东">♔</a>A 氪金带东</h2><h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3><p>实验室里原先有一台电脑(编号为1)，最近氪金带师咕咕东又为实验室购置了N-1台电脑，编号为2到N。每台电脑都用网线连接到一台先前安装的电脑上。但是咕咕东担心网速太慢，他希望知道第i台电脑到其他电脑的最大网线长度，但是可怜的咕咕东在不久前刚刚遭受了宇宙射线的降智打击，请你帮帮他。</p><p><img src="/blog/2020/03/31/week6hw/8XylFS.png" alt="img"></p><p>提示: 样例输入对应这个图，从这个图中你可以看出，距离1号电脑最远的电脑是4号电脑，他们之间的距离是3。 4号电脑与5号电脑都是距离2号电脑最远的点，故其答案是2。5号电脑距离3号电脑最远，故对于3号电脑来说它的答案是3。同样的我们可以计算出4号电脑和5号电脑的答案是4.</p><h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3><p>输入文件包含多组测试数据。对于每组测试数据，第一行一个整数N (N&lt;=10000)，接下来有N-1行，每一行两个数，对于第i行的两个数，它们表示与i号电脑连接的电脑编号以及它们之间网线的长度。网线的总长度不会超过10^9，每个数之间用一个空格隔开。</p><h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3><p>对于每组测试数据输出N行，第i行表示i号电脑的答案 (1&lt;=i&lt;=N).</p><h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3><h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 1</span><br><span class="line">2 1</span><br><span class="line">3 1</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure><h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3><p>这道题是要我们求出一棵树上每一个点到与其距离最远的点的距离，要求出这个需要先求出树的直径上的两个端点。然后树上的每一个点的最远的点一定是这两个直径之一。</p><p>粗略证明一下，如果是直径上的点那必然最远的是其中一个端点，否则这个端点也无法成为直径的端点。然果不是直径上的点，那么它到最远点之间的路程一定经过树的直径。</p><p>由此，我们可以用三次dfs来做，第一次dfs从任一点开始，找到距离最远的点，也就是直径的一个起点v1。第二次dfs从v1出发，找到最远的点v2也就是直径的另一个端点，同时统计出各点到v1的距离。第三次dfs从v2出发，找出各点到v2的距离，并与到v1的距离相比较，取较大的那一个作为答案。</p><p>（坑点：多组数据，记得清零</p><h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> adj[<span class="number">10005</span>],nxt[<span class="number">20005</span>],too[<span class="number">20005</span>],w[<span class="number">20005</span>];</span><br><span class="line"><span class="keyword">int</span> n,ecnt,maxl,visit[<span class="number">10005</span>],dis[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> v1,v2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//printf("-%d-\n",x);</span></span><br><span class="line"><span class="keyword">if</span>(l&gt;maxl)</span><br><span class="line">&#123;</span><br><span class="line">maxl=l;</span><br><span class="line">v1=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> u;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=adj[x];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line">u=too[i];</span><br><span class="line"><span class="keyword">if</span>(!visit[u])</span><br><span class="line">&#123;</span><br><span class="line">visit[u]=<span class="number">1</span>;</span><br><span class="line">dfs1(u,l+w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//printf("-%d-\n",x);</span></span><br><span class="line"><span class="keyword">if</span>(l&gt;maxl)</span><br><span class="line">&#123;</span><br><span class="line">maxl=l;</span><br><span class="line">v2=x;</span><br><span class="line">&#125;</span><br><span class="line">dis[x]=<span class="built_in">max</span>(dis[x],l);</span><br><span class="line"><span class="keyword">int</span> u;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=adj[x];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line">u=too[i];</span><br><span class="line"><span class="keyword">if</span>(!visit[u])</span><br><span class="line">&#123;</span><br><span class="line">visit[u]=<span class="number">1</span>;</span><br><span class="line">dfs2(u,l+w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">ecnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(adj,<span class="number">0</span>,<span class="keyword">sizeof</span>(adj));</span><br><span class="line"><span class="built_in">memset</span>(nxt,<span class="number">0</span>,<span class="keyword">sizeof</span>(nxt));</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;j,&amp;k);</span><br><span class="line">nxt[++ecnt]=adj[i],adj[i]=ecnt,too[ecnt]=j,w[ecnt]=k;</span><br><span class="line">nxt[++ecnt]=adj[j],adj[j]=ecnt,too[ecnt]=i,w[ecnt]=k;</span><br><span class="line">&#125;</span><br><span class="line">maxl=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">visit[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>); </span><br><span class="line">maxl=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">visit[v1]=<span class="number">1</span>;</span><br><span class="line">dfs2(v1,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">visit[v2]=<span class="number">1</span>;</span><br><span class="line">dfs2(v2,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-戴好口罩！"><a class="header-anchor" href="#B-戴好口罩！">♔</a>B 戴好口罩！</h2><h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3><p>新型冠状病毒肺炎（Corona Virus Disease 2019，COVID-19），简称“新冠肺炎”，是指2019新型冠状病毒感染导致的肺炎。<br>如果一个感染者走入一个群体，那么这个群体需要被隔离！<br>小A同学被确诊为新冠感染，并且没有戴口罩！！！！！！<br>危！！！<br>时间紧迫！！！！<br>需要尽快找到所有和小A同学直接或者间接接触过的同学，将他们隔离，防止更大范围的扩散。<br>众所周知，学生的交际可能是分小团体的，一位学生可能同时参与多个小团体内。<br>请你编写程序解决！戴口罩！！</p><h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3><p>多组数据，对于每组测试数据：<br>第一行为两个整数n和m（n = m = 0表示输入结束，不需要处理），n是学生的数量，m是学生群体的数量。0 &lt; n &lt;= 3e4 ， 0 &lt;= m &lt;= 5e2<br>学生编号为0~n-1<br>小A编号为0<br>随后，m行，每行有一个整数num即小团体人员数量。随后有num个整数代表这个小团体的学生。</p><h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3><p>输出要隔离的人数，每组数据的答案输出占一行</p><h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3><h4 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">100 4</span><br><span class="line">2 1 2</span><br><span class="line">5 10 13 11 12 14</span><br><span class="line">2 0 1</span><br><span class="line">2 99 2</span><br><span class="line">200 2</span><br><span class="line">1 5</span><br><span class="line">5 1 2 3 4 5</span><br><span class="line">1 0</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><h4 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3><p>用并查集求出和0号在统一集合中的元素并统计个数即可。</p><p>（坑点：多组数据，记得清零</p><h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,sum;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">30005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findf</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f[x]==x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> f[x]=findf(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,l,r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(n || m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) f[i]=i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;l);</span><br><span class="line">l=findf(l);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;k;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;r);</span><br><span class="line">r=findf(r);</span><br><span class="line">f[r]=l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sum=<span class="number">1</span>;</span><br><span class="line">l=findf(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(findf(i)==l) sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-掌握魔法の东东-I"><a class="header-anchor" href="#C-掌握魔法の东东-I">♔</a>C 掌握魔法の东东 I</h2><h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3><p>东东在老家农村无聊，想种田。农田有 n 块，编号从 1~n。种田要灌氵<br>众所周知东东是一个魔法师，他可以消耗一定的 MP 在一块田上施展魔法，使得黄河之水天上来。他也可以消耗一定的 MP 在两块田的渠上建立传送门，使得这块田引用那块有水的田的水。 (1&lt;=n&lt;=3e2)<br>黄河之水天上来的消耗是 Wi，i 是农田编号 (1&lt;=Wi&lt;=1e5)<br>建立传送门的消耗是 Pij，i、j 是农田编号 (1&lt;= Pij &lt;=1e5, Pij = Pji, Pii =0)<br>东东为所有的田灌氵的最小消耗</p><h3 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h3><p>第1行：一个数n<br>第2行到第n+1行：数wi<br>第n+2行到第2n+1行：矩阵即pij矩阵</p><h3 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h3><p>东东最小消耗的MP值</p><h3 id="Examples-v2"><a class="header-anchor" href="#Examples-v2">♔</a>Examples</h3><h4 id="Input-v6"><a class="header-anchor" href="#Input-v6">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">0 2 2 2</span><br><span class="line">2 0 3 3</span><br><span class="line">2 3 0 4</span><br><span class="line">2 3 4 0</span><br></pre></td></tr></table></figure><h4 id="Output-v6"><a class="header-anchor" href="#Output-v6">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3><p>一道求最小生成树边权和的题目，对于黄河之水天上来有两种处理方法，一种是先求农田之间的最小生成树，然后在答案上加最小的天上来的代价；另一种是假设天是一个超级顶点x，从x向各个农田建边，然后再跑最小生成树。</p><h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line">&#125;edge[<span class="number">50005</span>];</span><br><span class="line"><span class="keyword">int</span> n,w,sum;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">305</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wly</span><span class="params">(data a,data b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findf</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f[x]==x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> f[x]=findf(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">f[i]=i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;edge[++w].w);</span><br><span class="line">edge[w].u=<span class="number">0</span>,edge[w].v=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="keyword">if</span>(i&lt;j)</span><br><span class="line">&#123;</span><br><span class="line">edge[++w].w=k,edge[w].u=i,edge[w].v=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(edge+<span class="number">1</span>,edge+<span class="number">1</span>+w,wly);</span><br><span class="line">k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=w;i++)</span><br><span class="line">&#123;</span><br><span class="line">u=findf(edge[i].u);</span><br><span class="line">v=findf(edge[i].v);</span><br><span class="line"><span class="keyword">if</span>(u!=v)</span><br><span class="line">&#123;</span><br><span class="line">f[u]=v;</span><br><span class="line">k++;</span><br><span class="line">sum+=edge[i].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k==n) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-数据中心"><a class="header-anchor" href="#D-数据中心">♔</a>D 数据中心</h2><h3 id="Problem-v4"><a class="header-anchor" href="#Problem-v4">♔</a>Problem</h3><p><img src="/blog/2020/03/31/week6hw/87zdlq.png" alt="img"></p><h3 id="Examples-v3"><a class="header-anchor" href="#Examples-v3">♔</a>Examples</h3><h4 id="Input-v7"><a class="header-anchor" href="#Input-v7">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">5</span><br><span class="line">1</span><br><span class="line">1 2 3</span><br><span class="line">1 3 4</span><br><span class="line">1 4 5</span><br><span class="line">2 3 8</span><br><span class="line">3 4 2</span><br></pre></td></tr></table></figure><h4 id="Output-v7"><a class="header-anchor" href="#Output-v7">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="解题思路-v4"><a class="header-anchor" href="#解题思路-v4">♔</a>解题思路</h3><p>第一次考csp的时候的第四题，全是泪啊😢当时我居然没看出来是个最小生成树，太难了​</p><h3 id="代码-v4"><a class="header-anchor" href="#代码-v4">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line">&#125;edge[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,w,sum;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">50005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wly</span><span class="params">(data a,data b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findf</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f[x]==x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> f[x]=findf(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;w,&amp;j);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=w;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;edge[i].u,&amp;edge[i].v,&amp;edge[i].w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) f[i]=i;</span><br><span class="line">sort(edge+<span class="number">1</span>,edge+<span class="number">1</span>+w,wly);</span><br><span class="line">k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=w;i++)</span><br><span class="line">&#123;</span><br><span class="line">u=findf(edge[i].u);</span><br><span class="line">v=findf(edge[i].v);</span><br><span class="line"><span class="keyword">if</span>(u!=v)</span><br><span class="line">&#123;</span><br><span class="line">f[u]=v;</span><br><span class="line">k++;</span><br><span class="line">sum=edge[i].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;【作业向】程序设计思维与实践 Week6作业&lt;/h1&gt;
    
    </summary>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>【作业向】程序设计思维与实践 Week5 作业</title>
    <link href="http://stbyu.github.io/blog/2020/03/19/week5hw/"/>
    <id>http://stbyu.github.io/blog/2020/03/19/week5hw/</id>
    <published>2020-03-18T16:00:00.000Z</published>
    <updated>2020-03-21T07:02:01.322Z</updated>
    
    <content type="html"><![CDATA[<h1>【作业向】程序设计思维与实践 Week5 作业<a id="more"></a></h1><h2 id="A-最大矩形"><a class="header-anchor" href="#A-最大矩形">♔</a>A 最大矩形</h2><h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3><p>给一个直方图，求直方图中的最大矩形的面积。例如，下面这个图片中直方图的高度从左到右分别是2, 1, 4, 5, 1, 3, 3, 他们的宽都是1，其中最大的矩形是阴影部分。</p><p><img src="/blog/2020/03/19/week5hw/a.png" alt="img"></p><h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3><p>输入包含多组数据。每组数据用一个整数n来表示直方图中小矩形的个数，你可以假定1 &lt;= n &lt;= 100000. 然后接下来n个整数h1, …, hn, 满足 0 &lt;= hi &lt;= 1000000000. 这些数字表示直方图中从左到右每个小矩形的高度，每个小矩形的宽度为1。 测试数据以0结尾。</p><h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3><p>对于每组测试数据输出一行一个整数表示答案。</p><h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3><h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">7 2 1 4 5 1 3 3</span><br><span class="line">4 1000 1000 1000 1000</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">4000</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3><p>一道单调栈的题目，定义结构体类型data用来在栈中存储每个矩形的高度和位置。对于第i个矩形，若i的高度大于栈顶元素的高度，则直接将其放入栈中，否则计算栈顶元素的高度h可构成的最大面积，最大面积为h×（i-1-栈顶元素下面那个元素的座标），并以此来更新答案。继续循环，直到栈顶元素的高度小于i的高度，将i放入栈中。当所有元素处理完成之后，按顺序将栈中的元素弹出，并计算其面积用来更新答案，直到栈空为止。最后输出面积的最大值即可。</p><h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ll h,index;</span><br><span class="line">&#125;stac[<span class="number">100005</span>];</span><br><span class="line">ll n,maxs,top;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll i,j;</span><br><span class="line">data t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n)</span><br><span class="line">&#123;</span><br><span class="line">maxs=<span class="number">0</span>;</span><br><span class="line">top=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t.h);</span><br><span class="line">t.index=<span class="number">1</span>;</span><br><span class="line">stac[++top]=t;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t.h);</span><br><span class="line"><span class="keyword">if</span>(t.h&gt;=stac[top].h)</span><br><span class="line">&#123;</span><br><span class="line">t.index=i;</span><br><span class="line">stac[++top]=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(t.h&lt;stac[top].h &amp;&amp; top)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(top&gt;<span class="number">1</span>) maxs=<span class="built_in">max</span>(maxs,stac[top].h*(i-stac[top<span class="number">-1</span>].index<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">else</span> maxs=<span class="built_in">max</span>(maxs,stac[top].h*(i<span class="number">-1</span>));</span><br><span class="line">top--;</span><br><span class="line">&#125; </span><br><span class="line">t.index=i;</span><br><span class="line">stac[++top]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(top)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(top&gt;<span class="number">1</span>) maxs=<span class="built_in">max</span>(maxs,stac[top].h*(n-stac[top<span class="number">-1</span>].index));</span><br><span class="line"><span class="keyword">else</span> maxs=<span class="built_in">max</span>(maxs,stac[top].h*(n));</span><br><span class="line">top--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,maxs);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-TT’s-Magic-Cat"><a class="header-anchor" href="#B-TT’s-Magic-Cat">♔</a>B TT’s Magic Cat</h2><h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3><p>Thanks to everyone’s help last week, TT finally got a cute cat. But what TT didn’t expect is that this is a magic cat.</p><p>One day, the magic cat decided to investigate TT’s ability by giving a problem to him. That is select nn cities from the world map, and a[i]a[i] represents the asset value owned by the ii-th city.</p><p>Then the magic cat will perform several operations. Each turn is to choose the city in the interval [l,r][l,r] and increase their asset value by cc. And finally, it is required to give the asset value of each city after qq operations.</p><p>Could you help TT find the answer?</p><h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3><p>The first line contains two integers n,q (1≤n,q≤2⋅1e5) — the number of cities and operations.</p><p>The second line contains elements of the sequence a: integer numbers a1,a2,…,an(−1e6≤ai≤1e6).</p><p>Then qq lines follow, each line represents an operation. The i-th line contains three integers l,r and c (1≤l≤r≤n,−1e5≤c≤1e5)for the i-th operation.</p><h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3><p>Print nn integers a1,a2,…,an one per line, and aiai should be equal to the final asset value of the i-th city.</p><h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3><h4 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4 2</span><br><span class="line">-3 6 8 4</span><br><span class="line">4 4 -2</span><br><span class="line">3 3 1</span><br></pre></td></tr></table></figure><h4 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-3 6 9 2</span><br></pre></td></tr></table></figure><h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3><p>这一题用前缀和求解即可，对于每一次更改，在标记数组b中b[l]+=c,b[r+1]-=c。然后对b数组求前缀和，最后依次输出a[i]+b[i]即可。</p><h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll n,q,l,r,a[<span class="number">200005</span>],b[<span class="number">200005</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;l,&amp;r,&amp;j);</span><br><span class="line">b[l]+=j,b[r+<span class="number">1</span>]-=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">b[i]+=b[i<span class="number">-1</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld "</span>,a[i]+b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-平衡字符串"><a class="header-anchor" href="#C-平衡字符串">♔</a>C 平衡字符串</h2><h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3><p>一个长度为 n 的字符串 s，其中仅包含 ‘Q’, ‘W’, ‘E’, ‘R’ 四种字符。</p><p>如果四种字符在字符串中出现次数均为 n/4，则其为一个平衡字符串。</p><p>现可以将 s 中连续的一段子串替换成相同长度的只包含那四个字符的任意字符串，使其变为一个平衡字符串，问替换子串的最小长度?</p><p>如果 s 已经平衡则输出0。</p><h3 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h3><p>一行字符表示给定的字符串s</p><h3 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h3><p>一个整数表示答案</p><h3 id="Examples-v2"><a class="header-anchor" href="#Examples-v2">♔</a>Examples</h3><h4 id="Input-v6"><a class="header-anchor" href="#Input-v6">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QQER</span><br></pre></td></tr></table></figure><h4 id="Output-v6"><a class="header-anchor" href="#Output-v6">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3><p>使用尺取法来解这道题，设定两个标记f1，f2。计算区间f1，f2之外的各个字母的数量sum1~4 ,取maxs=max(sum1~4)，且tot=(f2-f1)-∑（maxs-sumi）。若tot大于等于0且为4的整数倍，则当前区间可以使字符串合法，用当前区间的长度更新答案，f1++；否则f2++。处理结束之后输出最小的区间长度即可。</p><h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,f1,f2,sum[<span class="number">5</span>],minx=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,maxi,tot;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line">n=<span class="built_in">strlen</span>(a);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">'Q'</span>) sum[<span class="number">1</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">'W'</span>) sum[<span class="number">2</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">'E'</span>) sum[<span class="number">3</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">'R'</span>) sum[<span class="number">4</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">f1=<span class="number">0</span>;</span><br><span class="line">f2=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(f1&lt;n &amp;&amp; f2&lt;n)</span><br><span class="line">&#123;</span><br><span class="line">maxi=<span class="built_in">max</span>(sum[<span class="number">1</span>],sum[<span class="number">2</span>]);</span><br><span class="line">maxi=<span class="built_in">max</span>(maxi,sum[<span class="number">3</span>]);</span><br><span class="line">maxi=<span class="built_in">max</span>(maxi,sum[<span class="number">4</span>]);</span><br><span class="line">tot=f1-f2;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)</span><br><span class="line">tot=tot-(maxi-sum[i]);<span class="comment">//,printf("%d ",sum[i])</span></span><br><span class="line"><span class="comment">//printf(" %d %d %d--\n",f1,f2,tot);</span></span><br><span class="line"><span class="keyword">if</span>(tot&gt;=<span class="number">0</span> &amp;&amp; tot%<span class="number">4</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">minx=<span class="built_in">min</span>(minx,f1-f2);</span><br><span class="line">f2++;</span><br><span class="line"><span class="keyword">if</span>(a[f2]==<span class="string">'Q'</span>) sum[<span class="number">1</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[f2]==<span class="string">'W'</span>) sum[<span class="number">2</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[f2]==<span class="string">'E'</span>) sum[<span class="number">3</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[f2]==<span class="string">'R'</span>) sum[<span class="number">4</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">f1++;</span><br><span class="line"><span class="keyword">if</span>(a[f1]==<span class="string">'Q'</span>) sum[<span class="number">1</span>]--;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[f1]==<span class="string">'W'</span>) sum[<span class="number">2</span>]--;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[f1]==<span class="string">'E'</span>) sum[<span class="number">3</span>]--;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[f1]==<span class="string">'R'</span>) sum[<span class="number">4</span>]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,minx);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-滑动窗口"><a class="header-anchor" href="#D-滑动窗口">♔</a>D 滑动窗口</h2><h3 id="Problem-v4"><a class="header-anchor" href="#Problem-v4">♔</a>Problem</h3><p>ZJM 有一个长度为 n 的数列和一个大小为 k 的窗口, 窗口可以在数列上来回移动. 现在 ZJM 想知道在窗口从左往右滑的时候，每次窗口内数的最大值和最小值分别是多少. 例如：<br>数列是 [1 3 -1 -3 5 3 6 7], 其中 <em>k</em> 等于 3.</p><table><thead><tr><th>Window position</th><th>Minimum value</th><th>Maximum value</th></tr></thead><tbody><tr><td>[1 3 -1] -3 5 3 6 7</td><td>-1</td><td>3</td></tr><tr><td>1 [3 -1 -3] 5 3 6 7</td><td>-3</td><td>3</td></tr><tr><td>1 3 [-1 -3 5] 3 6 7</td><td>-3</td><td>5</td></tr><tr><td>1 3 -1 [-3 5 3] 6 7</td><td>-3</td><td>5</td></tr><tr><td>1 3 -1 -3 [5 3 6] 7</td><td>3</td><td>6</td></tr><tr><td>1 3 -1 -3 5 [3 6 7]</td><td>3</td><td>7</td></tr></tbody></table><h3 id="Input-v7"><a class="header-anchor" href="#Input-v7">♔</a>Input</h3><p>输入有两行。第一行两个整数n和k分别表示数列的长度和滑动窗口的大小，1&lt;=k&lt;=n&lt;=1000000。第二行有n个整数表示ZJM的数列。</p><h3 id="Output-v7"><a class="header-anchor" href="#Output-v7">♔</a>Output</h3><p>输出有两行。第一行输出滑动窗口在从左到右的每个位置时，滑动窗口中的最小值。第二行是最大值。</p><h3 id="Examples-v3"><a class="header-anchor" href="#Examples-v3">♔</a>Examples</h3><h4 id="Input-v8"><a class="header-anchor" href="#Input-v8">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8 3</span><br><span class="line">1 3 -1 -3 5 3 6 7</span><br></pre></td></tr></table></figure><h4 id="Output-v8"><a class="header-anchor" href="#Output-v8">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-1 -3 -3 -3 3 3</span><br><span class="line">3 3 5 5 6 7</span><br></pre></td></tr></table></figure><h3 id="解题思路-v4"><a class="header-anchor" href="#解题思路-v4">♔</a>解题思路</h3><p>我们用单调队列来解这道题，依旧定义结构体类型data来在栈中存储元素的数值即下标。对于取最小值，我们需要一个单调不减的队列对于第i个元素，我们需要从队尾开始判断，若第i个元素小于队尾元素，则将队尾元素弹出，直到第i个元素大于等于队尾元素再将第i个元素加入队列。同时对于每一次窗口的滑动，我们还要判断队列中的元素是否过时。因为队列中的元素加入队列的时间是严格递增的，故我们从队列头部开始判断，若队首元素的下标小于等于i-k，则队首元素出队，直到队首元素大于i-k为止。此时，队首元素即为当前窗口内的最小元素。</p><p>求最大元素的过程与上面类似，只不过是改为使用单调不增的队列。</p><h3 id="代码-v4"><a class="header-anchor" href="#代码-v4">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,i;</span><br><span class="line">&#125;q[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> n,k,head,tail;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(tail&gt;head &amp;&amp; a[i]&lt;q[tail<span class="number">-1</span>].x) tail--;</span><br><span class="line">q[tail].x=a[i],q[tail].i=i;</span><br><span class="line">tail++;</span><br><span class="line"><span class="keyword">while</span>(head&lt;tail &amp;&amp; q[head].i&lt;=i-k) head++;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=k) <span class="built_in">printf</span>(<span class="string">"%d "</span>,q[head].x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">head=<span class="number">0</span>,tail=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(tail&gt;head &amp;&amp; a[i]&gt;q[tail<span class="number">-1</span>].x) tail--;</span><br><span class="line">q[tail].x=a[i],q[tail].i=i;</span><br><span class="line">tail++;</span><br><span class="line"><span class="keyword">while</span>(head&lt;tail &amp;&amp; q[head].i&lt;=i-k) head++;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=k) <span class="built_in">printf</span>(<span class="string">"%d "</span>,q[head].x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;【作业向】程序设计思维与实践 Week5 作业&lt;/h1&gt;
    
    </summary>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>CCF CSP 201512-3 画图</title>
    <link href="http://stbyu.github.io/blog/2020/03/17/csp201512-3/"/>
    <id>http://stbyu.github.io/blog/2020/03/17/csp201512-3/</id>
    <published>2020-03-16T16:00:00.000Z</published>
    <updated>2020-03-17T10:46:28.053Z</updated>
    
    <content type="html"><![CDATA[<h1>CCF CSP 201512-4 画图<a id="more"></a></h1><h2 id="题目"><a class="header-anchor" href="#题目">♔</a>题目</h2><p><img src="/blog/2020/03/17/csp201512-3/timu.png" alt></p><h2 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h2><p>这一题是比较简单的模拟题，只要按照题目要求读入然后进行处理即可。线段部分要注意当纵坐标相等时是横线，当横坐标相等时是竖线，然后注意处理线段相交的地方改为‘+’（‘+’也改为‘+’或跳过）。填充部分用bfs进行遍历，然后遇到线段和边界停止。</p><p>虽然简单，但还是有坑点在的。首先是题目中给定的坐标与日常使用数组下标的习惯不符，于是我们对其进行一个转化x’=n-y,y’=x+1。然后要注意**坐标不要写反！**我就是因为这个wa到怀疑人生（不过居然填充字符之前把坐标写反还能拿到90分）</p><p><img src="/blog/2020/03/17/csp201512-3/wa.png" alt="image-20200317184001075"></p><p>然后在差错的过程中还遇到几个坑点，一个是dfs可能会爆栈，另一个是当一条线段经过一条线段端点时不要将‘+’修改掉。注意以上几点应该就可以解决这个问题了。</p><h2 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> tu[<span class="number">105</span>][<span class="number">105</span>],flag;</span><br><span class="line"><span class="keyword">int</span> fx[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> m,n,t;</span><br><span class="line"><span class="keyword">int</span> xx1,xx2,yy1,yy2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;yy1,&amp;xx1,&amp;yy2,&amp;xx2);</span><br><span class="line">xx1=n-xx1;</span><br><span class="line">xx2=n-xx2;</span><br><span class="line">yy1++;</span><br><span class="line">yy2++;</span><br><span class="line"><span class="comment">//printf("-%d %d %d %d-\n",xx1,yy1,xx2,yy2);</span></span><br><span class="line"><span class="keyword">if</span>(xx1==xx2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(yy1&gt;yy2) swap(yy1,yy2);</span><br><span class="line"><span class="keyword">for</span>(i=yy1;i&lt;=yy2;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tu[xx1][i]==<span class="string">'+'</span> || tu[xx1][i]==<span class="string">'|'</span>) tu[xx1][i]=<span class="string">'+'</span>;</span><br><span class="line"><span class="keyword">else</span> tu[xx1][i]=<span class="string">'-'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(yy1==yy2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(xx1&gt;xx2) swap(xx1,xx2);</span><br><span class="line"><span class="keyword">for</span>(i=xx1;i&lt;=xx2;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tu[i][yy1]==<span class="string">'+'</span> || tu[i][yy1]==<span class="string">'-'</span>) tu[i][yy1]=<span class="string">'+'</span>;</span><br><span class="line"><span class="keyword">else</span> tu[i][yy1]=<span class="string">'|'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x+fx[i][<span class="number">0</span>]&gt;n || x+fx[i][<span class="number">0</span>]&lt;<span class="number">1</span> || y+fx[i][<span class="number">1</span>]&gt;m || y+fx[i][<span class="number">1</span>]&lt;<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(tu[x+fx[i][<span class="number">0</span>]][y+fx[i][<span class="number">1</span>]]==flag || tu[x+fx[i][<span class="number">0</span>]][y+fx[i][<span class="number">1</span>]]==<span class="string">'-'</span> || tu[x+fx[i][<span class="number">0</span>]][y+fx[i][<span class="number">1</span>]]==<span class="string">'|'</span> || tu[x+fx[i][<span class="number">0</span>]][y+fx[i][<span class="number">1</span>]]==<span class="string">'+'</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//visit[x+fx[i][0]][y+fx[i][1]]=1;</span></span><br><span class="line">tu[x+fx[i][<span class="number">0</span>]][y+fx[i][<span class="number">1</span>]]=flag;</span><br><span class="line">dfs(x+fx[i][<span class="number">0</span>],y+fx[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line">q.push(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x,y));</span><br><span class="line"><span class="keyword">int</span> xx,yy;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">xx=q.front().first;</span><br><span class="line">yy=q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(xx+fx[i][<span class="number">0</span>]&gt;n || xx+fx[i][<span class="number">0</span>]&lt;<span class="number">1</span> || yy+fx[i][<span class="number">1</span>]&gt;m || yy+fx[i][<span class="number">1</span>]&lt;<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//if(visit[xx+fx[i][0]][yy+fx[i][1]] || tu[xx+fx[i][0]][yy+fx[i][1]]=='-' || tu[xx+fx[i][0]][yy+fx[i][1]]=='|' || tu[xx+fx[i][0]][yy+fx[i][1]]=='+') continue;</span></span><br><span class="line"><span class="comment">//visit[xx+fx[i][0]][yy+fx[i][1]]=1;</span></span><br><span class="line">tu[xx+fx[i][<span class="number">0</span>]][yy+fx[i][<span class="number">1</span>]]=flag;</span><br><span class="line">q.push(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(xx+fx[i][<span class="number">0</span>],yy+fx[i][<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;m,&amp;n,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++) tu[i][j]=<span class="string">'.'</span>;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=t;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf("----\n");</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;j);</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">xd();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//memset(visit,0,sizeof(visit));</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %c"</span>,&amp;yy1,&amp;xx1,&amp;flag);</span><br><span class="line">xx1=n-xx1;</span><br><span class="line">yy1++;</span><br><span class="line">tu[xx1][yy1]=flag;</span><br><span class="line"><span class="comment">//visit[xx1][yy1]=1;</span></span><br><span class="line">dfs(xx1,yy1);</span><br><span class="line"><span class="comment">//bfs(xx1,yy1);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for(i=1;i&lt;=max(m,n);i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//for(j=1;j&lt;=max(m,n);j++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if(tu[i][j]==' ') printf(".");</span></span><br><span class="line"><span class="comment">//else printf("%c",tu[i][j]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf("\n");</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,tu[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i!=n) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;CCF CSP 201512-4 画图&lt;/h1&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://stbyu.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/categories/%E7%AC%94%E8%AE%B0/csp/"/>
    
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
      <category term="笔记" scheme="http://stbyu.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="bfs" scheme="http://stbyu.github.io/blog/tags/bfs/"/>
    
      <category term="模拟" scheme="http://stbyu.github.io/blog/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>【作业向】程序设计思维与实践 Week3 作业</title>
    <link href="http://stbyu.github.io/blog/2020/03/17/week3hw/"/>
    <id>http://stbyu.github.io/blog/2020/03/17/week3hw/</id>
    <published>2020-03-16T16:00:00.000Z</published>
    <updated>2020-03-17T10:46:50.421Z</updated>
    
    <content type="html"><![CDATA[<h1>【作业向】程序设计思维与实践 Week3 作业<a id="more"></a></h1><h2 id="A-选数问题"><a class="header-anchor" href="#A-选数问题">♔</a>A 选数问题</h2><h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3><p>Given nn positive numbers, ZJM can select exactly KK of them that sums to SS. Now ZJM wonders how many ways to get it!</p><h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3><p>The first line, an integer T&lt;=100T&lt;=100, indicates the number of test cases. For each case, there are two lines. The first line, three integers indicate nn, KK and SS. The second line, nn integers indicate the positive numbers.</p><h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3><p>For each case, an integer indicate the answer in a independent line.</p><h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3><h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">10 3 10</span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br></pre></td></tr></table></figure><h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="Note"><a class="header-anchor" href="#Note">♔</a>Note</h3><p>Remember that k&lt;=n&lt;=16 and all numbers can be stored in 32-bit integer</p><h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3><p>由题意得，本题可以使用dfs的方式枚举，dfs有三个参数x,p,sum；x表示当前应该选第x个数，p表示当前判断到了第p个数，sum表示当前选中的前x-1个数的和。在每次dfs时，首先判断如果p&gt;s表示已经选择了s个数，则判断sum的值是否等于k，如果等于则方案数cnt加一；当p&lt;=s时，从第p个数到第n个数开始执行dfs(x+1,i+1,sum+a[i])。当dfs结束后输出cnt即可。</p><h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,s,k,cnt;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p,<span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sum==k) cnt++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum&gt;=k) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=p;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">dfs(x+<span class="number">1</span>,i+<span class="number">1</span>,sum+a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;s,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-区间选点"><a class="header-anchor" href="#B-区间选点">♔</a>B 区间选点</h2><h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3><p>数轴上有 n 个闭区间 [a_i, b_i]。取尽量少的点，使得每个区间内都至少有一个点（不同区间内含的点可以是同一个）</p><h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3><p>第一行1个整数N（N&lt;=100）<br>第2~N+1行，每行两个整数a,b（a,b&lt;=100）</p><h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3><p>一个整数，代表选点的数目</p><h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3><h4 id="Input-1"><a class="header-anchor" href="#Input-1">♔</a>Input 1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1 5</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure><h4 id="Output-1"><a class="header-anchor" href="#Output-1">♔</a>Output 1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="Input-2"><a class="header-anchor" href="#Input-2">♔</a>Input 2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 3</span><br><span class="line">2 5</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure><h4 id="Output-2"><a class="header-anchor" href="#Output-2">♔</a>Output 2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3><p>由题意可知，这是一道贪心题，我们需要用最少的点来覆盖尽可能多的点。</p><p>那么我们的贪心策略是将区间按右端点升序排序，右端点相同的按左端点降序排序（其实没必要），然后从第一个区间开始，选择该区间的右端点，然后遍历剩下的节点，若遇到未被当前节点选择的区间，则选择该区间的右端点，节点数加一并将当前节点设置为该点，继续遍历，直到遍历完所有的节点为止。</p><h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;<span class="built_in">line</span>[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> n,cnt,pre;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wly</span><span class="params">(data a,data b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.y&lt;b.y) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a.y==b.y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;<span class="built_in">line</span>[i].x,&amp;<span class="built_in">line</span>[i].y);</span><br><span class="line">sort(<span class="built_in">line</span>+<span class="number">1</span>,<span class="built_in">line</span>+<span class="number">1</span>+n,wly);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(pre&gt;=<span class="built_in">line</span>[i].x &amp;&amp; pre&lt;=<span class="built_in">line</span>[i].y) <span class="keyword">continue</span>;</span><br><span class="line">cnt++;</span><br><span class="line">pre=<span class="built_in">line</span>[i].y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,cnt);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-区间覆盖"><a class="header-anchor" href="#C-区间覆盖">♔</a>C 区间覆盖</h2><h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3><p>数轴上有 n (1&lt;=n&lt;=25000)个闭区间 [ai, bi]，选择尽量少的区间覆盖一条指定线段 [1, t]（ 1&lt;=t&lt;=1,000,000）。<br>覆盖整点，即(1,2)+(3,4)可以覆盖(1,4)。<br>不可能办到输出-1</p><h3 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h3><p>第一行：N和T<br>第二行至N+1行: 每一行一个闭区间。</p><h3 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h3><p>选择的区间的数目，不可能办到输出-1</p><h3 id="Examples-v2"><a class="header-anchor" href="#Examples-v2">♔</a>Examples</h3><h4 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 10</span><br><span class="line">1 7</span><br><span class="line">3 6</span><br><span class="line">6 10</span><br></pre></td></tr></table></figure><h4 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3><p>这一题也是一个很经典的区间问题的贪心题目，贪心的策略是首先读入的时候排除掉完全在区间 [1, t]之外的区间，然后将剩下的区间按照左端点进行升序排序。先将所选择的区间能够覆盖道的最远点x设为0，然后从第一个区间开始，如果该区间的左端点小于等于x+1，那么选择该区间，并当区间的左端点小于等于x+1时进行循环，求出被覆盖的区间能够覆盖到的最远点maxx，选择的区间数cnt+1，并将x设为maxx然后继续遍历各个区间。当循环结束后判断x若大于等于T则输出cnt，否则不能覆盖 [1, t]，输出-1。</p><p>ps：这一题wa了好几发，坑点在于最开始没有说是覆盖离散的点，意识到这个问题之后就A了</p><h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125; <span class="built_in">line</span>[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> n,cnt=<span class="number">0</span>,bac,maxn,T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wly</span><span class="params">(data a,data b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;T)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;<span class="built_in">line</span>[i].x,&amp;<span class="built_in">line</span>[i].y);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">line</span>[i].y&lt;<span class="number">1</span> || <span class="built_in">line</span>[i].x&gt;T) i--,n--;</span><br><span class="line">&#125;</span><br><span class="line">sort(<span class="built_in">line</span>+<span class="number">1</span>,<span class="built_in">line</span>+<span class="number">1</span>+n,wly);</span><br><span class="line">bac=<span class="number">0</span>;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">line</span>[i].x&lt;=bac+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">maxn=<span class="built_in">line</span>[i].y;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">line</span>[i].x&lt;=bac+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">maxn=<span class="built_in">max</span>(maxn,<span class="built_in">line</span>[i].y);</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(i&gt;n) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i--;</span><br><span class="line">bac=maxn;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(bac&gt;=T) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(bac&gt;=T) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;【作业向】程序设计思维与实践 Week3 作业&lt;/h1&gt;
    
    </summary>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/categories/%E4%BD%9C%E4%B8%9A/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="作业" scheme="http://stbyu.github.io/blog/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="程序设计思维" scheme="http://stbyu.github.io/blog/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    
      <category term="csp" scheme="http://stbyu.github.io/blog/tags/csp/"/>
    
  </entry>
  
</feed>
