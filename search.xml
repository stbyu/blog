<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CCF CSP 201409-4 最优配餐</title>
    <url>/blog/2020/02/11/csp201409-4/</url>
    <content><![CDATA[<h1 id="CCF-CSP-201409-4-最优配餐"><a href="#CCF-CSP-201409-4-最优配餐" class="headerlink" title="CCF CSP 201409-4 最优配餐"></a>CCF CSP 201409-4 最优配餐</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>　　栋栋最近开了一家餐饮连锁店，提供外卖服务。随着连锁店越来越多，怎么合理的给客户送餐成为了一个急需解决的问题。<a id="more"></a><br>　　栋栋的连锁店所在的区域可以看成是一个n×n的方格图（如下图所示），方格的格点上的位置上可能包含栋栋的分店（绿色标注）或者客户（蓝色标注），有一些格点是不能经过的（红色标注）。</p>
<p><img src="http://118.190.20.162/RequireFile.do?fid=383qHJjQ" alt="示例图片"></p>
<p>　　方格图中的线表示可以行走的道路，相邻两个格点的距离为1。栋栋要送餐必须走可以行走的道路，而且不能经过红色标注的点。</p>
<p>　　送餐的主要成本体现在路上所花的时间，每一份餐每走一个单位的距离需要花费1块钱。每个客户的需求都可以由栋栋的任意分店配送，每个分店没有配送总量的限制。<br>　　现在你得到了栋栋的客户的需求，请问在最优的送餐方式下，送这些餐需要花费多大的成本。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>　　输入的第一行包含四个整数n, m, k, d，分别表示方格图的大小、栋栋的分店数量、客户的数量，以及不能经过的点的数量。<br>　　接下来m行，每行两个整数xi, yi，表示栋栋的一个分店在方格图中的横坐标和纵坐标。<br>　　接下来k行，每行三个整数xi, yi, ci，分别表示每个客户在方格图中的横坐标、纵坐标和订餐的量。（注意，可能有多个客户在方格图中的同一个位置）<br>　　接下来d行，每行两个整数，分别表示每个不能经过的点的横坐标和纵坐标。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>　　输出一个整数，表示最优送餐方式下所需要花费的成本。</p>
<h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><p>10 2 3 3<br>1 1<br>8 8<br>1 5 1<br>2 3 3<br>6 7 2<br>1 2<br>2 2<br>6 8</p>
<h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><p>29</p>
<h2 id="评测用例规模与约定"><a href="#评测用例规模与约定" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h2><p>　　前30%的评测用例满足：1&lt;=n &lt;=20。<br>　　前60%的评测用例满足：1&lt;=n&lt;=100。<br>　　所有评测用例都满足：1&lt;=n&lt;=1000，1&lt;=m, k, d&lt;=n^2。可能有多个客户在同一个格点上。每个客户的订餐量不超过1000，每个客户所需要的餐都能被送到。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>​        根据题意可知，我们要求的是送餐需要花费的最小成本，这个问题可以转化为求从各个分店到图上任意一点的最短路。在此我们使用bfs的方法。最开始我采用的是从每一个分店开始，对这个图进行bfs的方法，这个方法在分店数目过多时会浪费大量时间，以至于TLE才得到了80分。然后对这个算法进行优化，多个起点同时对这个图进行bfs，实现方法也很简单，只要在开始前将所有分店都加入到队列中即可。</p>
<p>​        （又及，感觉这个写的好像spfa啊</p>
<p>​        （又及的又及，十年oi一场空，不开long long见祖宗</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">po</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> x,y,sum;</span><br><span class="line">&#125;;</span><br><span class="line">po fd[<span class="number">1000005</span>],kh[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> tu[<span class="number">1005</span>][<span class="number">1005</span>],dis[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> fx[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,k,d;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="built_in">queue</span>&lt;po&gt; q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		dis[fd[i].x][fd[i].y]=<span class="number">0</span>;</span><br><span class="line">		tu[fd[i].x][fd[i].y]=<span class="number">1</span>;</span><br><span class="line">		po t;</span><br><span class="line">		t.x=fd[i].x,t.y=fd[i].y;</span><br><span class="line">		q.push(t);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(!q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		po u=q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		tu[u.x][u.y]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(u.x+fx[i][<span class="number">0</span>]&lt;=<span class="number">0</span> || u.x+fx[i][<span class="number">0</span>]&gt;n || u.y+fx[i][<span class="number">1</span>]&lt;=<span class="number">0</span> || u.y+fx[i][<span class="number">1</span>]&gt;n || tu[u.x+fx[i][<span class="number">0</span>]][u.y+fx[i][<span class="number">1</span>]]==<span class="number">-1</span>)</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(dis[u.x+fx[i][<span class="number">0</span>]][u.y+fx[i][<span class="number">1</span>]]&gt;dis[u.x][u.y]+<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				dis[u.x+fx[i][<span class="number">0</span>]][u.y+fx[i][<span class="number">1</span>]]=dis[u.x][u.y]+<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span>(!tu[u.x+fx[i][<span class="number">0</span>]][u.y+fx[i][<span class="number">1</span>]])</span><br><span class="line">				&#123;</span><br><span class="line">					po v;</span><br><span class="line">					v.x=u.x+fx[i][<span class="number">0</span>];</span><br><span class="line">					v.y=u.y+fx[i][<span class="number">1</span>];</span><br><span class="line">					q.push(v);</span><br><span class="line">					tu[u.x+fx[i][<span class="number">0</span>]][u.y+fx[i][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;k,&amp;d);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++) dis[i][j]=<span class="number">0x7fffffff</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;fd[i].x,&amp;fd[i].y);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=k;i++) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;kh[i].x,&amp;kh[i].y,&amp;kh[i].sum);</span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=d;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">		tu[x][y]=<span class="number">-1</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	bfs();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans+=(ll)(dis[kh[i].x][kh[i].y]*kh[i].sum);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
        <category>csp</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>csp</tag>
        <tag>图论</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>CCF CSP 201405-4 高速公路</title>
    <url>/blog/2020/02/11/csp201509-4/</url>
    <content><![CDATA[<h1 id="CCF-CSP-201509-4-高速公路"><a href="#CCF-CSP-201509-4-高速公路" class="headerlink" title="CCF CSP 201509-4 高速公路"></a>CCF CSP 201509-4 高速公路</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>　　某国有<em>n</em>个城市，为了使得城市间的交通更便利，该国国王打算在城市之间修一些高速公路，由于经费限制，国王打算第一阶段先在部分城市之间修一些单向的高速公路。<br>　　现在，大臣们帮国王拟了一个修高速公路的计划。看了计划后，国王发现，有些城市之间可以通过高速公路直接（不经过其他城市）或间接（经过一个或多个其他城市）到达，而有的却不能。如果城市A可以通过高速公路到达城市B，而且城市B也可以通过高速公路到达城市A，则这两个城市被称为便利城市对。<br>　　国王想知道，在大臣们给他的计划中，有多少个便利城市对。<a id="more"></a></p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>　　输入的第一行包含两个整数<em>n</em>, <em>m</em>，分别表示城市和单向高速公路的数量。<br>　　接下来<em>m</em>行，每行两个整数<em>a</em>, <em>b</em>，表示城市<em>a</em>有一条单向的高速公路连向城市<em>b</em>。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>　　输出一行，包含一个整数，表示便利城市对的数量。</p>
<h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><p>5 5<br>1 2<br>2 3<br>3 4<br>4 2<br>3 5</p>
<h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><p>3</p>
<h2 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h2><p><img src="http://118.190.20.162/RequireFile.do?fid=4HG9GgbF" alt="img"></p>
<p>​        城市间的连接如图所示。有3个便利城市对，它们分别是(2, 3), (2, 4), (3, 4)，请注意(2, 3)和(3, 2)看成同一个便利城市对。</p>
<h2 id="评测用例规模与约定"><a href="#评测用例规模与约定" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h2><p>　　前30%的评测用例满足1 ≤ <em>n</em> ≤ 100, 1 ≤ <em>m</em> ≤ 1000；<br>　　前60%的评测用例满足1 ≤ <em>n</em> ≤ 1000, 1 ≤ <em>m</em> ≤ 10000；<br>　　所有评测用例满足1 ≤ <em>n</em> ≤ 10000, 1 ≤ <em>m</em> ≤ 100000。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>​        根据题意可知，我们只要分别求出图中各个连通分量所包含的节点数目，即可分别计算出便利城市对数，然后将各个连通分量的便利城市对数相加就可以了。题目不难，只要套个Tarjan板子就可以做，但迷惑的是我的板子好像是错的？？？我的模板是这么写的，只能得80分</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dfn[v] &amp;&amp; dfn[v]&lt;low[u]) low[u]=dfn[v];</span><br></pre></td></tr></table></figure>

<p>​        后来找的板子是这样的，可以a掉</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(visit[v] &amp;&amp; dfn[v]&lt;low[u]) low[u]=dfn[v];</span><br></pre></td></tr></table></figure>

<p>​        </p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dfn[<span class="number">100005</span>],low[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> m,n,times;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">stack</span>[<span class="number">100005</span>],visit[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> top,cnt,sum[<span class="number">100005</span>],icnt,isum[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> adj[<span class="number">100005</span>],nxt[<span class="number">200005</span>],to[<span class="number">200005</span>],ecnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adde</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	nxt[++ecnt]=adj[x],adj[x]=ecnt,to[ecnt]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	visit[u]=<span class="number">1</span>,<span class="built_in">stack</span>[++top]=u;</span><br><span class="line">	dfn[u]=low[u]=++times;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=adj[u];i;i=nxt[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=to[i];</span><br><span class="line">		<span class="keyword">if</span>(!dfn[v])</span><br><span class="line">		&#123;</span><br><span class="line">			Tarjan(v);</span><br><span class="line">			low[u]=min(low[u],low[v]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(visit[v] &amp;&amp; dfn[v]&lt;low[u]) low[u]=dfn[v];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dfn[u]==low[u])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v;</span><br><span class="line">		icnt++; </span><br><span class="line">		visit[u]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(v=<span class="built_in">stack</span>[top--],isum[icnt]++,v!=u) visit[v]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">		adde(a,b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">		<span class="keyword">if</span>(!dfn[i]) Tarjan(i);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=icnt;i++) </span><br><span class="line">		ans+=isum[i]*(isum[i]<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
        <category>csp</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>csp</tag>
        <tag>图论</tag>
        <tag>Tarjan</tag>
      </tags>
  </entry>
  <entry>
    <title>Python——正则表达式(中)</title>
    <url>/blog/2019/08/19/python-re%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<h1 id="正则表达式（中）"><a href="#正则表达式（中）" class="headerlink" title="正则表达式（中）"></a>正则表达式（中）</h1><h2 id="re库的基本使用"><a href="#re库的基本使用" class="headerlink" title="re库的基本使用"></a>re库的基本使用</h2><p>re库是python的标准库，不需要进行额外的安装，主要用于字符串匹配。调用方法也特别简单，只需要</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>re库采用raw string类型来表示正则表达式，表示为：r’text’。相较于string类型，raw string就是不包含转义符的字符串，当然也可以用string类型来 表示正则表达式，但是特别的繁琐。</p>
<p>Re库主要功能函数</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>re.search()</td>
<td>在一 个 字符串中搜索匹配正则表达式的第一个位置， 返回match对象</td>
</tr>
<tr>
<td>re.match()</td>
<td>从一个字符串的开始位置起匹配正则表达式，返回match对象</td>
</tr>
<tr>
<td>re.findall()</td>
<td>搜索字符串，以列表类型返回全部能匹配的子串</td>
</tr>
<tr>
<td>re.splito()</td>
<td>将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td>
</tr>
<tr>
<td>re.finditer()</td>
<td>搜索字符串，返回一个匹配结果的选代类型，每个选代元素是match对象</td>
</tr>
<tr>
<td>re.sub()</td>
<td>在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Python</category>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Python——正则表达式(上)</title>
    <url>/blog/2019/08/18/python-re/</url>
    <content><![CDATA[<h1 id="正则表达式（上）"><a href="#正则表达式（上）" class="headerlink" title="正则表达式（上）"></a>正则表达式（上）</h1><h2 id="零-什么是正则表达式"><a href="#零-什么是正则表达式" class="headerlink" title="零 什么是正则表达式"></a>零 什么是正则表达式</h2><p>正则表达式（<strong>r</strong>egular <strong>e</strong>xpression，简称<strong>RE</strong>），是用来简洁表达一组字符串的表达式。这种针对字符串表达“简洁”和“特征”思想的工具可以非常简单的表达一组字符串的特征，起到了“一行胜千言”的效果。在诸如爬虫等需要对字符串进行处理的地方应用广泛。<a id="more"></a></p>
<h2 id="壹-正则表达式的作用"><a href="#壹-正则表达式的作用" class="headerlink" title="壹 正则表达式的作用"></a>壹 正则表达式的作用</h2><ul>
<li>表达文本类型的特征</li>
<li>同时查找或替换一组字符串</li>
<li>匹配字符串的全部或部分</li>
</ul>
<h2 id="贰-常用操作符"><a href="#贰-常用操作符" class="headerlink" title="贰 常用操作符"></a>贰 常用操作符</h2><p>因为正则表达式由字符和操作符构成，故应了解常用操作符及其用法。</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>表示任何单个字符</td>
<td></td>
</tr>
<tr>
<td>[]</td>
<td>字符集，对单个字符给出取值范围</td>
<td>[abc]表示a、b、c，[a-z]表示a到z任意单个字符</td>
</tr>
<tr>
<td>[^ ]</td>
<td>非字符集，对单个字符给出排除范围</td>
<td>[^abc]表示非a或b或c的单个字符</td>
</tr>
<tr>
<td>*</td>
<td>前一个字符0次或无限次扩展</td>
<td>abc*表示ab、abc、abcc、abccc等</td>
</tr>
<tr>
<td>+</td>
<td>前一个字符1次或无限次扩展</td>
<td>abc+表示abc、abcc、abccc等</td>
</tr>
<tr>
<td>?</td>
<td>前一个字符0次或1次扩展</td>
<td>abc?表示ab、abc等</td>
</tr>
<tr>
<td>&#124;</td>
<td>左右表达式任意一个</td>
<td>abc&#124;def表示abc或def</td>
</tr>
<tr>
<td>{m}</td>
<td>扩展前一个字符m次</td>
<td>ab{2}表示abbc</td>
</tr>
<tr>
<td>{m,n}</td>
<td>扩展前一个字符m到n次（含n）</td>
<td>ab{1,2}表示abc、abbc</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串开头</td>
<td></td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串结尾</td>
<td></td>
</tr>
<tr>
<td>()</td>
<td>分组标记（内部只能使用&#124;操作符）</td>
<td></td>
</tr>
<tr>
<td>\d</td>
<td>数字，等价于[0-9]</td>
<td></td>
</tr>
<tr>
<td>\w</td>
<td>单词字符，等价于[A-Za-z0-9_]</td>
<td></td>
</tr>
</tbody></table>
<h2 id="叁-经典正则语法实例"><a href="#叁-经典正则语法实例" class="headerlink" title="叁 经典正则语法实例"></a>叁 经典正则语法实例</h2><p>下面看几个实例（比较简单或前面已经出现过的就不再赘述）</p>
<table>
<thead>
<tr>
<th>正则表达式</th>
<th>对应字符串</th>
</tr>
</thead>
<tbody><tr>
<td>^[A-Za-z]\w{0,31}$</td>
<td>合法的变量</td>
</tr>
<tr>
<td>[\u4e00-\u9fa5]</td>
<td>中文字符</td>
</tr>
<tr>
<td>(([1-9]?\d&#124;1\d{2}&#124;2[0-4]\d&#124;25[0-5]).){3}(([1-9]?\d&#124;1\d{2}&#124;2[0-4]\d&#124;25[0-5]).)</td>
<td>ip地址</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Python</category>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫——requests库入门（上）</title>
    <url>/blog/2019/08/17/pypc1/</url>
    <content><![CDATA[<h1 id="requests库入门（上）"><a href="#requests库入门（上）" class="headerlink" title="requests库入门（上）"></a>requests库入门（上）</h1><h2 id="零-前言"><a href="#零-前言" class="headerlink" title="零 前言"></a>零 前言</h2><p>本系列是pytho爬虫的学习笔记，根据<a href="https://www.icourse163.org/course/BIT-1001870001" target="_blank" rel="noopener">北京理工大学 Python网络爬虫与信息提取mooc</a>整理。本文主要阐述了requests库的基本知识以及爬取页面的通用框架。<a id="more"></a></p>
<h2 id="壹-requests库的安装"><a href="#壹-requests库的安装" class="headerlink" title="壹 requests库的安装"></a>壹 requests库的安装</h2><p><strong>pip是个好东西</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure>

<h2 id="贰-requests库中的方法"><a href="#贰-requests库中的方法" class="headerlink" title="贰 requests库中的方法"></a>贰 requests库中的方法</h2><h3 id="0-七种方法："><a href="#0-七种方法：" class="headerlink" title="0. 七种方法："></a>0. 七种方法：</h3><ol>
<li>requests.request()</li>
<li>requests.get()</li>
<li>requests.head()</li>
<li>requests.post()</li>
<li>requests.put()</li>
<li>requests.patch()</li>
<li>requests.delete()</li>
</ol>
<p>   <strong>所有方法本质上都是Requests方法</strong></p>
<h3 id="1-get（）方法"><a href="#1-get（）方法" class="headerlink" title="1. get（）方法"></a>1. get（）方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r=requests.get(url,params=<span class="literal">None</span>,**kwargs)</span><br><span class="line"><span class="comment">#获得网页</span></span><br><span class="line"><span class="comment">#(第一个参数必选，第二个第三个可不选)</span></span><br></pre></td></tr></table></figure>

<h2 id="叁-requests库中两个重要对象"><a href="#叁-requests库中两个重要对象" class="headerlink" title="叁 requests库中两个重要对象"></a>叁 requests库中两个重要对象</h2><h3 id="0-response对象及request对象"><a href="#0-response对象及request对象" class="headerlink" title="0.response对象及request对象"></a>0.response对象及request对象</h3><p>在</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r=requests.get()</span><br></pre></td></tr></table></figure>
<p>中，等号前的部分，称为response对象（其中包含服务器返回的所有信息，也包含request请求的所有信息）；等号后的部分称为request对象。</p>
<h3 id="1-Response对象的属性"><a href="#1-Response对象的属性" class="headerlink" title="1. Response对象的属性"></a>1. Response对象的属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>r.status_code</td>
<td>HTTP请求返回的状态，200成功，404失败</td>
</tr>
<tr>
<td>r.text</td>
<td>HTTP响应内容的字符串形式，即url的页面内容</td>
</tr>
<tr>
<td>r.encoding</td>
<td>从HTTP header中猜测的响应内容的编码方式</td>
</tr>
<tr>
<td>r.apparent_encoding</td>
<td>从内容分析出的响应内容编码方式（备选编码方式）</td>
</tr>
<tr>
<td>r.content</td>
<td>HTTP响应内容的二进制形式</td>
</tr>
</tbody></table>
<h2 id="肆-requests库的异常"><a href="#肆-requests库的异常" class="headerlink" title="肆 requests库的异常"></a>肆 requests库的异常</h2><table>
<thead>
<tr>
<th>异常</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>requests.ConnectionError</td>
<td>网络连接错误异常，如DNS查询失败、拒绝连接等</td>
</tr>
<tr>
<td>requests.HTTPError</td>
<td>HTTP错误异常</td>
</tr>
<tr>
<td>requests.URLRequired</td>
<td>URL缺失异常</td>
</tr>
<tr>
<td>requests.TooManyRedirects</td>
<td>超过最大重定向次数，产生重定向异常</td>
</tr>
<tr>
<td>requests.ConnectionTimeout</td>
<td>连接远程服务器超时异常</td>
</tr>
<tr>
<td>requests.Timeout</td>
<td>请求URL超时，产生超时异常</td>
</tr>
<tr>
<td>r.raise_for_statues()</td>
<td>如果不是200，产生异常 requests.HTTPError</td>
</tr>
</tbody></table>
<h2 id="伍-爬取页面通用框架"><a href="#伍-爬取页面通用框架" class="headerlink" title="伍 爬取页面通用框架"></a>伍 爬取页面通用框架</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span></span></span><br><span class="line"><span class="function">   <span class="title">try</span>:</span></span><br><span class="line">      r=requests.get(url)</span><br><span class="line">      r.raise_for_statues() <span class="comment">#如果状态码不是200，产生HTTPError异常</span></span><br><span class="line">      r.encoding=r.apparent_encoding <span class="comment">#替换编码方式</span></span><br><span class="line">      <span class="keyword">return</span> r.text</span><br><span class="line">   expect:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Error"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">   url=<span class="string">"http://www.baidu.com"</span></span><br><span class="line">   print(getHTMLText(url))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
        <category>Python</category>
        <category>爬虫</category>
        <category>requests库</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>requests库</tag>
      </tags>
  </entry>
  <entry>
    <title>重新开始</title>
    <url>/blog/2019/08/13/restart/</url>
    <content><![CDATA[<h1 id="如题"><a href="#如题" class="headerlink" title="如题"></a>如题</h1><a id="more"></a>]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
</search>
