<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python——正则表达式(中)</title>
    <url>/blog/2019/08/19/python-re%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<h1 id="正则表达式（中）"><a href="#正则表达式（中）" class="headerlink" title="正则表达式（中）"></a>正则表达式（中）</h1><h2 id="re库的基本使用"><a href="#re库的基本使用" class="headerlink" title="re库的基本使用"></a>re库的基本使用</h2><p>re库是python的标准库，不需要进行额外的安装，主要用于字符串匹配。调用方法也特别简单，只需要</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>re库采用raw string类型来表示正则表达式，表示为：r’text’。相较于string类型，raw string就是不包含转义符的字符串，当然也可以用string类型来 表示正则表达式，但是特别的繁琐。</p>
<p>Re库主要功能函数</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>re.search()</td>
<td>在一 个 字符串中搜索匹配正则表达式的第一个位置， 返回match对象</td>
</tr>
<tr>
<td>re.match()</td>
<td>从一个字符串的开始位置起匹配正则表达式，返回match对象</td>
</tr>
<tr>
<td>re.findall()</td>
<td>搜索字符串，以列表类型返回全部能匹配的子串</td>
</tr>
<tr>
<td>re.splito()</td>
<td>将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td>
</tr>
<tr>
<td>re.finditer()</td>
<td>搜索字符串，返回一个匹配结果的选代类型，每个选代元素是match对象</td>
</tr>
<tr>
<td>re.sub()</td>
<td>在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Python</category>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Python——正则表达式(上)</title>
    <url>/blog/2019/08/18/python-re/</url>
    <content><![CDATA[<h1 id="正则表达式（上）"><a href="#正则表达式（上）" class="headerlink" title="正则表达式（上）"></a>正则表达式（上）</h1><h2 id="零-什么是正则表达式"><a href="#零-什么是正则表达式" class="headerlink" title="零 什么是正则表达式"></a>零 什么是正则表达式</h2><p>正则表达式（<strong>r</strong>egular <strong>e</strong>xpression，简称<strong>RE</strong>），是用来简洁表达一组字符串的表达式。这种针对字符串表达“简洁”和“特征”思想的工具可以非常简单的表达一组字符串的特征，起到了“一行胜千言”的效果。在诸如爬虫等需要对字符串进行处理的地方应用广泛。<a id="more"></a></p>
<h2 id="壹-正则表达式的作用"><a href="#壹-正则表达式的作用" class="headerlink" title="壹 正则表达式的作用"></a>壹 正则表达式的作用</h2><ul>
<li>表达文本类型的特征</li>
<li>同时查找或替换一组字符串</li>
<li>匹配字符串的全部或部分</li>
</ul>
<h2 id="贰-常用操作符"><a href="#贰-常用操作符" class="headerlink" title="贰 常用操作符"></a>贰 常用操作符</h2><p>因为正则表达式由字符和操作符构成，故应了解常用操作符及其用法。</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>表示任何单个字符</td>
<td></td>
</tr>
<tr>
<td>[]</td>
<td>字符集，对单个字符给出取值范围</td>
<td>[abc]表示a、b、c，[a-z]表示a到z任意单个字符</td>
</tr>
<tr>
<td>[^ ]</td>
<td>非字符集，对单个字符给出排除范围</td>
<td>[^abc]表示非a或b或c的单个字符</td>
</tr>
<tr>
<td>*</td>
<td>前一个字符0次或无限次扩展</td>
<td>abc*表示ab、abc、abcc、abccc等</td>
</tr>
<tr>
<td>+</td>
<td>前一个字符1次或无限次扩展</td>
<td>abc+表示abc、abcc、abccc等</td>
</tr>
<tr>
<td>?</td>
<td>前一个字符0次或1次扩展</td>
<td>abc?表示ab、abc等</td>
</tr>
<tr>
<td>&#124;</td>
<td>左右表达式任意一个</td>
<td>abc&#124;def表示abc或def</td>
</tr>
<tr>
<td>{m}</td>
<td>扩展前一个字符m次</td>
<td>ab{2}表示abbc</td>
</tr>
<tr>
<td>{m,n}</td>
<td>扩展前一个字符m到n次（含n）</td>
<td>ab{1,2}表示abc、abbc</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串开头</td>
<td></td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串结尾</td>
<td></td>
</tr>
<tr>
<td>()</td>
<td>分组标记（内部只能使用&#124;操作符）</td>
<td></td>
</tr>
<tr>
<td>\d</td>
<td>数字，等价于[0-9]</td>
<td></td>
</tr>
<tr>
<td>\w</td>
<td>单词字符，等价于[A-Za-z0-9_]</td>
<td></td>
</tr>
</tbody></table>
<h2 id="叁-经典正则语法实例"><a href="#叁-经典正则语法实例" class="headerlink" title="叁 经典正则语法实例"></a>叁 经典正则语法实例</h2><p>下面看几个实例（比较简单或前面已经出现过的就不再赘述）</p>
<table>
<thead>
<tr>
<th>正则表达式</th>
<th>对应字符串</th>
</tr>
</thead>
<tbody><tr>
<td>^[A-Za-z]\w{0,31}$</td>
<td>合法的变量</td>
</tr>
<tr>
<td>[\u4e00-\u9fa5]</td>
<td>中文字符</td>
</tr>
<tr>
<td>(([1-9]?\d&#124;1\d{2}&#124;2[0-4]\d&#124;25[0-5]).){3}(([1-9]?\d&#124;1\d{2}&#124;2[0-4]\d&#124;25[0-5]).)</td>
<td>ip地址</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Python</category>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫——requests库入门（上）</title>
    <url>/blog/2019/08/17/pypc1/</url>
    <content><![CDATA[<h1 id="requests库入门（上）"><a href="#requests库入门（上）" class="headerlink" title="requests库入门（上）"></a>requests库入门（上）</h1><h2 id="零-前言"><a href="#零-前言" class="headerlink" title="零 前言"></a>零 前言</h2><p>本系列是pytho爬虫的学习笔记，根据<a href="https://www.icourse163.org/course/BIT-1001870001" target="_blank" rel="noopener">北京理工大学 Python网络爬虫与信息提取mooc</a>整理。本文主要阐述了requests库的基本知识以及爬取页面的通用框架。<a id="more"></a></p>
<h2 id="壹-requests库的安装"><a href="#壹-requests库的安装" class="headerlink" title="壹 requests库的安装"></a>壹 requests库的安装</h2><p><strong>pip是个好东西</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure>

<h2 id="贰-requests库中的方法"><a href="#贰-requests库中的方法" class="headerlink" title="贰 requests库中的方法"></a>贰 requests库中的方法</h2><h3 id="0-七种方法："><a href="#0-七种方法：" class="headerlink" title="0. 七种方法："></a>0. 七种方法：</h3><ol>
<li>requests.request()</li>
<li>requests.get()</li>
<li>requests.head()</li>
<li>requests.post()</li>
<li>requests.put()</li>
<li>requests.patch()</li>
<li>requests.delete()</li>
</ol>
<p>   <strong>所有方法本质上都是Requests方法</strong></p>
<h3 id="1-get（）方法"><a href="#1-get（）方法" class="headerlink" title="1. get（）方法"></a>1. get（）方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r=requests.get(url,params=<span class="literal">None</span>,**kwargs)</span><br><span class="line"><span class="comment">#获得网页</span></span><br><span class="line"><span class="comment">#(第一个参数必选，第二个第三个可不选)</span></span><br></pre></td></tr></table></figure>

<h2 id="叁-requests库中两个重要对象"><a href="#叁-requests库中两个重要对象" class="headerlink" title="叁 requests库中两个重要对象"></a>叁 requests库中两个重要对象</h2><h3 id="0-response对象及request对象"><a href="#0-response对象及request对象" class="headerlink" title="0.response对象及request对象"></a>0.response对象及request对象</h3><p>在</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r=requests.get()</span><br></pre></td></tr></table></figure>
<p>中，等号前的部分，称为response对象（其中包含服务器返回的所有信息，也包含request请求的所有信息）；等号后的部分称为request对象。</p>
<h3 id="1-Response对象的属性"><a href="#1-Response对象的属性" class="headerlink" title="1. Response对象的属性"></a>1. Response对象的属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>r.status_code</td>
<td>HTTP请求返回的状态，200成功，404失败</td>
</tr>
<tr>
<td>r.text</td>
<td>HTTP响应内容的字符串形式，即url的页面内容</td>
</tr>
<tr>
<td>r.encoding</td>
<td>从HTTP header中猜测的响应内容的编码方式</td>
</tr>
<tr>
<td>r.apparent_encoding</td>
<td>从内容分析出的响应内容编码方式（备选编码方式）</td>
</tr>
<tr>
<td>r.content</td>
<td>HTTP响应内容的二进制形式</td>
</tr>
</tbody></table>
<h2 id="肆-requests库的异常"><a href="#肆-requests库的异常" class="headerlink" title="肆 requests库的异常"></a>肆 requests库的异常</h2><table>
<thead>
<tr>
<th>异常</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>requests.ConnectionError</td>
<td>网络连接错误异常，如DNS查询失败、拒绝连接等</td>
</tr>
<tr>
<td>requests.HTTPError</td>
<td>HTTP错误异常</td>
</tr>
<tr>
<td>requests.URLRequired</td>
<td>URL缺失异常</td>
</tr>
<tr>
<td>requests.TooManyRedirects</td>
<td>超过最大重定向次数，产生重定向异常</td>
</tr>
<tr>
<td>requests.ConnectionTimeout</td>
<td>连接远程服务器超时异常</td>
</tr>
<tr>
<td>requests.Timeout</td>
<td>请求URL超时，产生超时异常</td>
</tr>
<tr>
<td>r.raise_for_statues()</td>
<td>如果不是200，产生异常 requests.HTTPError</td>
</tr>
</tbody></table>
<h2 id="伍-爬取页面通用框架"><a href="#伍-爬取页面通用框架" class="headerlink" title="伍 爬取页面通用框架"></a>伍 爬取页面通用框架</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span></span></span><br><span class="line"><span class="function">   <span class="title">try</span>:</span></span><br><span class="line">      r=requests.get(url)</span><br><span class="line">      r.raise_for_statues() <span class="comment">#如果状态码不是200，产生HTTPError异常</span></span><br><span class="line">      r.encoding=r.apparent_encoding <span class="comment">#替换编码方式</span></span><br><span class="line">      <span class="keyword">return</span> r.text</span><br><span class="line">   expect:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Error"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">   url=<span class="string">"http://www.baidu.com"</span></span><br><span class="line">   print(getHTMLText(url))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
        <category>Python</category>
        <category>爬虫</category>
        <category>requests库</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>requests库</tag>
      </tags>
  </entry>
  <entry>
    <title>重新开始</title>
    <url>/blog/2019/08/13/restart/</url>
    <content><![CDATA[<h1 id="如题"><a href="#如题" class="headerlink" title="如题"></a>如题</h1><a id="more"></a>]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
</search>
