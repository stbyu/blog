<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【作业向】程序设计思维与实践 Week10 作业</title>
    <url>/blog/2020/04/25/week10hw/</url>
    <content><![CDATA[<h1>【作业向】程序设计思维与实践 Week10作业<a id="more"></a></h1>
<h2 id="A-Game23"><a class="header-anchor" href="#A-Game23">♔</a>A Game23</h2>
<h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3>
<p>东东在玩游戏“Game23”。</p>
<p>在一开始他有一个数字n，他的目标是把它转换成m，在每一步操作中，他可以将n乘以2或乘以3，他可以进行任意次操作。输出将n转换成m的操作次数，如果转换不了输出-1。</p>
<h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3>
<p>输入的唯一一行包括两个整数n和m（1&lt;=n&lt;=m&lt;=5*10^8).</p>
<h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3>
<p>输出从n转换到m的操作次数，否则输出-1.</p>
<h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3>
<h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">120 51840</span><br></pre></td></tr></table></figure>
<h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure>
<h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3>
<p>这一题需要判断m/n是否可以由2<sup>k</sup>*3<sup>j</sup>组成，若可以则输出k+j的值，否则输出-1。</p>
<h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll m,n,sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">if</span>(n&gt;m || m%n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(m==n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	m=m/n;</span><br><span class="line">	<span class="keyword">while</span>(m &amp;&amp; m%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		sum++;</span><br><span class="line">		m/=<span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(m &amp;&amp; m%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		sum++;</span><br><span class="line">		m/=<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(m!=<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld"</span>,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-LIS-LCS"><a class="header-anchor" href="#B-LIS-LCS">♔</a>B LIS &amp; LCS</h2>
<h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3>
<p>东东有两个序列A和B。</p>
<p>他想要知道序列A的LIS和序列AB的LCS的长度。</p>
<p>注意，LIS为严格递增的，即a1&lt;a2&lt;…&lt;ak(ai&lt;=1,000,000,000)。</p>
<h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3>
<p>第一行两个数n，m（1&lt;=n&lt;=5,000,1&lt;=m&lt;=5,000）<br>
第二行n个数，表示序列A<br>
第三行m个数，表示序列B</p>
<h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3>
<p>输出一行数据ans1和ans2，分别代表序列A的LIS和序列AB的LCS的长度</p>
<h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3>
<p>这一题是比较经典的动态规划的题目，对于最长上升子序列，递推式为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		dp1[i]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[j]&lt;a[i]) dp1[i]=<span class="built_in">max</span>(dp1[i],dp1[j]+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		ans=<span class="built_in">max</span>(ans,dp1[i]);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>对于最长公共子序列，递推式为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]==b[j]) dp2[i][j]=<span class="built_in">max</span>(dp2[i][j],dp2[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				dp2[i][j]=<span class="built_in">max</span>(dp2[i<span class="number">-1</span>][j],dp2[i][j<span class="number">-1</span>]);</span><br><span class="line">			&#125; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp1[<span class="number">5005</span>],dp2[<span class="number">5005</span>][<span class="number">5005</span>],ans;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5005</span>],b[<span class="number">5005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		dp1[i]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[j]&lt;a[i]) dp1[i]=<span class="built_in">max</span>(dp1[i],dp1[j]+<span class="number">1</span>);</span><br><span class="line">			<span class="comment">//else dp1[i]=max(dp1[i],dp1[j]);</span></span><br><span class="line">		&#125;</span><br><span class="line">		ans=<span class="built_in">max</span>(ans,dp1[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d "</span>,ans);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]==b[j]) dp2[i][j]=<span class="built_in">max</span>(dp2[i][j],dp2[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				dp2[i][j]=<span class="built_in">max</span>(dp2[i<span class="number">-1</span>][j],dp2[i][j<span class="number">-1</span>]);</span><br><span class="line">			&#125; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,dp2[n][m]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-拿数问题-II"><a class="header-anchor" href="#C-拿数问题-II">♔</a>C 拿数问题 II</h2>
<h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3>
<p>YJQ 上完第10周的程序设计思维与实践后，想到一个绝妙的主意，他对拿数问题做了一点小修改，使得这道题变成了 拿数问题 II。</p>
<p>给一个序列，里边有 n 个数，每一步能拿走一个数，比如拿第 i 个数， Ai = x，得到相应的分数 x，但拿掉这个 Ai 后，x+1 和 x-1 (如果有 Aj = x+1 或 Aj = x-1 存在) 就会变得不可拿（但是有 Aj = x 的话可以继续拿这个 x）。求最大分数。</p>
<p><strong>本题和课上讲的有些许不一样，但是核心是一样，需要你自己思考。</strong></p>
<h3 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h3>
<p>第一行包含一个整数 <em>n</em> (1 ≤ <em>n</em> ≤ 105)，表示数字里的元素的个数</p>
<p>第二行包含n个整数<em>a</em>1, <em>a</em>2, …, <em>a**n</em> (1 ≤ <em>a**i</em> ≤ 105)</p>
<h3 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h3>
<p>输出一个整数：n你能得到最大分值。</p>
<h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3>
<h4 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">1 2 1 3 2 2 2 2 3</span><br></pre></td></tr></table></figure>
<h4 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>
<h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3>
<p>这一题要先对数据进行一个处理，要记录下出现的每个数的个数存储在a[i]中。然后进行递推，式子为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">dp[<span class="number">1</span>]=a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=maxn;i++)</span><br><span class="line">		dp[i]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>],dp[i<span class="number">-2</span>]+i*a[i]);</span><br></pre></td></tr></table></figure>
<p>即第i个数取或者不取的两种状态。答案为dp[maxn]，maxn表示出现的最大的数。</p>
<h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll n,maxn;</span><br><span class="line">ll a[<span class="number">100005</span>],dp[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;j);</span><br><span class="line">		a[j]++;</span><br><span class="line">		maxn=<span class="built_in">max</span>(maxn,j);</span><br><span class="line">	&#125;</span><br><span class="line">	dp[<span class="number">1</span>]=a[<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=maxn;i++)</span><br><span class="line">		dp[i]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>],dp[i<span class="number">-2</span>]+i*a[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld"</span>,dp[maxn]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>作业</category>
        <category>程序设计思维</category>
      </categories>
      <tags>
        <tag>作业</tag>
        <tag>程序设计思维</tag>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>CCF CSP 201604-3 路径解析</title>
    <url>/blog/2020/04/24/csp201604-3/</url>
    <content><![CDATA[<h1>CCF CSP 201604-3 路径解析<a id="more"></a></h1>


	<div class="row">
    <embed src="路径解析.pdf" width="100%" height="550" type="application/pdf">
	</div>



<h2 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h2>
<p>​</p>
<h2 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,top;</span><br><span class="line"><span class="built_in">string</span> s,t,st[<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;s.size(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(s[i]==<span class="string">'/'</span> &amp;&amp; s[i+<span class="number">1</span>]==<span class="string">'/'</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			s.erase(i,<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(s.find(<span class="string">"/./"</span>)!=s.npos)</span><br><span class="line">	&#123;</span><br><span class="line">		s.erase(s.find(<span class="string">"/./"</span>)+<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(s[s.size()<span class="number">-1</span>]==<span class="string">'/'</span>) s.erase(s.size()<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		top=<span class="number">0</span>;</span><br><span class="line">		getline(<span class="built_in">cin</span>,t);</span><br><span class="line">		<span class="keyword">if</span>(t[<span class="number">0</span>]!=<span class="string">'/'</span>) t=s+<span class="string">"/"</span>+t;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;t.size(); i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(t[i]==<span class="string">'/'</span> &amp;&amp; t[i+<span class="number">1</span>]==<span class="string">'/'</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				t.erase(i,<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(t.find(<span class="string">"/./"</span>)!=t.npos)</span><br><span class="line">		&#123;</span><br><span class="line">			t.erase(t.find(<span class="string">"/./"</span>)+<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(t[t.size()<span class="number">-1</span>]!=<span class="string">'/'</span>) t[t.size()]=<span class="string">'/'</span>;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;t.size(); i++)</span><br><span class="line">		&#123;</span><br><span class="line">			k=i;</span><br><span class="line">			<span class="keyword">while</span>(t[i]!=<span class="string">'/'</span>) i++;</span><br><span class="line">			<span class="keyword">if</span>(t.substr(k,i-k)==<span class="string">".."</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				top--;</span><br><span class="line">				<span class="keyword">if</span>(top&lt;<span class="number">0</span>) top=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				st[++top]=t.substr(k,i-k);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=top;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"/"</span>&lt;&lt;st[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(i==<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"/"</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
        <category>csp</category>
      </categories>
      <tags>
        <tag>csp</tag>
        <tag>笔记</tag>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>【作业向】程序设计思维与实践 Week9 作业</title>
    <url>/blog/2020/04/23/week9hw/</url>
    <content><![CDATA[<h1>【作业向】程序设计思维与实践 Week9作业<a id="more"></a></h1>
<h2 id="A-咕咕东的目录管理器"><a class="header-anchor" href="#A-咕咕东的目录管理器">♔</a>A 咕咕东的目录管理器</h2>
<h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3>
<p>咕咕东的雪梨电脑的操作系统在上个月受到宇宙射线的影响，时不时发生故障，他受不了了，想要写一个高效易用零bug的操作系统 —— 这工程量太大了，所以他定了一个小目标，从实现一个目录管理器开始。前些日子，东东的电脑终于因为过度收到宇宙射线的影响而宕机，无法写代码。他的好友TT正忙着在B站看猫片，另一位好友瑞神正忙着打守望先锋。现在只有你能帮助东东！</p>
<p>初始时，咕咕东的硬盘是空的，命令行的当前目录为根目录 <code>root</code>。</p>
<p>目录管理器可以理解为要维护一棵有根树结构，每个目录的儿子必须保持字典序。</p>
<p><img src="/blog/2020/04/23/week9hw/GojFbt.png" alt="img"></p>
<p>现在咕咕东可以在命令行下执行以下表格中描述的命令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>类型</th>
<th>实现</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>MKDIR <em>s</em></td>
<td>操作</td>
<td>在当前目录下创建一个子目录 <em>s</em>，<em>s</em> 是一个字符串</td>
<td>创建成功输出 “OK”；若当前目录下已有该子目录则输出 “ERR”</td>
</tr>
<tr>
<td>RM <em>s</em></td>
<td>操作</td>
<td>在当前目录下删除子目录 <em>s</em>，<em>s</em> 是一个字符串</td>
<td>删除成功输出 “OK”；若当前目录下该子目录不存在则输出 “ERR”</td>
</tr>
<tr>
<td>CD <em>s</em></td>
<td>操作</td>
<td>进入一个子目录 s，<em>s</em> 是一个字符串（执行后，当前目录可能会改变）</td>
<td>进入成功输出 “OK”；若当前目录下该子目录不存在则输出 “ERR” 特殊地，若 <em>s</em> 等于 “…” 则表示返回上级目录，同理，返回成功输出 “OK”，返回失败（当前目录已是根目录没有上级目录）则输出 “ERR”</td>
</tr>
<tr>
<td>SZ</td>
<td>询问</td>
<td>输出当前目录的大小</td>
<td>也即输出 1+当前目录的子目录数</td>
</tr>
<tr>
<td>LS</td>
<td>询问</td>
<td>输出多行表示当前目录的 “直接子目录” 名</td>
<td>若没有子目录，则输出 “EMPTY”；若子目录数属于 [1,10] 则全部输出；若子目录数大于 10，则输出前 5 个，再输出一行 “…”，输出后 5 个。</td>
</tr>
<tr>
<td>TREE</td>
<td>询问</td>
<td>输出多行表示以当前目录为根的子树的前序遍历结果</td>
<td>若没有后代目录，则输出 “EMPTY”；若后代目录数+1（当前目录）属于 [1,10] 则全部输出；若后代目录数+1（当前目录）大于 10，则输出前 5 个，再输出一行 “…”，输出后 5 个。若目录结构如上图，当前目录为 “root” 执行结果如下，<img src="/blog/2020/04/23/week9hw/GojYPU.png" alt="img"></td>
</tr>
<tr>
<td>UNDO</td>
<td>特殊</td>
<td>撤销操作</td>
<td>撤销最近一个 “成功执行” 的操作（即MKDIR或RM或CD）的影响，撤销成功输出 “OK” 失败或者没有操作用于撤销则输出 “ERR”</td>
</tr>
</tbody>
</table>
<h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3>
<p>输入文件包含多组测试数据，第一行输入一个整数表示测试数据的组数 T （T &lt;= 20）；</p>
<p>每组测试数据的第一行输入一个整数表示该组测试数据的命令总数 Q （Q &lt;= 1e5）；</p>
<p>每组测试数据的 2 ~ Q+1 行为具体的操作 （MKDIR、RM 操作总数不超过 5000）；</p>
<h3 id="面对数据范围你要思考的是他们代表的-“命令”-执行的最大可接受复杂度，只有这样你才能知道你需要设计的是怎样复杂度的系统。"><a class="header-anchor" href="#面对数据范围你要思考的是他们代表的-“命令”-执行的最大可接受复杂度，只有这样你才能知道你需要设计的是怎样复杂度的系统。">♔</a>面对数据范围你要思考的是他们代表的 “命令” 执行的最大可接受复杂度，只有这样你才能知道你需要设计的是怎样复杂度的系统。</h3>
<h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3>
<p>每组测试数据的输出结果间需要输出一行空行。注意大小写敏感。</p>
<h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3>
<h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">22</span><br><span class="line">MKDIR dira</span><br><span class="line">CD dirb</span><br><span class="line">CD dira</span><br><span class="line">MKDIR a</span><br><span class="line">MKDIR b</span><br><span class="line">MKDIR c</span><br><span class="line">CD ..</span><br><span class="line">MKDIR dirb</span><br><span class="line">CD dirb</span><br><span class="line">MKDIR x</span><br><span class="line">CD ..</span><br><span class="line">MKDIR dirc</span><br><span class="line">CD dirc</span><br><span class="line">MKDIR y</span><br><span class="line">CD ..</span><br><span class="line">SZ</span><br><span class="line">LS</span><br><span class="line">TREE</span><br><span class="line">RM dira</span><br><span class="line">TREE</span><br><span class="line">UNDO</span><br><span class="line">TREE</span><br></pre></td></tr></table></figure>
<h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OK</span><br><span class="line">ERR</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">9</span><br><span class="line">dira</span><br><span class="line">dirb</span><br><span class="line">dirc</span><br><span class="line">root</span><br><span class="line">dira</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">dirb</span><br><span class="line">x</span><br><span class="line">dirc</span><br><span class="line">y</span><br><span class="line">OK</span><br><span class="line">root</span><br><span class="line">dirb</span><br><span class="line">x</span><br><span class="line">dirc</span><br><span class="line">y</span><br><span class="line">OK</span><br><span class="line">root</span><br><span class="line">dira</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">dirb</span><br><span class="line">x</span><br><span class="line">dirc</span><br><span class="line">y</span><br></pre></td></tr></table></figure>
<h3 id="英文原版题面："><a class="header-anchor" href="#英文原版题面：">♔</a>英文原版题面：</h3>
<p><img src="/blog/2020/04/23/week9hw/JSPJG6.png" alt="img"></p>
<h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3>
<p>这一题还是比较考验码力的，采用一个结构体来表示文件夹的节点，结构体的内容有本文件夹的名字，大小，上一级文件夹的编号以及用map表示的子文件夹的名字与编号的映射。对于创建和删除操作，直接进行即可，同时可以更新本文件夹以及各上层文件夹的大小并在栈中记录本操作。对于UNDO操作，首先查询栈中操作的个数，若无操作则UNDO失败，若有操作则进行栈顶操作的逆操作。对于LS操作，要注意的是输出后五个时用反向迭代器先移动到倒数第五个的位置，然后再向尾部遍历。对于TREE操作，采用懒更新的策略，若当前节点进行TREE操作后其本身及子节点的结构未曾发生变化，则直接输出已经存储过的，否则进行更新。更新时对于后五个节点，采用递归的方式更新，对于每一个遍历到的节点，从后往前遍历其子节点，若子节点的大小大于剩余需要的点数则遍历该节点，否则遍历该节点后将剩余的节点数减去该节点的大小。</p>
<h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">string</span> na;</span><br><span class="line">	<span class="keyword">int</span> siz,flg,fa;</span><br><span class="line">	<span class="built_in">string</span> pre[<span class="number">11</span>],bac[<span class="number">11</span>];</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; nxt;</span><br><span class="line">&#125;mir[<span class="number">100005</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">string</span> na;</span><br><span class="line">	<span class="keyword">int</span> type,zi,snow;</span><br><span class="line">&#125;stck[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> T,n,now,top,ztop,t;</span><br><span class="line"><span class="built_in">string</span> zl,cs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preback</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> no)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(t&gt;<span class="number">10</span>) <span class="keyword">return</span>;</span><br><span class="line">	mir[x].pre[t++]=mir[no].na;</span><br><span class="line">	<span class="comment">//cout&lt;&lt;"++++++"&lt;&lt;mir[no].na&lt;&lt;endl;</span></span><br><span class="line">	<span class="keyword">if</span>(mir[no].nxt.<span class="built_in">size</span>()&gt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line">		<span class="keyword">for</span>(iter=mir[no].nxt.<span class="built_in">begin</span>();iter!=mir[no].nxt.<span class="built_in">end</span>();iter++)</span><br><span class="line">		&#123;</span><br><span class="line">			preback(x,iter-&gt;second);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bacback</span><span class="params">(<span class="keyword">int</span> ti,<span class="keyword">int</span> x,<span class="keyword">int</span> no)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*int sz=mir[no].nxt.size();</span></span><br><span class="line"><span class="comment">	map&lt;string,int&gt; ::iterator iter=mir[no].nxt.end();</span></span><br><span class="line"><span class="comment">	while(sz--)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		iter--;</span></span><br><span class="line"><span class="comment">		int szz=mir[iter-&gt;second].siz;</span></span><br><span class="line"><span class="comment">		if(szz&gt;=t)</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			bacback(ti,x,iter-&gt;second);</span></span><br><span class="line"><span class="comment">			return;</span></span><br><span class="line"><span class="comment">		&#125; </span></span><br><span class="line"><span class="comment">		else</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			bacback(szz,x,iter-&gt;second);</span></span><br><span class="line"><span class="comment">			ti-=szz;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	<span class="keyword">int</span> ni=ti;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::reverse_iterator rter;</span><br><span class="line">	<span class="keyword">for</span>(rter=mir[no].nxt.rbegin();rter!=mir[no].nxt.rend();rter++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(mir[rter-&gt;second].siz&gt;=ni)</span><br><span class="line">		&#123;</span><br><span class="line">			bacback(ni,x,rter-&gt;second);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">			bacback(mir[rter-&gt;second].siz,x,rter-&gt;second);</span><br><span class="line">			ni-=mir[rter-&gt;second].siz;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	mir[x].bac[t++]=mir[no].na;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maketree</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t=<span class="number">1</span>;</span><br><span class="line">	mir[x].flg=<span class="number">1</span>;</span><br><span class="line">	<span class="comment">//bacback(x,x);</span></span><br><span class="line">	preback(x,x);</span><br><span class="line">	<span class="keyword">if</span>(mir[x].siz&gt;<span class="number">10</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		t=<span class="number">1</span>;</span><br><span class="line">		bacback(<span class="number">5</span>,x,x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mir[x].siz;i++) </span><br><span class="line">			mir[x].bac[i]=mir[x].pre[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeupdate</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//cout&lt;&lt;x&lt;&lt;"----"&lt;&lt;num&lt;&lt;endl;</span></span><br><span class="line">	mir[x].siz+=num;</span><br><span class="line">	mir[x].flg=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(mir[x].fa) makeupdate(mir[x].fa,num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("1.txt","r",stdin);</span></span><br><span class="line">	<span class="comment">//freopen("a1.txt","w",stdout);</span></span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">99999</span>;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			mir[i].nxt.<span class="built_in">clear</span>();</span><br><span class="line">			mir[i].flg=<span class="number">0</span>;</span><br><span class="line">			mir[i].siz=<span class="number">0</span>;</span><br><span class="line">		&#125; </span><br><span class="line">		top=<span class="number">2</span>;now=<span class="number">1</span>;ztop=<span class="number">0</span>;</span><br><span class="line">		<span class="comment">//memset(mir,0,sizeof(mir));</span></span><br><span class="line">		<span class="comment">//memset(stck,0,sizeof(stck));</span></span><br><span class="line">		mir[now].na=<span class="string">"root"</span>;</span><br><span class="line">		mir[now].flg=<span class="number">1</span>;</span><br><span class="line">		mir[now].siz=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//cout&lt;&lt;"--"&lt;&lt;mir[now].na&lt;&lt;"--"&lt;&lt;endl;</span></span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;zl;</span><br><span class="line">			<span class="keyword">if</span>(zl==<span class="string">"MKDIR"</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;cs;</span><br><span class="line">				<span class="keyword">if</span>(mir[now].nxt.<span class="built_in">find</span>(cs)!=mir[now].nxt.<span class="built_in">end</span>())</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"ERR\n"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					mir[now].nxt[cs]=top;</span><br><span class="line">					mir[top].na=cs;</span><br><span class="line">					mir[top].fa=now;</span><br><span class="line">					mir[top].siz=<span class="number">0</span>;</span><br><span class="line">					mir[top].flg=<span class="number">0</span>;</span><br><span class="line">					makeupdate(top,<span class="number">1</span>);</span><br><span class="line">					top++;</span><br><span class="line">					stck[++ztop].na=cs;</span><br><span class="line">					stck[ztop].type=<span class="number">1</span>;</span><br><span class="line">					stck[ztop].snow=now;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(zl==<span class="string">"RM"</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;cs;</span><br><span class="line">				<span class="keyword">if</span>(mir[now].nxt.<span class="built_in">find</span>(cs)!=mir[now].nxt.<span class="built_in">end</span>())</span><br><span class="line">				&#123;</span><br><span class="line">					stck[++ztop].na=cs;</span><br><span class="line">					stck[ztop].type=<span class="number">2</span>;</span><br><span class="line">					stck[ztop].zi=mir[now].nxt[cs];</span><br><span class="line">					stck[ztop].snow=now;</span><br><span class="line">					makeupdate(now,<span class="number">0</span>-(mir[mir[now].nxt[cs]].siz));</span><br><span class="line">					mir[mir[now].nxt[cs]].flg=<span class="number">0</span>;</span><br><span class="line">					mir[now].nxt.erase(cs);</span><br><span class="line">					</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"ERR\n"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(zl==<span class="string">"CD"</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;cs;</span><br><span class="line">				<span class="keyword">if</span>(cs==<span class="string">".."</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(mir[now].fa)</span><br><span class="line">					&#123;</span><br><span class="line">						stck[++ztop].na=mir[now].na;</span><br><span class="line">						stck[ztop].type=<span class="number">3</span>;</span><br><span class="line">						stck[ztop].zi=<span class="number">0</span>;</span><br><span class="line">						stck[ztop].snow=mir[now].fa;</span><br><span class="line">						now=mir[now].fa;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">"ERR\n"</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(mir[now].nxt.<span class="built_in">find</span>(cs)!=mir[now].nxt.<span class="built_in">end</span>())</span><br><span class="line">				&#123;</span><br><span class="line">					now=mir[now].nxt[cs];</span><br><span class="line">					stck[++ztop].type=<span class="number">3</span>;</span><br><span class="line">					stck[ztop].zi=<span class="number">1</span>;</span><br><span class="line">					stck[ztop].snow=now;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"ERR\n"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(zl==<span class="string">"SZ"</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,mir[now].siz);				</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(zl==<span class="string">"LS"</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(mir[now].nxt.<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"EMPTY\n"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(mir[now].nxt.<span class="built_in">size</span>()&lt;=<span class="number">10</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line">					<span class="keyword">for</span>(iter=mir[now].nxt.<span class="built_in">begin</span>();iter!=mir[now].nxt.<span class="built_in">end</span>();iter++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">cout</span>&lt;&lt;iter-&gt;first&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line">					<span class="keyword">for</span>(iter=mir[now].nxt.<span class="built_in">begin</span>(),j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++,iter++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">cout</span>&lt;&lt;iter-&gt;first&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="built_in">cout</span>&lt;&lt;<span class="string">"..."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">					<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::reverse_iterator rter;</span><br><span class="line">					<span class="keyword">for</span>(rter=mir[now].nxt.rbegin(),j=<span class="number">1</span>;j&lt;<span class="number">5</span>;j++,rter++);</span><br><span class="line">					<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++,rter--)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">cout</span>&lt;&lt;rter-&gt;first&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(zl==<span class="string">"TREE"</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(!mir[now].flg) maketree(now);</span><br><span class="line">				<span class="keyword">if</span>(mir[now].nxt.<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"EMPTY\n"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(mir[now].siz&lt;=<span class="number">10</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=mir[now].siz;j++) <span class="built_in">cout</span>&lt;&lt;mir[now].pre[j]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++) <span class="built_in">cout</span>&lt;&lt;mir[now].pre[j]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">					<span class="built_in">cout</span>&lt;&lt;<span class="string">"..."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">					<span class="keyword">for</span>(j=<span class="number">5</span>;j&gt;=<span class="number">1</span>;j--) <span class="built_in">cout</span>&lt;&lt;mir[now].bac[j]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(zl==<span class="string">"UNDO"</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(ztop==<span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"ERR\n"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(stck[ztop].type==<span class="number">1</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						makeupdate(stck[ztop].snow,<span class="number">0</span>-mir[mir[stck[ztop].snow].nxt[stck[ztop].na]].siz);</span><br><span class="line">						mir[stck[ztop].snow].nxt.erase(stck[ztop].na);</span><br><span class="line">						ztop--;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span>(stck[ztop].type==<span class="number">2</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						mir[stck[ztop].snow].nxt[stck[ztop].na]=stck[ztop].zi;</span><br><span class="line">						makeupdate(stck[ztop].snow,mir[stck[ztop].zi].siz);</span><br><span class="line">						ztop--;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span>(stck[ztop].type==<span class="number">3</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span>(stck[ztop].zi==<span class="number">0</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							now=mir[stck[ztop].snow].nxt[stck[ztop].na];</span><br><span class="line">							ztop--;</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span> <span class="keyword">if</span>(stck[ztop].zi==<span class="number">1</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							now=mir[stck[ztop].snow].fa;</span><br><span class="line">							ztop--;</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(T) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-东东学打牌"><a class="header-anchor" href="#B-东东学打牌">♔</a>B 东东学打牌</h2>
<h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3>
<p>最近，东东沉迷于打牌。所以他找到 HRZ、ZJM 等人和他一起打牌。由于人数众多，东东稍微修改了亿下游戏规则：</p>
<ul>
<li>所有扑克牌只按数字来算大小，忽略花色。</li>
<li>每张扑克牌的大小由一个值表示。A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K 分别指代 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13。</li>
<li>每个玩家抽得 5 张扑克牌，组成一手牌！（每种扑克牌的张数是无限的，你不用担心，东东家里有无数副扑克牌）</li>
</ul>
<p>理所当然地，一手牌是有不同类型，并且有大小之分的。</p>
<p>举个栗子，现在东东的 “一手牌”（记为 α），瑞神的 “一手牌”（记为 β），要么 α &gt; β，要么 α &lt; β，要么 α = β。</p>
<p>那么这两个 “一手牌”，如何进行比较大小呢？首先对于不同类型的一手牌，其值的大小即下面的标号；对于同类型的一手牌，根据组成这手牌的 5 张牌不同，其值不同。下面依次列举了这手牌的形成规则：</p>
<ol>
<li>大牌：这手牌不符合下面任一个形成规则。如果 α 和 β 都是大牌，那么定义它们的大小为组成这手牌的 5 张牌的大小总和。</li>
<li>对子：5 张牌中有 2 张牌的值相等。如果 α 和 β 都是对子，比较这个 “对子” 的大小，如果 α 和 β 的 “对子” 大小相等，那么比较剩下 3 张牌的总和。</li>
<li>两对：5 张牌中有两个不同的对子。如果 α 和 β 都是两对，先比较双方较大的那个对子，如果相等，再比较双方较小的那个对子，如果还相等，只能比较 5 张牌中的最后那张牌组不成对子的牌。</li>
<li>三个：5 张牌中有 3 张牌的值相等。如果 α 和 β 都是 “三个”，比较这个 “三个” 的大小，如果 α 和 β 的 “三个” 大小相等，那么比较剩下 2 张牌的总和。</li>
<li>三带二：5 张牌中有 3 张牌的值相等，另外 2 张牌值也相等。如果 α 和 β 都是 “三带二”，先比较它们的 “三个” 的大小，如果相等，再比较 “对子” 的大小。</li>
<li>炸弹：5 张牌中有 4 张牌的值相等。如果 α 和 β 都是 “炸弹”，比较 “炸弹” 的大小，如果相等，比较剩下那张牌的大小。</li>
<li>顺子：5 张牌中形成 x, x+1, x+2, x+3, x+4。如果 α 和 β 都是 “顺子”，直接比较两个顺子的最大值。</li>
<li>龙顺：5 张牌分别为 10、J、Q、K、A。</li>
</ol>
<p>作为一个称职的魔法师，东东得知了全场人手里 5 张牌的情况。他现在要输出一个排行榜。排行榜按照选手们的 “一手牌” 大小进行排序，如果两个选手的牌相等，那么人名字典序小的排在前面。</p>
<p>不料，此时一束宇宙射线扫过，为了躲避宇宙射线，东东慌乱中清空了他脑中的 Cache。请你告诉东东，全场人的排名。</p>
<h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3>
<p>输入包含多组数据。每组输入开头一个整数 n (1 &lt;= n &lt;= 1e5)，表明全场共多少人。<br>
随后是 n 行，每行一个字符串 s1 和 s2 （1 &lt;= |s1|,|s2| &lt;= 10）， s1 是对应人的名字，s2 是他手里的牌情况。</p>
<h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3>
<p>对于每组测试数据，输出 n 行，即这次全场人的排名。</p>
<h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3>
<h4 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">DongDong AAA109</span><br><span class="line">ZJM 678910</span><br><span class="line">Hrz 678910</span><br></pre></td></tr></table></figure>
<h4 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hrz</span><br><span class="line">ZJM</span><br><span class="line">DongDong</span><br></pre></td></tr></table></figure>
<h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3>
<p>这一题和上一次的打牌那个题比较像，对于每一个玩家，判断其手牌的类型，并提取关键字及关键字个数，和玩家名一起存储到结构体中。并用自定义了比较函数的sort函数对该结构体进行排序，然后按顺序输出玩家名称即可。</p>
<h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> typ,flgs,flg[<span class="number">4</span>];</span><br><span class="line">	<span class="built_in">string</span> na;</span><br><span class="line">&#125;pl[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gettyp</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> pi[<span class="number">5</span>];</span><br><span class="line">	<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> len=c.length();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(c[i]==<span class="string">'1'</span>) </span><br><span class="line">		&#123;</span><br><span class="line">			pi[cnt++]=<span class="number">10</span>;</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(c[i]&gt;=<span class="string">'2'</span> &amp;&amp; c[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">			pi[cnt++]=c[i]-<span class="string">'0'</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(c[i]==<span class="string">'A'</span>)</span><br><span class="line">			pi[cnt++]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(c[i]==<span class="string">'J'</span>)</span><br><span class="line">			pi[cnt++]=<span class="number">11</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(c[i]==<span class="string">'Q'</span>)</span><br><span class="line">			pi[cnt++]=<span class="number">12</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(c[i]==<span class="string">'K'</span>)</span><br><span class="line">			pi[cnt++]=<span class="number">13</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(pi,pi+<span class="number">5</span>);</span><br><span class="line">	<span class="comment">/*if(pi[0]==pi[1] &amp;&amp; pi[1]==pi[2] &amp;&amp; pi[2]==pi[3] &amp;&amp; pi[3]==pi[4])</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		pl[x].typ=1;</span></span><br><span class="line"><span class="comment">		pl[x].flg[1]=pi[0]+pi[1]+pi[2]+pi[3]+pi[4];</span></span><br><span class="line"><span class="comment">		pl[x].flgs=1;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	else*/</span> <span class="keyword">if</span>(pi[<span class="number">0</span>]==<span class="number">1</span> &amp;&amp; pi[<span class="number">1</span>]==<span class="number">10</span> &amp;&amp; pi[<span class="number">2</span>]==<span class="number">11</span> &amp;&amp; pi[<span class="number">3</span>]==<span class="number">12</span> &amp;&amp; pi[<span class="number">4</span>]==<span class="number">13</span>)<span class="comment">//longshun </span></span><br><span class="line">	&#123;</span><br><span class="line">		pl[x].typ=<span class="number">8</span>;</span><br><span class="line">		pl[x].flgs=<span class="number">0</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">0</span>]+<span class="number">1</span>==pi[<span class="number">1</span>] &amp;&amp; pi[<span class="number">1</span>]+<span class="number">1</span>==pi[<span class="number">2</span>] &amp;&amp; pi[<span class="number">2</span>]+<span class="number">1</span>==pi[<span class="number">3</span>] &amp;&amp; pi[<span class="number">3</span>]+<span class="number">1</span>==pi[<span class="number">4</span>])<span class="comment">//shunzi</span></span><br><span class="line">	&#123;</span><br><span class="line">		pl[x].typ=<span class="number">7</span>;</span><br><span class="line">		pl[x].flg[<span class="number">1</span>]=pi[<span class="number">4</span>];</span><br><span class="line">		pl[x].flgs=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">0</span>]==pi[<span class="number">1</span>] &amp;&amp; pi[<span class="number">1</span>]==pi[<span class="number">2</span>] &amp;&amp; pi[<span class="number">2</span>]==pi[<span class="number">3</span>])<span class="comment">//0123 4</span></span><br><span class="line">	&#123;</span><br><span class="line">		pl[x].typ=<span class="number">6</span>;</span><br><span class="line">		pl[x].flg[<span class="number">1</span>]=pi[<span class="number">0</span>];</span><br><span class="line">		pl[x].flg[<span class="number">2</span>]=pi[<span class="number">4</span>];</span><br><span class="line">		pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">1</span>]==pi[<span class="number">2</span>] &amp;&amp; pi[<span class="number">2</span>]==pi[<span class="number">3</span>] &amp;&amp; pi[<span class="number">3</span>]==pi[<span class="number">4</span>])<span class="comment">//0 1234</span></span><br><span class="line">	&#123;</span><br><span class="line">		pl[x].typ=<span class="number">6</span>;</span><br><span class="line">		pl[x].flg[<span class="number">1</span>]=pi[<span class="number">4</span>];</span><br><span class="line">		pl[x].flg[<span class="number">2</span>]=pi[<span class="number">0</span>];</span><br><span class="line">		pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">0</span>]==pi[<span class="number">1</span>] &amp;&amp; pi[<span class="number">1</span>]==pi[<span class="number">2</span>])<span class="comment">//012 3 4</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(pi[<span class="number">3</span>]==pi[<span class="number">4</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			pl[x].typ=<span class="number">5</span>;</span><br><span class="line">			pl[x].flg[<span class="number">1</span>]=pi[<span class="number">0</span>];</span><br><span class="line">			pl[x].flg[<span class="number">2</span>]=pi[<span class="number">3</span>];</span><br><span class="line">			pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			pl[x].typ=<span class="number">4</span>;</span><br><span class="line">			pl[x].flg[<span class="number">1</span>]=pi[<span class="number">0</span>];</span><br><span class="line">			pl[x].flg[<span class="number">2</span>]=pi[<span class="number">3</span>]+pi[<span class="number">4</span>];</span><br><span class="line">			pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">2</span>]==pi[<span class="number">3</span>] &amp;&amp; pi[<span class="number">3</span>]==pi[<span class="number">4</span>])<span class="comment">//0 1 234</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(pi[<span class="number">0</span>]==pi[<span class="number">1</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			pl[x].typ=<span class="number">5</span>;</span><br><span class="line">			pl[x].flg[<span class="number">1</span>]=pi[<span class="number">4</span>];</span><br><span class="line">			pl[x].flg[<span class="number">2</span>]=pi[<span class="number">0</span>];</span><br><span class="line">			pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			pl[x].typ=<span class="number">4</span>;</span><br><span class="line">			pl[x].flg[<span class="number">1</span>]=pi[<span class="number">4</span>];</span><br><span class="line">			pl[x].flg[<span class="number">2</span>]=pi[<span class="number">0</span>]+pi[<span class="number">1</span>];</span><br><span class="line">			pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">1</span>]==pi[<span class="number">2</span>] &amp;&amp; pi[<span class="number">2</span>]==pi[<span class="number">3</span>])<span class="comment">//0 123 4</span></span><br><span class="line">	&#123;</span><br><span class="line">		pl[x].typ=<span class="number">4</span>;</span><br><span class="line">		pl[x].flg[<span class="number">1</span>]=pi[<span class="number">1</span>];</span><br><span class="line">		pl[x].flg[<span class="number">2</span>]=pi[<span class="number">0</span>]+pi[<span class="number">4</span>];</span><br><span class="line">		pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">0</span>]==pi[<span class="number">1</span>] &amp;&amp; pi[<span class="number">2</span>]==pi[<span class="number">3</span>])<span class="comment">//01 23 4</span></span><br><span class="line">	&#123;</span><br><span class="line">		pl[x].typ=<span class="number">3</span>;</span><br><span class="line">		pl[x].flg[<span class="number">1</span>]=pi[<span class="number">3</span>];</span><br><span class="line">		pl[x].flg[<span class="number">2</span>]=pi[<span class="number">1</span>];</span><br><span class="line">		pl[x].flg[<span class="number">3</span>]=pi[<span class="number">4</span>];</span><br><span class="line">		pl[x].flgs=<span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">0</span>]==pi[<span class="number">1</span>] &amp;&amp; pi[<span class="number">3</span>]==pi[<span class="number">4</span>])<span class="comment">//01 2 34</span></span><br><span class="line">	&#123;</span><br><span class="line">		pl[x].typ=<span class="number">3</span>;</span><br><span class="line">		pl[x].flg[<span class="number">1</span>]=pi[<span class="number">4</span>];</span><br><span class="line">		pl[x].flg[<span class="number">2</span>]=pi[<span class="number">1</span>];</span><br><span class="line">		pl[x].flg[<span class="number">3</span>]=pi[<span class="number">2</span>];</span><br><span class="line">		pl[x].flgs=<span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">1</span>]==pi[<span class="number">2</span>] &amp;&amp; pi[<span class="number">3</span>]==pi[<span class="number">4</span>])<span class="comment">//0 12 34</span></span><br><span class="line">	&#123;</span><br><span class="line">		pl[x].typ=<span class="number">3</span>;</span><br><span class="line">		pl[x].flg[<span class="number">1</span>]=pi[<span class="number">4</span>];</span><br><span class="line">		pl[x].flg[<span class="number">2</span>]=pi[<span class="number">1</span>];</span><br><span class="line">		pl[x].flg[<span class="number">3</span>]=pi[<span class="number">0</span>];</span><br><span class="line">		pl[x].flgs=<span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">0</span>]==pi[<span class="number">1</span>])<span class="comment">//01 2 3 4</span></span><br><span class="line">	&#123;</span><br><span class="line">		pl[x].typ=<span class="number">2</span>;</span><br><span class="line">		pl[x].flg[<span class="number">1</span>]=pi[<span class="number">0</span>];</span><br><span class="line">		pl[x].flg[<span class="number">2</span>]=pi[<span class="number">2</span>]+pi[<span class="number">3</span>]+pi[<span class="number">4</span>];</span><br><span class="line">		pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">1</span>]==pi[<span class="number">2</span>])<span class="comment">//0 12 3 4</span></span><br><span class="line">	&#123;</span><br><span class="line">		pl[x].typ=<span class="number">2</span>;</span><br><span class="line">		pl[x].flg[<span class="number">1</span>]=pi[<span class="number">1</span>];</span><br><span class="line">		pl[x].flg[<span class="number">2</span>]=pi[<span class="number">0</span>]+pi[<span class="number">3</span>]+pi[<span class="number">4</span>];</span><br><span class="line">		pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">2</span>]==pi[<span class="number">3</span>])<span class="comment">//0 1 23 4</span></span><br><span class="line">	&#123;</span><br><span class="line">		pl[x].typ=<span class="number">2</span>;</span><br><span class="line">		pl[x].flg[<span class="number">1</span>]=pi[<span class="number">2</span>];</span><br><span class="line">		pl[x].flg[<span class="number">2</span>]=pi[<span class="number">0</span>]+pi[<span class="number">1</span>]+pi[<span class="number">4</span>];</span><br><span class="line">		pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(pi[<span class="number">3</span>]==pi[<span class="number">4</span>])<span class="comment">//0 1 2 34</span></span><br><span class="line">	&#123;</span><br><span class="line">		pl[x].typ=<span class="number">2</span>;</span><br><span class="line">		pl[x].flg[<span class="number">1</span>]=pi[<span class="number">3</span>];</span><br><span class="line">		pl[x].flg[<span class="number">2</span>]=pi[<span class="number">0</span>]+pi[<span class="number">1</span>]+pi[<span class="number">2</span>];</span><br><span class="line">		pl[x].flgs=<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		pl[x].typ=<span class="number">1</span>;</span><br><span class="line">		pl[x].flg[<span class="number">1</span>]=pi[<span class="number">0</span>]+pi[<span class="number">1</span>]+pi[<span class="number">2</span>]+pi[<span class="number">3</span>]+pi[<span class="number">4</span>];</span><br><span class="line">		pl[x].flgs=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wly</span><span class="params">(data x,data y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x.typ!=y.typ) <span class="keyword">return</span> x.typ&gt;y.typ;</span><br><span class="line">	<span class="keyword">if</span>(x.typ==y.typ)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x.flgs;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(x.flg[i]!=y.flg[i]) <span class="keyword">return</span> x.flg[i]&gt;y.flg[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> x.na&lt;y.na;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//return 0;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;pl[i].na&gt;&gt;c;</span><br><span class="line">			gettyp(i);</span><br><span class="line">		&#125;</span><br><span class="line">		sort(pl+<span class="number">1</span>,pl+<span class="number">1</span>+n,wly);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//printf("-%d %d %d %d %d-\n",pl[i].typ,pl[i].flg[1],pl[i].flg[2],pl[i].flg[3],pl[i].flgs);</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,pl[i].na.c_str());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-签到题"><a class="header-anchor" href="#C-签到题">♔</a>C 签到题</h2>
<h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3>
<p>公园有 x 条长凳。第 i 个长凳上坐着 a_i 个人。这时候又有 y 个人将来到公园，他们将选择坐在某些公园中的长凳上，那么当这 y 个人坐下后，记k = 所有椅子上的人数的最大值，那么k可能的最大值mx和最小值mn分别是多少。</p>
<h3 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h3>
<p>第一行包含一个整数 x (1 &lt;= x &lt;= 100) 表示公园中长椅的数目<br>
第二行包含一个整数 y (1 &lt;= y &lt;= 1000) 表示有 y 个人来到公园<br>
接下来 x 个整数 a_i (1&lt;=a_i&lt;=100)，表示初始时公园长椅上坐着的人数</p>
<h3 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h3>
<p>输出 mn 和 mx</p>
<h3 id="Examples-v2"><a class="header-anchor" href="#Examples-v2">♔</a>Examples</h3>
<h4 id="Input-v6"><a class="header-anchor" href="#Input-v6">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">7</span><br><span class="line">1</span><br><span class="line">6</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<h4 id="Output-v6"><a class="header-anchor" href="#Output-v6">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 13</span><br></pre></td></tr></table></figure>
<h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3>
<p>这一题比较简单，对于最大值最大，直接输出最大值加新来的人数即可；对于最大值最小先求出各个椅子上最大的人数，然后求出各椅子上人数与最大人数的差的和，若和大于等于新来的人数，则直接输出最大值，否则输出（最大值-新来的人数）/ 椅子数的上取整结果。</p>
<h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,maxn,ksum;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		maxn=<span class="built_in">max</span>(maxn,a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) ksum+=(maxn-a[i]);</span><br><span class="line">	<span class="keyword">if</span>(ksum&gt;=m) <span class="built_in">printf</span>(<span class="string">"%d"</span>,maxn);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>,maxn+(m-ksum+n<span class="number">-1</span>)/n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">" %d"</span>,maxn+m);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>作业</category>
        <category>程序设计思维</category>
      </categories>
      <tags>
        <tag>作业</tag>
        <tag>程序设计思维</tag>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>【作业向】程序设计思维与实践 Week8 作业</title>
    <url>/blog/2020/04/18/week8hw/</url>
    <content><![CDATA[<h1>【作业向】程序设计思维与实践 Week8作业<a id="more"></a></h1>
<h2 id="A-区间选点-II"><a class="header-anchor" href="#A-区间选点-II">♔</a>A 区间选点 II</h2>
<h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3>
<p>给定一个数轴上的 n 个区间，要求在数轴上选取最少的点使得第 i 个区间 [ai, bi] 里至少有 ci 个点</p>
<p><strong>使用差分约束系统的解法解决这道题</strong></p>
<h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3>
<p>输入第一行一个整数 n 表示区间的个数，接下来的 n 行，每一行两个用空格隔开的整数 a，b 表示区间的左右端点。1 &lt;= n &lt;= 50000， 0 &lt;= ai &lt;= bi &lt;= 50000 并且 1 &lt;= ci &lt;= bi - ai+1。</p>
<h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3>
<p>输出一个整数表示最少选取的点的个数</p>
<h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3>
<h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">3 7 3</span><br><span class="line">8 10 3</span><br><span class="line">6 8 1</span><br><span class="line">1 3 1</span><br><span class="line">10 11 1</span><br></pre></td></tr></table></figure>
<h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>
<h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3>
<p>这一题用差分约束的方法来做的话就需要构造不等式组，其中</p>
<ul>
<li>记sum[i]表示数轴上[0,i]之间选点的个数</li>
<li>对于第i个区间[ai, bi]需要满足sum[bi] - sum[ai - 1] ≥ ci</li>
<li>同时还要保证0 ≤ sum[i] - sum[i- 1] ≤ 1</li>
</ul>
<p>（除此之外，由于点的编号从0开始，ai-1会小于0导致数组越界，故将各点整体加1</p>
<h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> adj[<span class="number">50005</span>],nxt[<span class="number">150005</span>],too[<span class="number">150005</span>],w[<span class="number">150005</span>],ecnt;</span><br><span class="line"><span class="keyword">int</span> n,s,t,dis[<span class="number">50005</span>],visit[<span class="number">50005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">	q.push(s);</span><br><span class="line">	visit[s]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> u,v;</span><br><span class="line">	<span class="keyword">while</span>(!q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		u=q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		visit[u]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=adj[u];i;i=nxt[i])</span><br><span class="line">		&#123;</span><br><span class="line">			v=too[i];</span><br><span class="line">			<span class="keyword">if</span>(dis[v]&lt;dis[u]+w[i])</span><br><span class="line">			&#123;</span><br><span class="line">				dis[v]=dis[u]+w[i];</span><br><span class="line">				<span class="keyword">if</span>(!visit[v])</span><br><span class="line">				&#123;</span><br><span class="line">					visit[v]=<span class="number">1</span>;</span><br><span class="line">					q.push(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line">	<span class="keyword">int</span> a,b,c;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	s=<span class="number">0x7fffffff</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">		nxt[++ecnt]=adj[a],adj[a]=ecnt,too[ecnt]=b+<span class="number">1</span>,w[ecnt]=c;</span><br><span class="line">		s=<span class="built_in">min</span>(s,a);</span><br><span class="line">		t=<span class="built_in">max</span>(t,b+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=s;i&lt;=t;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		nxt[++ecnt]=adj[i],adj[i]=ecnt,too[ecnt]=i+<span class="number">1</span>,w[ecnt]=<span class="number">0</span>;</span><br><span class="line">		nxt[++ecnt]=adj[i+<span class="number">1</span>],adj[i+<span class="number">1</span>]=ecnt,too[ecnt]=i,w[ecnt]=<span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	spfa();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,dis[t]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-猫猫向前冲"><a class="header-anchor" href="#B-猫猫向前冲">♔</a>B 猫猫向前冲</h2>
<h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3>
<p>众所周知， TT 是一位重度爱猫人士，他有一只神奇的魔法猫。<br>
有一天，TT 在 B 站上观看猫猫的比赛。一共有 N 只猫猫，编号依次为1，2，3，…，N进行比赛。比赛结束后，Up 主会为所有的猫猫从前到后依次排名并发放爱吃的小鱼干。不幸的是，此时 TT 的电子设备遭到了宇宙射线的降智打击，一下子都连不上网了，自然也看不到最后的颁奖典礼。<br>
不幸中的万幸，TT 的魔法猫将每场比赛的结果都记录了下来，现在他想编程序确定字典序最小的名次序列，请你帮帮他。</p>
<h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3>
<p>输入有若干组，每组中的第一行为二个数N（1&lt;=N&lt;=500），M；其中N表示猫猫的个数，M表示接着有M行的输入数据。接下来的M行数据中，每行也有两个整数P1，P2表示即编号为 P1 的猫猫赢了编号为 P2 的猫猫。</p>
<h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3>
<p>给出一个符合要求的排名。输出时猫猫的编号之间有空格，最后一名后面没有空格!</p>
<p>其他说明：符合条件的排名可能不是唯一的，此时要求输出时编号小的队伍在前；输入数据保证是正确的，即输入数据确保一定能有一个符合要求的排名。</p>
<h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3>
<h4 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 3</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">4 3</span><br></pre></td></tr></table></figure>
<h4 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2 4 3</span><br></pre></td></tr></table></figure>
<h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3>
<p>对于每一组a胜过b，构建一条从a指向b的有向边，然后进行拓扑排序。特别的，对于输出时要求编号小的队伍在前，因此存储入度为0的节点的编号的队列使用按升序排序的优先队列。</p>
<h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,t;</span><br><span class="line"><span class="keyword">int</span> tu[<span class="number">505</span>][<span class="number">505</span>],d[<span class="number">505</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line">	priority_queue&lt; <span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(tu,<span class="number">0</span>,<span class="keyword">sizeof</span>(tu));</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;j,&amp;k);</span><br><span class="line">			<span class="keyword">if</span>(tu[j][k]) <span class="keyword">continue</span>;</span><br><span class="line">			tu[j][k]=<span class="number">1</span>;</span><br><span class="line">			d[k]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">			<span class="keyword">if</span>(d[i]==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				q.push(i);</span><br><span class="line">			&#125;</span><br><span class="line">		t=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(!q.empty())</span><br><span class="line">		&#123;</span><br><span class="line">			k=q.top();</span><br><span class="line">			<span class="keyword">if</span>(t!=n<span class="number">-1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d "</span>,k);</span><br><span class="line">				t++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,k);</span><br><span class="line">			q.pop();</span><br><span class="line">			<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(tu[k][i])</span><br><span class="line">				&#123;</span><br><span class="line">					d[i]--;</span><br><span class="line">					<span class="keyword">if</span>(d[i]==<span class="number">0</span>) q.push(i);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-班长竞选"><a class="header-anchor" href="#C-班长竞选">♔</a>C 班长竞选</h2>
<h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3>
<p>大学班级选班长，N 个同学均可以发表意见 若意见为 A B 则表示 A 认为 B 合适，意见具有传递性，即 A 认为 B 合适，B 认为 C 合适，则 A 也认为 C 合适 勤劳的 TT 收集了M条意见，想要知道最高票数，并给出一份候选人名单，即所有得票最多的同学，你能帮帮他吗？</p>
<h3 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h3>
<p>本题有多组数据。第一行 T 表示数据组数。每组数据开始有两个整数 N 和 M (2 &lt;= n &lt;= 5000, 0 &lt;m &lt;= 30000)，接下来有 M 行包含两个整数 A 和 B(A != B) 表示 A 认为 B 合适。</p>
<h3 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h3>
<p>对于每组数据，第一行输出 “Case x: ”，x 表示数据的编号，从1开始，紧跟着是最高的票数。 接下来一行输出得票最多的同学的编号，用空格隔开，不忽略行末空格！</p>
<h3 id="Examples-v2"><a class="header-anchor" href="#Examples-v2">♔</a>Examples</h3>
<h4 id="Input-v6"><a class="header-anchor" href="#Input-v6">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">4 3</span><br><span class="line">3 2</span><br><span class="line">2 0</span><br><span class="line">2 1</span><br><span class="line"></span><br><span class="line">3 3</span><br><span class="line">1 0</span><br><span class="line">2 1</span><br><span class="line">0 2</span><br></pre></td></tr></table></figure>
<h4 id="Output-v6"><a class="header-anchor" href="#Output-v6">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Case 1: 2</span><br><span class="line">0 1</span><br><span class="line">Case 2: 2</span><br><span class="line">0 1 2</span><br></pre></td></tr></table></figure>
<h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3>
<p>这一题首先要对建好的图求强连通分量，然后将各强连通分量缩成一个点并对缩号的点进行反向建图，从各入度为零的点开始跑dfs，记录他们所能到达的所有强连通分量的点数总和ppsum[i]，然后对各ppsum[i]求max，求得的max-1即为答案（因为要去掉自身），然后对各点进行判断，若该的所在的强连通分量的ppsum为取得的最大值，则将该点输出。</p>
<p>（又及：在跑dfs时因为建返图时会有重边，因此要注意对重边的处理</p>
<h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> adj[<span class="number">5005</span>],adj1[<span class="number">5005</span>],nxt[<span class="number">600005</span>],too[<span class="number">600005</span>],ecnt;</span><br><span class="line"><span class="keyword">int</span> dfn[<span class="number">5005</span>],low[<span class="number">5005</span>],visit[<span class="number">5005</span>],stck[<span class="number">5005</span>],fa[<span class="number">5005</span>],ppsum[<span class="number">5005</span>],psum[<span class="number">5005</span>],du[<span class="number">5005</span>],ti[<span class="number">5005</span>];</span><br><span class="line"><span class="keyword">int</span> M,n,m,top,times,ssum,maxp,pcnt,flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	visit[u]=<span class="number">1</span>,stck[++top]=u;</span><br><span class="line">	dfn[u]=low[u]=++times;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=adj[u];i;i=nxt[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=too[i];</span><br><span class="line">		<span class="keyword">if</span>(!dfn[v])</span><br><span class="line">		&#123;</span><br><span class="line">			tarjan(v);</span><br><span class="line">			low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(visit[v] &amp;&amp; dfn[v]&lt;low[u]) low[u]=dfn[v];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dfn[u]==low[u])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v;</span><br><span class="line">		visit[u]=<span class="number">0</span>;</span><br><span class="line">		fa[u]=++ssum;</span><br><span class="line">		psum[ssum]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(v=stck[top--],v!=u) fa[v]=ssum,psum[ssum]++,visit[v]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> cnt=psum[x];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=adj1[x];i;i=nxt[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!visit[too[i]])</span><br><span class="line">		&#123;</span><br><span class="line">			visit[too[i]]=<span class="number">1</span>;</span><br><span class="line">			cnt+=dfs(too[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,k,h;</span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;M);</span><br><span class="line">	<span class="keyword">for</span>(h=<span class="number">1</span>;h&lt;=M;h++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(adj,<span class="number">0</span>,<span class="keyword">sizeof</span>(adj));</span><br><span class="line">		<span class="built_in">memset</span>(adj1,<span class="number">0</span>,<span class="keyword">sizeof</span>(adj1));</span><br><span class="line">		<span class="built_in">memset</span>(nxt,<span class="number">0</span>,<span class="keyword">sizeof</span>(nxt));</span><br><span class="line">		<span class="built_in">memset</span>(du,<span class="number">0</span>,<span class="keyword">sizeof</span>(du));</span><br><span class="line">		<span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span>(dfn));</span><br><span class="line">		<span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="keyword">sizeof</span>(low));</span><br><span class="line">		<span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">		<span class="built_in">memset</span>(ppsum,<span class="number">0</span>,<span class="keyword">sizeof</span>(ppsum));</span><br><span class="line">		ecnt=top=times=ssum=maxp=pcnt=flag=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">			nxt[++ecnt]=adj[x],adj[x]=ecnt,too[ecnt]=y;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">			<span class="keyword">if</span>(!dfn[i]) tarjan(i);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(j=adj[i];j;j=nxt[j])</span><br><span class="line">			&#123;</span><br><span class="line">				k=too[j];</span><br><span class="line">				<span class="keyword">if</span>(fa[i]!=fa[k])</span><br><span class="line">				&#123;</span><br><span class="line">					nxt[++ecnt]=adj1[fa[k]],adj1[fa[k]]=ecnt,too[ecnt]=fa[i];</span><br><span class="line">					du[fa[i]]++;</span><br><span class="line">				&#125;			</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=ssum;i++) </span><br><span class="line">			<span class="keyword">if</span>(!du[i])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">				visit[i]=<span class="number">1</span>;</span><br><span class="line">				maxp=<span class="built_in">max</span>(maxp,ppsum[i]=dfs(i));</span><br><span class="line">			&#125; </span><br><span class="line"><span class="comment">//		for(i=1;i&lt;=ssum;i++)</span></span><br><span class="line"><span class="comment">//			maxp=max(maxp,ppsum[i]);</span></span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=ssum;i++)</span><br><span class="line">			<span class="keyword">if</span>(ppsum[i]==maxp) ti[++pcnt]=i;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,h,maxp<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=pcnt;j++)</span><br><span class="line">				<span class="keyword">if</span>(fa[i]==ti[j])</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">						flag=<span class="number">1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">" %d"</span>,i);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>作业</category>
        <category>程序设计思维</category>
      </categories>
      <tags>
        <tag>作业</tag>
        <tag>程序设计思维</tag>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>【作业向】程序设计思维与实践 CSP-M2</title>
    <url>/blog/2020/04/17/csp-m2/</url>
    <content><![CDATA[<h1>【作业向】程序设计思维与实践 CSP-M2<a id="more"></a></h1>


	<div class="row">
    <embed src="第二周题目.pdf" width="100%" height="550" type="application/pdf">
	</div>



<h2 id="A-HRZ的序列"><a class="header-anchor" href="#A-HRZ的序列">♔</a>A  HRZ的序列</h2>
<p>这一题可以先对所有数进行遍历，求出最大和最小值，然后再次遍历，对于每个数ai判断ai是否等于最大值或最小值，ai-最小值是否等于最大值-ai，若都不符合则不满足条件，输出NO，跳出循环。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll T,n,maxi,mini,flag;</span><br><span class="line">ll ai[<span class="number">10005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll i,j,k;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)</span><br><span class="line">	&#123;</span><br><span class="line">		flag=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">if</span>(n&gt;=<span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;ai[<span class="number">1</span>]);</span><br><span class="line">		maxi=mini=ai[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;ai[i]);</span><br><span class="line">			maxi=<span class="built_in">max</span>(maxi,ai[i]);</span><br><span class="line">			mini=<span class="built_in">min</span>(mini,ai[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(ai[i]==maxi || ai[i]==mini || maxi-ai[i]==ai[i]-mini) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				flag=<span class="number">1</span>;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-HRZ学英语"><a class="header-anchor" href="#B-HRZ学英语">♔</a>B HRZ学英语</h2>
<p>这一题可以用尺取法来做，从第一个字符开始，若区间中的不同的字母的数量+？的数量等于26时进行输出，输出时若遇到？，为了保证字典序最小则从A开始向后查询第一个没有出现过的字母，标记并输出。若区间中的不同的字母的数量+？的数量小于26且下一个字符为？或没出现过时，右边的标记右移一位，并对字符数量作相应的修改；当下一个字符出现过时，则左边的标记右移，直到移出了下一个字母为止。当左右标记均大于字符串的长度时若还未输出，则输出-1</p>
<p>（又及：模拟考试时结束的边界条件没写好导致才得了40分😭，下次一定注意</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">27</span>],sumz;</span><br><span class="line"><span class="keyword">int</span> flag,n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>,c);</span><br><span class="line">	n=<span class="built_in">strlen</span>(c);</span><br><span class="line">	<span class="keyword">if</span>(c[<span class="number">0</span>]==<span class="string">'?'</span>) sum[<span class="number">26</span>]++;</span><br><span class="line">	<span class="keyword">else</span> sum[c[<span class="number">0</span>]-<span class="string">'A'</span>]++,sumz++;</span><br><span class="line">	<span class="keyword">while</span>(l&lt;n &amp;&amp; r&lt;n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(c[r]==<span class="string">'?'</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			sum[<span class="number">26</span>]++;</span><br><span class="line">			r++;</span><br><span class="line">			<span class="keyword">if</span>(sumz+sum[<span class="number">26</span>]==<span class="number">26</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(!sum[c[r]-<span class="string">'A'</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				sum[c[r++]-<span class="string">'A'</span>]=<span class="number">1</span>;</span><br><span class="line">				sumz++;</span><br><span class="line">				<span class="keyword">if</span>(sumz+sum[<span class="number">26</span>]==<span class="number">26</span>) <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> </span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(c[l]==<span class="string">'?'</span>) sum[<span class="number">26</span>]--;</span><br><span class="line">				<span class="keyword">else</span> sum[c[l]-<span class="string">'A'</span>]=<span class="number">0</span>,sumz--;</span><br><span class="line">				l++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(sumz+sum[<span class="number">26</span>]==<span class="number">26</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(i=l;i&lt;r;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(c[i]==<span class="string">'?'</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)</span><br><span class="line">					<span class="keyword">if</span>(!sum[j]) </span><br><span class="line">					&#123;</span><br><span class="line">						sum[j]=<span class="number">1</span>;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="string">'A'</span>+j);</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%c"</span>,c[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-咕咕东的奇妙序列"><a class="header-anchor" href="#C-咕咕东的奇妙序列">♔</a>C 咕咕东的奇妙序列</h2>
<p>这一题就比较麻烦了，首先要预处理出1到9、1到99、1到999、1到9999。。。的长度，然后处理出第9组，第99组，第999组。。。的长度。然后读入q，先判断q在pow(10,n)-1组到pow(10,n+1)-1组之间，然后通过二分找到具体的组数。然后通过循环判断在该组的第几位，然后确定出具体的数字并输出。</p>
<p>这一题的细节的地方还是蛮多的，坑点也有，比如用c++自带的pow函数会出问题，只好自己写了一个，这还是蛮锻炼代码能力和思维能力的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll M,q,k;</span><br><span class="line">ll dl[<span class="number">20</span>],dll[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll a=((dl[k<span class="number">-1</span>]+k)+(dl[k<span class="number">-1</span>]+k*x))*x/<span class="number">2</span>;</span><br><span class="line">	ll b=((dl[k<span class="number">-1</span>]+k)+(dl[k<span class="number">-1</span>]+k*(x+<span class="number">1</span>)))*(x+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(b&lt;q) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">power</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll n=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=y;i++) n*=x;</span><br><span class="line">	<span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll i,j;</span><br><span class="line">	dl[<span class="number">1</span>]=<span class="number">9</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">15</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		dl[i]=dl[i<span class="number">-1</span>]+i*(power(<span class="number">10</span>,i)-power(<span class="number">10</span>,i<span class="number">-1</span>));</span><br><span class="line">		<span class="comment">//printf("%lld\n",dl[i]);</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		dll[i]=(dl[i<span class="number">-1</span>]+i+dl[i])*(power((ll)<span class="number">10</span>,i)-power((ll)<span class="number">10</span>,i<span class="number">-1</span>))/<span class="number">2</span>;</span><br><span class="line">		<span class="comment">//printf("-%lld-\n",dll[i]);</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;M);</span><br><span class="line">	<span class="keyword">while</span>(M--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;q);</span><br><span class="line">		<span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=<span class="number">9</span>;k++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(q&lt;=dll[k]) <span class="keyword">break</span>;</span><br><span class="line">			q-=dll[k];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//printf("%lld - %lld\n",q,k);</span></span><br><span class="line">		ll l=<span class="number">0</span>,r=power(<span class="number">10</span>,k)<span class="number">-1</span>,mid;</span><br><span class="line">		<span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">		&#123;</span><br><span class="line">			mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span>(check(mid)) r=mid<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//printf("%lld %lld\n",l,r);</span></span><br><span class="line">		q-=((dl[k<span class="number">-1</span>]+k)+(dl[k<span class="number">-1</span>]+k*l))*l/<span class="number">2</span>;</span><br><span class="line">		<span class="comment">//printf("%lld\n",q);</span></span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(q&lt;=dl[i])</span><br><span class="line">			&#123;</span><br><span class="line">				q-=dl[i<span class="number">-1</span>];</span><br><span class="line">				<span class="comment">//printf("+%lld+\n",q);</span></span><br><span class="line">				<span class="keyword">if</span>(i==<span class="number">1</span>) </span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,q);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				ll hi=(q+i<span class="number">-1</span>)/i;</span><br><span class="line">				ll xt=q%i;</span><br><span class="line">				ll dsg=power(<span class="number">10</span>,i<span class="number">-1</span>)+hi<span class="number">-1</span>;</span><br><span class="line">				<span class="keyword">if</span>(xt==<span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="comment">//printf("-=%lld=-\n",dsg);</span></span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dsg%<span class="number">10</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;	</span><br><span class="line">					xt=i-xt;</span><br><span class="line">					ll xxx=power(<span class="number">10</span>,xt+<span class="number">1</span>);</span><br><span class="line">					<span class="comment">//printf("%lld-%lld-%lld-%lld-\n",dsg,xt,xxx,i);</span></span><br><span class="line">					dsg=dsg%xxx;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(dsg/power(<span class="number">10</span>,xt))); </span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>作业</category>
        <category>程序设计思维</category>
      </categories>
      <tags>
        <tag>作业</tag>
        <tag>程序设计思维</tag>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>【作业向】程序设计思维与实践 Week7 作业</title>
    <url>/blog/2020/04/16/week7hw/</url>
    <content><![CDATA[<h1>【作业向】程序设计思维与实践 Week7作业<a id="more"></a></h1>
<h2 id="A-TT-的魔法猫"><a class="header-anchor" href="#A-TT-的魔法猫">♔</a>A TT 的魔法猫</h2>
<h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3>
<p>众所周知，TT 有一只魔法猫。</p>
<p>这一天，TT 正在专心致志地玩《猫和老鼠》游戏，然而比赛还没开始，聪明的魔法猫便告诉了 TT 比赛的最终结果。TT 非常诧异，不仅诧异于他的小猫咪居然会说话，更诧异于这可爱的小不点为何有如此魔力？</p>
<p>魔法猫告诉 TT，它其实拥有一张游戏胜负表，上面有 N 个人以及 M 个胜负关系，每个胜负关系为 A B，表示 A 能胜过 B，且胜负关系具有传递性。即 A 胜过 B，B 胜过 C，则 A 也能胜过 C。</p>
<p>TT 不相信他的小猫咪什么比赛都能预测，因此他想知道有多少对选手的胜负无法预先得知，你能帮帮他吗？</p>
<h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3>
<p>第一行给出数据组数。</p>
<p>每组数据第一行给出 N 和 M（N , M &lt;= 500）。</p>
<p>接下来 M 行，每行给出 A B，表示 A 可以胜过 B。</p>
<h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3>
<p>对于每一组数据，判断有多少场比赛的胜负不能预先得知。注意 (a, b) 与 (b, a) 等价，即每一个二元组只被计算一次。</p>
<h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3>
<h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">3 3</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 3</span><br><span class="line">3 2</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">4 2</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure>
<h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">0</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3>
<p>由题意可知，这一题中的胜负关系具有传递性，故我们可以使用Floyd算法求出任意两点的胜负关系，我们可以设tu[a] [b]=1表示a比b强，tu[a] [b]=0表示a和b胜负关系不明，当tu[a] [b]=dis[b] [a]=0时表示a和b的胜负关系无法判断。这样我们在读入已知的胜负关系之后，在跑Floyd的时候将更新条件设置为tu[i] [j]=max(tu[i] [j],tu[i] [k]&amp;tu[k] [j])即可得到答案。但裸的Floyd会超时，我们需要做一下剪枝，即当tu[i] [k]=1时才将k作为中间点进行更新。</p>
<h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,m,n; </span><br><span class="line"><span class="keyword">int</span> tu[<span class="number">5005</span>][<span class="number">5005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++) tu[i][j]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">			tu[a][b]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(tu[i][k])</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">					&#123;</span><br><span class="line">						tu[i][j]=<span class="built_in">max</span>(tu[i][j],tu[i][k]&amp;tu[k][j]);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		b=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(tu[i][j]==<span class="number">0</span> &amp;&amp; tu[j][i]==<span class="number">0</span>) b++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-TT-的旅行日记"><a class="header-anchor" href="#B-TT-的旅行日记">♔</a>B TT 的旅行日记</h2>
<h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3>
<p>众所周知，TT 有一只魔法猫。</p>
<p>今天他在 B 站上开启了一次旅行直播，记录他与魔法猫在喵星旅游时的奇遇。 TT 从家里出发，准备乘坐猫猫快线前往喵星机场。猫猫快线分为经济线和商业线两种，它们的速度与价钱都不同。当然啦，商业线要比经济线贵，TT 平常只能坐经济线，但是今天 TT 的魔法猫变出了一张商业线车票，可以坐一站商业线。假设 TT 换乘的时间忽略不计，请你帮 TT 找到一条去喵星机场最快的线路，不然就要误机了！</p>
<h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3>
<p>输入包含多组数据。每组数据第一行为 3 个整数 N, S 和 E (2 ≤ N ≤ 500, 1 ≤ S, E ≤ 100)，即猫猫快线中的车站总数，起点和终点（即喵星机场所在站）编号。</p>
<p>下一行包含一个整数 M (1 ≤ M ≤ 1000)，即经济线的路段条数。</p>
<p>接下来有 M 行，每行 3 个整数 X, Y, Z (1 ≤ X, Y ≤ N, 1 ≤ Z ≤ 100)，表示 TT 可以乘坐经济线在车站 X 和车站 Y 之间往返，其中单程需要 Z 分钟。</p>
<p>下一行为商业线的路段条数 K (1 ≤ K ≤ 1000)。</p>
<p>接下来 K 行是商业线路段的描述，格式同经济线。</p>
<p>所有路段都是双向的，但有可能必须使用商业车票才能到达机场。保证最优解唯一。</p>
<h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3>
<p>对于每组数据，输出3行。第一行按访问顺序给出 TT 经过的各个车站（包括起点和终点），第二行是 TT 换乘商业线的车站编号（如果没有使用商业线车票，输出&quot;Ticket Not Used&quot;，不含引号），第三行是 TT 前往喵星机场花费的总时间。</p>
<p><strong>本题不忽略多余的空格和制表符，且每一组答案间要输出一个换行</strong></p>
<h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3>
<h4 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 1 4</span><br><span class="line">4</span><br><span class="line">1 2 2</span><br><span class="line">1 3 3</span><br><span class="line">2 4 4</span><br><span class="line">3 4 5</span><br><span class="line">1</span><br><span class="line">2 4 3</span><br></pre></td></tr></table></figure>
<h4 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2 4</span><br><span class="line">2</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3>
<p>由题意得，商业线至多可以使用一次，因此我们可以从起点和终点开始各跑一次堆优化的Dijkstra算法求最短路。起点到各点的最短路记为dis[i] [0]，使用pre[i] [0]记录各点被哪个节点松弛；终点到各点的最短路记为dis[i] [1]，使用pre[i] [1]记录各点被哪个节点松弛。然后读入各条商业线的信息端点u、v，花费w，然后进行比较不使用商业线和正反使用商业线这三种情况哪种消耗时间少并记录，最后根据结果输出即可。</p>
<h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s,e,k,mind,l,r;</span><br><span class="line"><span class="keyword">int</span> adj[<span class="number">1010</span>],nxt[<span class="number">20020</span>],too[<span class="number">20020</span>],w[<span class="number">20020</span>],ecnt;</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">1010</span>][<span class="number">2</span>],visit[<span class="number">1010</span>],pre[<span class="number">1010</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">priority_queue&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dij</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(q.<span class="built_in">size</span>()) q.pop();</span><br><span class="line">	<span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">	dis[x][f]=<span class="number">0</span>;</span><br><span class="line">	q.push(make_pair(<span class="number">0</span>,x));</span><br><span class="line">	<span class="keyword">int</span> u,v;</span><br><span class="line">	<span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		u=q.top().second;</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="comment">//if(visit[u]) continue;</span></span><br><span class="line">		visit[u]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=adj[u];i;i=nxt[i])</span><br><span class="line">		&#123;</span><br><span class="line">			v=too[i];</span><br><span class="line">			<span class="keyword">if</span>(dis[v][f]&gt;dis[u][f]+w[i])</span><br><span class="line">			&#123;</span><br><span class="line">				dis[v][f]=dis[u][f]+w[i];</span><br><span class="line">				pre[v][f]=u;</span><br><span class="line">				q.push(make_pair(-dis[v][f],v));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeout1</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==s)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>,x);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	makeout1(pre[x][<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">" %d"</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeout2</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">" %d"</span>,x);</span><br><span class="line">	<span class="keyword">if</span>(x==e) <span class="keyword">return</span>;</span><br><span class="line">	makeout2(pre[x][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">int</span> a,b,c;</span><br><span class="line">	<span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;s,&amp;e)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			adj[i]=<span class="number">0</span>;dis[i][<span class="number">0</span>]=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">			dis[i][<span class="number">1</span>]=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">			pre[i][<span class="number">0</span>]=<span class="number">0</span>;pre[i][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ecnt=<span class="number">0</span>;l=<span class="number">0</span>;r=<span class="number">0</span>;</span><br><span class="line">		<span class="comment">//memset(nxt,0,sizeof(nxt));</span></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">			nxt[++ecnt]=adj[a],adj[a]=ecnt,too[ecnt]=b,w[ecnt]=c;</span><br><span class="line">			nxt[++ecnt]=adj[b],adj[b]=ecnt,too[ecnt]=a,w[ecnt]=c;</span><br><span class="line">		&#125;</span><br><span class="line">		dij(s,<span class="number">0</span>);</span><br><span class="line">		dij(e,<span class="number">1</span>);</span><br><span class="line">		mind=dis[e][<span class="number">0</span>];</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">			<span class="keyword">if</span>(mind&gt;dis[a][<span class="number">0</span>]+dis[b][<span class="number">1</span>]+c)</span><br><span class="line">			&#123;</span><br><span class="line">				mind=dis[a][<span class="number">0</span>]+dis[b][<span class="number">1</span>]+c;</span><br><span class="line">				l=a,r=b;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(mind&gt;dis[b][<span class="number">0</span>]+dis[a][<span class="number">1</span>]+c)</span><br><span class="line">			&#123;</span><br><span class="line">				mind=dis[b][<span class="number">0</span>]+dis[a][<span class="number">1</span>]+c;</span><br><span class="line">				l=b,r=a;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(l==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			makeout1(e);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"\nTicket Not Used\n%d\n"</span>,mind);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			makeout1(l);</span><br><span class="line">			makeout2(r);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"\n%d\n%d\n"</span>,l,mind);</span><br><span class="line">		&#125;</span><br><span class="line">		flag=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-TT的美梦"><a class="header-anchor" href="#C-TT的美梦">♔</a>C TT的美梦</h2>
<h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3>
<p>这一晚，TT 做了个美梦！</p>
<p>在梦中，TT 的愿望成真了，他成为了喵星的统领！喵星上有 N 个商业城市，编号 1 ～ N，其中 1 号城市是 TT 所在的城市，即首都。</p>
<p>喵星上共有 M 条有向道路供商业城市相互往来。但是随着喵星商业的日渐繁荣，有些道路变得非常拥挤。正在 TT 为之苦恼之时，他的魔法小猫咪提出了一个解决方案！TT 欣然接受并针对该方案颁布了一项新的政策。</p>
<p>具体政策如下：对每一个商业城市标记一个正整数，表示其繁荣程度，当每一只喵沿道路从一个商业城市走到另一个商业城市时，TT 都会收取它们（目的地繁荣程度 - 出发地繁荣程度）^ 3 的税。</p>
<p>TT 打算测试一下这项政策是否合理，因此他想知道从首都出发，走到其他城市至少要交多少的税，如果总金额小于 3 或者无法到达请悄咪咪地打出 ‘?’。</p>
<h3 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h3>
<p>第一行输入 T，表明共有 T 组数据。（1 &lt;= T &lt;= 50）</p>
<p>对于每一组数据，第一行输入 N，表示点的个数。（1 &lt;= N &lt;= 200）</p>
<p>第二行输入 N 个整数，表示 1 ～ N 点的权值 a[i]。（0 &lt;= a[i] &lt;= 20）</p>
<p>第三行输入 M，表示有向道路的条数。（0 &lt;= M &lt;= 100000）</p>
<p>接下来 M 行，每行有两个整数 A B，表示存在一条 A 到 B 的有向道路。</p>
<p>接下来给出一个整数 Q，表示询问个数。（0 &lt;= Q &lt;= 100000）</p>
<p>每一次询问给出一个 P，表示求 1 号点到 P 号点的最少税费。</p>
<h3 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h3>
<p>每个询问输出一行，如果不可达或税费小于 3 则输出 ‘?’。</p>
<h3 id="Examples-v2"><a class="header-anchor" href="#Examples-v2">♔</a>Examples</h3>
<h4 id="Input-v6"><a class="header-anchor" href="#Input-v6">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br><span class="line">6 7 8 9 10</span><br><span class="line">6</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">1 5</span><br><span class="line">5 4</span><br><span class="line">4 5</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">10</span><br><span class="line">1 2 4 4 5 6 7 8 9 10</span><br><span class="line">10</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 1</span><br><span class="line">1 4</span><br><span class="line">4 5</span><br><span class="line">5 6</span><br><span class="line">6 7</span><br><span class="line">7 8</span><br><span class="line">8 9</span><br><span class="line">9 10</span><br><span class="line">2</span><br><span class="line">3 10</span><br></pre></td></tr></table></figure>
<h4 id="Output-v6"><a class="header-anchor" href="#Output-v6">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Case 1:</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">Case 2:</span><br><span class="line">?</span><br><span class="line">?</span><br></pre></td></tr></table></figure>
<h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3>
<p>这一题在用spfa求最短路的同时要注意负环的处理，找到负环后应将负环上的点及能够到达负环的点打上标记，最后对于询问的点，若距离小于3或不可到达或被打上了标记则输出？，否则输出最短路的长度。</p>
<h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,m,n,q;</span><br><span class="line"><span class="keyword">int</span> h[<span class="number">205</span>],dis[<span class="number">205</span>],flag[<span class="number">205</span>],visit[<span class="number">205</span>],ti[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> adj[<span class="number">205</span>],nxt[<span class="number">200005</span>],too[<span class="number">200005</span>],w[<span class="number">200005</span>],ecnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	flag[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=adj[x];i;i=nxt[i]) </span><br><span class="line">		<span class="keyword">if</span>(!flag[too[i]]) dfs(too[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">	<span class="built_in">memset</span>(ti,<span class="number">0</span>,<span class="keyword">sizeof</span>(ti));</span><br><span class="line">	<span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line">	dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">	q.push(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> u,v;</span><br><span class="line">	<span class="keyword">while</span>(!q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		u=q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		visit[u]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(flag[u]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=adj[u];i;i=nxt[i])</span><br><span class="line">		&#123;</span><br><span class="line">			v=too[i];</span><br><span class="line">			<span class="keyword">if</span>(dis[v]&gt;dis[u]+w[i])</span><br><span class="line">			&#123;</span><br><span class="line">				dis[v]=dis[u]+w[i];</span><br><span class="line">				<span class="keyword">if</span>(!visit[v])</span><br><span class="line">				&#123;</span><br><span class="line">					visit[v]=<span class="number">1</span>;</span><br><span class="line">					q.push(v);</span><br><span class="line">					ti[v]++;</span><br><span class="line">					<span class="keyword">if</span>(ti[v]&gt;=n) dfs(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,t;</span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">for</span>(t=<span class="number">1</span>;t&lt;=T;t++)</span><br><span class="line">	&#123;</span><br><span class="line">		ecnt=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(adj,<span class="number">0</span>,<span class="keyword">sizeof</span>(adj));</span><br><span class="line">		<span class="built_in">memset</span>(nxt,<span class="number">0</span>,<span class="keyword">sizeof</span>(nxt));</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;h[i]),dis[i]=<span class="number">0x7fffffff</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">			nxt[++ecnt]=adj[a],adj[a]=ecnt,too[ecnt]=b,w[ecnt]=(h[b]-h[a])*(h[b]-h[a])*(h[b]-h[a]);</span><br><span class="line">		&#125;</span><br><span class="line">		spfa();</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,t);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;j);</span><br><span class="line">			<span class="keyword">if</span>(dis[j]&lt;<span class="number">3</span> || dis[j]==<span class="number">0x7fffffff</span> || flag[j]) <span class="built_in">printf</span>(<span class="string">"?\n"</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>作业</category>
        <category>程序设计思维</category>
      </categories>
      <tags>
        <tag>作业</tag>
        <tag>程序设计思维</tag>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>【作业向】程序设计思维与实践 Week6 限时大模拟</title>
    <url>/blog/2020/03/31/week6hwmn/</url>
    <content><![CDATA[<h1>【作业向】程序设计思维与实践 Week6限时大模拟<a id="more"></a></h1>
<h2 id="掌握魔法の东东-II"><a class="header-anchor" href="#掌握魔法の东东-II">♔</a><a href="https://vjudge.net/problem/Gym-270437J" target="_blank" rel="noopener">掌握魔法の东东 II</a></h2>
<h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3>
<p>从瑞神家打牌回来后，东东痛定思痛，决定苦练牌技，终成赌神！<br>
东东有 <em>A</em> × <em>B</em> 张扑克牌。每张扑克牌有一个大小(整数，记为a，范围区间是 0 到 <em>A</em> - 1）和一个花色（整数，记为b，范围区间是 0 到 <em>B</em> - 1。<br>
扑克牌是互异的，也就是独一无二的，也就是说没有两张牌大小和花色都相同。<br>
“一手牌”的意思是你手里有5张不同的牌，这 5 张牌没有谁在前谁在后的顺序之分，它们可以形成一个牌型。 我们定义了 9 种牌型，如下是 9 种牌型的规则，我们用“低序号优先”来匹配牌型，即这“一手牌”从上到下满足的第一个牌型规则就是它的“牌型编号”（一个整数，属于1到9）：</p>
<ol>
<li>同花顺: 同时满足规则 2 和规则 3.</li>
<li>顺子 : 5张牌的大小形如 <em>x</em>, <em>x</em> + 1, <em>x</em> + 2, <em>x</em> + 3, <em>x</em> + 4</li>
<li>同花 : 5张牌都是相同花色的.</li>
<li>炸弹 : 5张牌其中有4张牌的大小相等.</li>
<li>三带二 : 5张牌其中有3张牌的大小相等，且另外2张牌的大小也相等.</li>
<li>两对: 5张牌其中有2张牌的大小相等，且另外3张牌中2张牌的大小相等.</li>
<li>三条: 5张牌其中有3张牌的大小相等.</li>
<li>一对: 5张牌其中有2张牌的大小相等.</li>
<li>要不起: 这手牌不满足上述的牌型中任意一个.</li>
</ol>
<p>现在, 东东从<em>A</em> × <em>B</em> 张扑克牌中拿走了 2 张牌！分别是 (<em>a</em>1, <em>b</em>1) 和 (<em>a</em>2, <em>b</em>2). （其中a表示大小，b表示花色）<br>
现在要从剩下的扑克牌中再随机拿出 3 张！组成一手牌！！<br>
其实东东除了会打代码，他业余还是一个魔法师，现在他要预言他的未来的可能性，即他将拿到的“一手牌”的可能性，我们用一个“牌型编号（一个整数，属于1到9）”来表示这手牌的牌型，那么他的未来有 9 种可能，但每种可能的方案数不一样。<br>
现在，东东的阿戈摩托之眼没了，你需要帮他算一算 9 种牌型中，每种牌型的方案数。</p>
<h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3>
<p>第 1 行包含了整数 <em>A</em> 和 <em>B</em> (5 ≤ <em>A</em> ≤ 25, 1 ≤ <em>B</em> ≤ 4).</p>
<p>第 2 行包含了整数 <em>a</em>1, <em>b</em>1, <em>a</em>2, <em>b</em>2 (0 ≤ <em>a</em>1, <em>a</em>2 ≤ <em>A</em> - 1, 0 ≤ <em>b</em>1, <em>b</em>2 ≤ <em>B</em> - 1, (<em>a</em>1, <em>b</em>1) ≠ (<em>a</em>2, <em>b</em>2)).</p>
<h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3>
<p>输出一行，这行有 9 个整数，每个整数代表了 9 种牌型的方案数（按牌型编号从小到大的顺序）</p>
<h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3>
<h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">25 4</span><br><span class="line">0 0 24 3</span><br></pre></td></tr></table></figure>
<h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 0 0 2 18 1656 644 36432 113344</span><br></pre></td></tr></table></figure>
<h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3>
<p>看到这一题第一反应是NOIP2015的斗地主 😭，但还是有不同之处的斗地主是把牌发给你让你出，这个题是整副牌都可以用，然后凑五张就可以。</p>
<p>不过基本思路差不多，这一题可以直接枚举各种剩下的三张牌的所有可能性，复杂度也不高，100的三次方，完全可以跑过的。这一题的点在于如何判断，我们发现如果被选出的五张牌是排好序的，那么判断会简单的多，但是在dfs还需要恢复现场，那怎么办？再开个数组复制一下呗，反正就五张牌，复杂度又不高。这个问题解决之后还有一个问题，就是判断的顺序，一定要严格按照优先级进行判断并且思路一定要清晰，不要漏了情况。（但总有一种在写太吾绘卷的感觉，一万个if else ​</p>
<p>（ps：听说还有用排列组合公式算的同学，可怕</p>
<h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> p,h;</span><br><span class="line">&#125;p[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> card[<span class="number">25</span>][<span class="number">4</span>],sum[<span class="number">10</span>];</span><br><span class="line">data xu[<span class="number">6</span>],xuw[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> a,b,pcnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wly</span><span class="params">(data x,data y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x.p&lt;y.p) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(x.p==y.p &amp;&amp; x.h&lt;y.h) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">6</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++) xuw[i]=xu[i];</span><br><span class="line">		sort(xuw+<span class="number">1</span>,xuw+<span class="number">6</span>,wly);</span><br><span class="line">		<span class="keyword">if</span>(xuw[<span class="number">1</span>].h==xuw[<span class="number">2</span>].h &amp;&amp; xuw[<span class="number">2</span>].h==xuw[<span class="number">3</span>].h &amp;&amp; xuw[<span class="number">3</span>].h==xuw[<span class="number">4</span>].h &amp;&amp; xuw[<span class="number">4</span>].h==xuw[<span class="number">5</span>].h)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(xuw[<span class="number">2</span>].p==xuw[<span class="number">1</span>].p+<span class="number">1</span> &amp;&amp; xuw[<span class="number">3</span>].p==xuw[<span class="number">2</span>].p+<span class="number">1</span> &amp;&amp; xuw[<span class="number">4</span>].p==xuw[<span class="number">3</span>].p+<span class="number">1</span> &amp;&amp; xuw[<span class="number">5</span>].p==xuw[<span class="number">4</span>].p+<span class="number">1</span>)</span><br><span class="line">				sum[<span class="number">1</span>]++;</span><br><span class="line">			<span class="keyword">else</span> sum[<span class="number">3</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">2</span>].p==xuw[<span class="number">1</span>].p+<span class="number">1</span> &amp;&amp; xuw[<span class="number">3</span>].p==xuw[<span class="number">2</span>].p+<span class="number">1</span> &amp;&amp; xuw[<span class="number">4</span>].p==xuw[<span class="number">3</span>].p+<span class="number">1</span> &amp;&amp; xuw[<span class="number">5</span>].p==xuw[<span class="number">4</span>].p+<span class="number">1</span>)</span><br><span class="line">			sum[<span class="number">2</span>]++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">1</span>].p==xuw[<span class="number">2</span>].p &amp;&amp; xuw[<span class="number">2</span>].p==xuw[<span class="number">3</span>].p &amp;&amp; xuw[<span class="number">3</span>].p==xuw[<span class="number">4</span>].p)</span><br><span class="line">			sum[<span class="number">4</span>]++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">2</span>].p==xuw[<span class="number">3</span>].p &amp;&amp; xuw[<span class="number">3</span>].p==xuw[<span class="number">4</span>].p &amp;&amp; xuw[<span class="number">4</span>].p==xuw[<span class="number">5</span>].p)</span><br><span class="line">			sum[<span class="number">4</span>]++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">1</span>].p==xuw[<span class="number">2</span>].p &amp;&amp; xuw[<span class="number">2</span>].p==xuw[<span class="number">3</span>].p)<span class="comment">//123 45</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(xuw[<span class="number">4</span>].p==xuw[<span class="number">5</span>].p) sum[<span class="number">5</span>]++;</span><br><span class="line">			<span class="keyword">else</span> sum[<span class="number">7</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">2</span>].p==xuw[<span class="number">3</span>].p &amp;&amp; xuw[<span class="number">3</span>].p==xuw[<span class="number">4</span>].p)<span class="comment">//1 234 5</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(xuw[<span class="number">1</span>].p==xuw[<span class="number">5</span>].p) sum[<span class="number">5</span>]++;</span><br><span class="line">			<span class="keyword">else</span> sum[<span class="number">7</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">3</span>].p==xuw[<span class="number">4</span>].p &amp;&amp; xuw[<span class="number">4</span>].p==xuw[<span class="number">5</span>].p)<span class="comment">//12 345</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(xuw[<span class="number">1</span>].p==xuw[<span class="number">2</span>].p) sum[<span class="number">5</span>]++;</span><br><span class="line">			<span class="keyword">else</span> sum[<span class="number">7</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">1</span>].p==xuw[<span class="number">2</span>].p)<span class="comment">//12 3 4 5</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(xuw[<span class="number">3</span>].p==xuw[<span class="number">4</span>].p || xuw[<span class="number">4</span>].p==xuw[<span class="number">5</span>].p) sum[<span class="number">6</span>]++;</span><br><span class="line">			<span class="keyword">else</span> sum[<span class="number">8</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">2</span>].p==xuw[<span class="number">3</span>].p)<span class="comment">//1 23 4 5</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(xuw[<span class="number">1</span>].p==xuw[<span class="number">4</span>].p || xuw[<span class="number">4</span>].p==xuw[<span class="number">5</span>].p) sum[<span class="number">6</span>]++;</span><br><span class="line">			<span class="keyword">else</span> sum[<span class="number">8</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">3</span>].p==xuw[<span class="number">4</span>].p)<span class="comment">//1 2 34 5</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(xuw[<span class="number">1</span>].p==xuw[<span class="number">2</span>].p || xuw[<span class="number">2</span>].p==xuw[<span class="number">5</span>].p) sum[<span class="number">6</span>]++;</span><br><span class="line">			<span class="keyword">else</span> sum[<span class="number">8</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(xuw[<span class="number">4</span>].p==xuw[<span class="number">5</span>].p)<span class="comment">//1 2 3 45</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(xuw[<span class="number">1</span>].p==xuw[<span class="number">2</span>].p || xuw[<span class="number">2</span>].p==xuw[<span class="number">3</span>].p) sum[<span class="number">6</span>]++;</span><br><span class="line">			<span class="keyword">else</span> sum[<span class="number">8</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> sum[<span class="number">9</span>]++;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=t;i&lt;=pcnt;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!card[p[i].p][p[i].h])</span><br><span class="line">		&#123;</span><br><span class="line">			card[p[i].p][p[i].h]=<span class="number">1</span>;</span><br><span class="line">			xu[x]=p[i];</span><br><span class="line">			dfs(x+<span class="number">1</span>,i+<span class="number">1</span>);</span><br><span class="line">			card[p[i].p][p[i].h]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;xu[<span class="number">1</span>].p,&amp;xu[<span class="number">1</span>].h,&amp;xu[<span class="number">2</span>].p,&amp;xu[<span class="number">2</span>].h);</span><br><span class="line">	card[xu[<span class="number">1</span>].p][xu[<span class="number">1</span>].h]=<span class="number">1</span>;</span><br><span class="line">	card[xu[<span class="number">2</span>].p][xu[<span class="number">2</span>].h]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(xu[<span class="number">1</span>].p&gt;xu[<span class="number">2</span>].p) swap(xu[<span class="number">1</span>],xu[<span class="number">2</span>]);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(xu[<span class="number">1</span>].p==xu[<span class="number">2</span>].p &amp;&amp; xu[<span class="number">1</span>].h&gt;xu[<span class="number">2</span>].h) swap(xu[<span class="number">1</span>],xu[<span class="number">2</span>]);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;a;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;b;j++)</span><br><span class="line">			<span class="keyword">if</span>(!card[i][j])</span><br><span class="line">			&#123;</span><br><span class="line">				p[++pcnt].p=i;</span><br><span class="line">				p[pcnt].h=j;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>,sum[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>作业</category>
        <category>程序设计思维</category>
      </categories>
      <tags>
        <tag>作业</tag>
        <tag>程序设计思维</tag>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>【作业向】程序设计思维与实践 Week6 作业</title>
    <url>/blog/2020/03/31/week6hw/</url>
    <content><![CDATA[<h1>【作业向】程序设计思维与实践 Week6作业<a id="more"></a></h1>
<h2 id="A-氪金带东"><a class="header-anchor" href="#A-氪金带东">♔</a>A 氪金带东</h2>
<h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3>
<p>实验室里原先有一台电脑(编号为1)，最近氪金带师咕咕东又为实验室购置了N-1台电脑，编号为2到N。每台电脑都用网线连接到一台先前安装的电脑上。但是咕咕东担心网速太慢，他希望知道第i台电脑到其他电脑的最大网线长度，但是可怜的咕咕东在不久前刚刚遭受了宇宙射线的降智打击，请你帮帮他。</p>
<p><img src="/blog/2020/03/31/week6hw/8XylFS.png" alt="img"></p>
<p>提示: 样例输入对应这个图，从这个图中你可以看出，距离1号电脑最远的电脑是4号电脑，他们之间的距离是3。 4号电脑与5号电脑都是距离2号电脑最远的点，故其答案是2。5号电脑距离3号电脑最远，故对于3号电脑来说它的答案是3。同样的我们可以计算出4号电脑和5号电脑的答案是4.</p>
<h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3>
<p>输入文件包含多组测试数据。对于每组测试数据，第一行一个整数N (N&lt;=10000)，接下来有N-1行，每一行两个数，对于第i行的两个数，它们表示与i号电脑连接的电脑编号以及它们之间网线的长度。网线的总长度不会超过10^9，每个数之间用一个空格隔开。</p>
<h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3>
<p>对于每组测试数据输出N行，第i行表示i号电脑的答案 (1&lt;=i&lt;=N).</p>
<h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3>
<h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1 1</span><br><span class="line">2 1</span><br><span class="line">3 1</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure>
<h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3>
<p>这道题是要我们求出一棵树上每一个点到与其距离最远的点的距离，要求出这个需要先求出树的直径上的两个端点。然后树上的每一个点的最远的点一定是这两个直径之一。</p>
<p>粗略证明一下，如果是直径上的点那必然最远的是其中一个端点，否则这个端点也无法成为直径的端点。然果不是直径上的点，那么它到最远点之间的路程一定经过树的直径。</p>
<p>由此，我们可以用三次dfs来做，第一次dfs从任一点开始，找到距离最远的点，也就是直径的一个起点v1。第二次dfs从v1出发，找到最远的点v2也就是直径的另一个端点，同时统计出各点到v1的距离。第三次dfs从v2出发，找出各点到v2的距离，并与到v1的距离相比较，取较大的那一个作为答案。</p>
<p>（坑点：多组数据，记得清零</p>
<h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> adj[<span class="number">10005</span>],nxt[<span class="number">20005</span>],too[<span class="number">20005</span>],w[<span class="number">20005</span>];</span><br><span class="line"><span class="keyword">int</span> n,ecnt,maxl,visit[<span class="number">10005</span>],dis[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> v1,v2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//printf("-%d-\n",x);</span></span><br><span class="line">	<span class="keyword">if</span>(l&gt;maxl)</span><br><span class="line">	&#123;</span><br><span class="line">		maxl=l;</span><br><span class="line">		v1=x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=adj[x];i;i=nxt[i])</span><br><span class="line">	&#123;</span><br><span class="line">		u=too[i];</span><br><span class="line">		<span class="keyword">if</span>(!visit[u])</span><br><span class="line">		&#123;</span><br><span class="line">			visit[u]=<span class="number">1</span>;</span><br><span class="line">			dfs1(u,l+w[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//printf("-%d-\n",x);</span></span><br><span class="line">	<span class="keyword">if</span>(l&gt;maxl)</span><br><span class="line">	&#123;</span><br><span class="line">		maxl=l;</span><br><span class="line">		v2=x;</span><br><span class="line">	&#125;</span><br><span class="line">	dis[x]=<span class="built_in">max</span>(dis[x],l);</span><br><span class="line">	<span class="keyword">int</span> u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=adj[x];i;i=nxt[i])</span><br><span class="line">	&#123;</span><br><span class="line">		u=too[i];</span><br><span class="line">		<span class="keyword">if</span>(!visit[u])</span><br><span class="line">		&#123;</span><br><span class="line">			visit[u]=<span class="number">1</span>;</span><br><span class="line">			dfs2(u,l+w[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		ecnt=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(adj,<span class="number">0</span>,<span class="keyword">sizeof</span>(adj));</span><br><span class="line">		<span class="built_in">memset</span>(nxt,<span class="number">0</span>,<span class="keyword">sizeof</span>(nxt));</span><br><span class="line">		<span class="built_in">memset</span>(dis,<span class="number">0</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;j,&amp;k);</span><br><span class="line">			nxt[++ecnt]=adj[i],adj[i]=ecnt,too[ecnt]=j,w[ecnt]=k;</span><br><span class="line">			nxt[++ecnt]=adj[j],adj[j]=ecnt,too[ecnt]=i,w[ecnt]=k;</span><br><span class="line">		&#125;	</span><br><span class="line">		maxl=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">		visit[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">		dfs1(<span class="number">1</span>,<span class="number">0</span>); </span><br><span class="line">		maxl=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">		visit[v1]=<span class="number">1</span>;</span><br><span class="line">		dfs2(v1,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">		visit[v2]=<span class="number">1</span>;</span><br><span class="line">		dfs2(v2,<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-戴好口罩！"><a class="header-anchor" href="#B-戴好口罩！">♔</a>B 戴好口罩！</h2>
<h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3>
<p>新型冠状病毒肺炎（Corona Virus Disease 2019，COVID-19），简称“新冠肺炎”，是指2019新型冠状病毒感染导致的肺炎。<br>
如果一个感染者走入一个群体，那么这个群体需要被隔离！<br>
小A同学被确诊为新冠感染，并且没有戴口罩！！！！！！<br>
危！！！<br>
时间紧迫！！！！<br>
需要尽快找到所有和小A同学直接或者间接接触过的同学，将他们隔离，防止更大范围的扩散。<br>
众所周知，学生的交际可能是分小团体的，一位学生可能同时参与多个小团体内。<br>
请你编写程序解决！戴口罩！！</p>
<h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3>
<p>多组数据，对于每组测试数据：<br>
第一行为两个整数n和m（n = m = 0表示输入结束，不需要处理），n是学生的数量，m是学生群体的数量。0 &lt; n &lt;= 3e4 ， 0 &lt;= m &lt;= 5e2<br>
学生编号为0~n-1<br>
小A编号为0<br>
随后，m行，每行有一个整数num即小团体人员数量。随后有num个整数代表这个小团体的学生。</p>
<h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3>
<p>输出要隔离的人数，每组数据的答案输出占一行</p>
<h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3>
<h4 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100 4</span><br><span class="line">2 1 2</span><br><span class="line">5 10 13 11 12 14</span><br><span class="line">2 0 1</span><br><span class="line">2 99 2</span><br><span class="line">200 2</span><br><span class="line">1 5</span><br><span class="line">5 1 2 3 4 5</span><br><span class="line">1 0</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure>
<h4 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3>
<p>用并查集求出和0号在统一集合中的元素并统计个数即可。</p>
<p>（坑点：多组数据，记得清零</p>
<h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,sum;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">30005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findf</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(f[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> f[x]=findf(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,k,l,r;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">while</span>(n || m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) f[i]=i;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;l);</span><br><span class="line">			l=findf(l);</span><br><span class="line">			<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;k;j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;r);</span><br><span class="line">				r=findf(r);</span><br><span class="line">				f[r]=l;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		sum=<span class="number">1</span>;</span><br><span class="line">		l=findf(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(findf(i)==l) sum++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-掌握魔法の东东-I"><a class="header-anchor" href="#C-掌握魔法の东东-I">♔</a>C 掌握魔法の东东 I</h2>
<h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3>
<p>东东在老家农村无聊，想种田。农田有 n 块，编号从 1~n。种田要灌氵<br>
众所周知东东是一个魔法师，他可以消耗一定的 MP 在一块田上施展魔法，使得黄河之水天上来。他也可以消耗一定的 MP 在两块田的渠上建立传送门，使得这块田引用那块有水的田的水。 (1&lt;=n&lt;=3e2)<br>
黄河之水天上来的消耗是 Wi，i 是农田编号 (1&lt;=Wi&lt;=1e5)<br>
建立传送门的消耗是 Pij，i、j 是农田编号 (1&lt;= Pij &lt;=1e5, Pij = Pji, Pii =0)<br>
东东为所有的田灌氵的最小消耗</p>
<h3 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h3>
<p>第1行：一个数n<br>
第2行到第n+1行：数wi<br>
第n+2行到第2n+1行：矩阵即pij矩阵</p>
<h3 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h3>
<p>东东最小消耗的MP值</p>
<h3 id="Examples-v2"><a class="header-anchor" href="#Examples-v2">♔</a>Examples</h3>
<h4 id="Input-v6"><a class="header-anchor" href="#Input-v6">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">0 2 2 2</span><br><span class="line">2 0 3 3</span><br><span class="line">2 3 0 4</span><br><span class="line">2 3 4 0</span><br></pre></td></tr></table></figure>
<h4 id="Output-v6"><a class="header-anchor" href="#Output-v6">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure>
<h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3>
<p>一道求最小生成树边权和的题目，对于黄河之水天上来有两种处理方法，一种是先求农田之间的最小生成树，然后在答案上加最小的天上来的代价；另一种是假设天是一个超级顶点x，从x向各个农田建边，然后再跑最小生成树。</p>
<h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> u,v,w;</span><br><span class="line">&#125;edge[<span class="number">50005</span>];</span><br><span class="line"><span class="keyword">int</span> n,w,sum;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">305</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wly</span><span class="params">(data a,data b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findf</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(f[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> f[x]=findf(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line">	<span class="keyword">int</span> u,v;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		f[i]=i;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;edge[++w].w);</span><br><span class="line">		edge[w].u=<span class="number">0</span>,edge[w].v=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">			<span class="keyword">if</span>(i&lt;j)</span><br><span class="line">			&#123;</span><br><span class="line">				edge[++w].w=k,edge[w].u=i,edge[w].v=j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(edge+<span class="number">1</span>,edge+<span class="number">1</span>+w,wly);</span><br><span class="line">	k=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=w;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		u=findf(edge[i].u);</span><br><span class="line">		v=findf(edge[i].v);</span><br><span class="line">		<span class="keyword">if</span>(u!=v)</span><br><span class="line">		&#123;</span><br><span class="line">			f[u]=v;</span><br><span class="line">			k++;</span><br><span class="line">			sum+=edge[i].w;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(k==n) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-数据中心"><a class="header-anchor" href="#D-数据中心">♔</a>D 数据中心</h2>
<h3 id="Problem-v4"><a class="header-anchor" href="#Problem-v4">♔</a>Problem</h3>
<p><img src="/blog/2020/03/31/week6hw/87zdlq.png" alt="img"></p>
<h3 id="Examples-v3"><a class="header-anchor" href="#Examples-v3">♔</a>Examples</h3>
<h4 id="Input-v7"><a class="header-anchor" href="#Input-v7">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">5</span><br><span class="line">1</span><br><span class="line">1 2 3</span><br><span class="line">1 3 4</span><br><span class="line">1 4 5</span><br><span class="line">2 3 8</span><br><span class="line">3 4 2</span><br></pre></td></tr></table></figure>
<h4 id="Output-v7"><a class="header-anchor" href="#Output-v7">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>
<h3 id="解题思路-v4"><a class="header-anchor" href="#解题思路-v4">♔</a>解题思路</h3>
<p>第一次考csp的时候的第四题，全是泪啊😢当时我居然没看出来是个最小生成树，太难了​</p>
<h3 id="代码-v4"><a class="header-anchor" href="#代码-v4">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> u,v,w;</span><br><span class="line">&#125;edge[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,w,sum;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">50005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wly</span><span class="params">(data a,data b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findf</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(f[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> f[x]=findf(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line">	<span class="keyword">int</span> u,v;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;w,&amp;j);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=w;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;edge[i].u,&amp;edge[i].v,&amp;edge[i].w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) f[i]=i;</span><br><span class="line">	sort(edge+<span class="number">1</span>,edge+<span class="number">1</span>+w,wly);</span><br><span class="line">	k=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=w;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		u=findf(edge[i].u);</span><br><span class="line">		v=findf(edge[i].v);</span><br><span class="line">		<span class="keyword">if</span>(u!=v)</span><br><span class="line">		&#123;</span><br><span class="line">			f[u]=v;</span><br><span class="line">			k++;</span><br><span class="line">			sum=edge[i].w;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(k==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>作业</category>
        <category>程序设计思维</category>
      </categories>
      <tags>
        <tag>作业</tag>
        <tag>程序设计思维</tag>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>【作业向】程序设计思维与实践 Week5 作业</title>
    <url>/blog/2020/03/19/week5hw/</url>
    <content><![CDATA[<h1>【作业向】程序设计思维与实践 Week5 作业<a id="more"></a></h1>
<h2 id="A-最大矩形"><a class="header-anchor" href="#A-最大矩形">♔</a>A 最大矩形</h2>
<h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3>
<p>给一个直方图，求直方图中的最大矩形的面积。例如，下面这个图片中直方图的高度从左到右分别是2, 1, 4, 5, 1, 3, 3, 他们的宽都是1，其中最大的矩形是阴影部分。</p>
<p><img src="/blog/2020/03/19/week5hw/a.png" alt="img"></p>
<h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3>
<p>输入包含多组数据。每组数据用一个整数n来表示直方图中小矩形的个数，你可以假定1 &lt;= n &lt;= 100000. 然后接下来n个整数h1, …, hn, 满足 0 &lt;= hi &lt;= 1000000000. 这些数字表示直方图中从左到右每个小矩形的高度，每个小矩形的宽度为1。 测试数据以0结尾。</p>
<h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3>
<p>对于每组测试数据输出一行一个整数表示答案。</p>
<h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3>
<h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 2 1 4 5 1 3 3</span><br><span class="line">4 1000 1000 1000 1000</span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">4000</span><br></pre></td></tr></table></figure>
<h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3>
<p>一道单调栈的题目，定义结构体类型data用来在栈中存储每个矩形的高度和位置。对于第i个矩形，若i的高度大于栈顶元素的高度，则直接将其放入栈中，否则计算栈顶元素的高度h可构成的最大面积，最大面积为h×（i-1-栈顶元素下面那个元素的座标），并以此来更新答案。继续循环，直到栈顶元素的高度小于i的高度，将i放入栈中。当所有元素处理完成之后，按顺序将栈中的元素弹出，并计算其面积用来更新答案，直到栈空为止。最后输出面积的最大值即可。</p>
<h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ll h,index;</span><br><span class="line">&#125;stac[<span class="number">100005</span>];</span><br><span class="line">ll n,maxs,top;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll i,j;</span><br><span class="line">	data t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">while</span>(n)</span><br><span class="line">	&#123;</span><br><span class="line">		maxs=<span class="number">0</span>;</span><br><span class="line">		top=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t.h);</span><br><span class="line">		t.index=<span class="number">1</span>;</span><br><span class="line">		stac[++top]=t;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t.h);</span><br><span class="line">			<span class="keyword">if</span>(t.h&gt;=stac[top].h)</span><br><span class="line">			&#123;</span><br><span class="line">				t.index=i;</span><br><span class="line">				stac[++top]=t;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">while</span>(t.h&lt;stac[top].h &amp;&amp; top)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(top&gt;<span class="number">1</span>) maxs=<span class="built_in">max</span>(maxs,stac[top].h*(i-stac[top<span class="number">-1</span>].index<span class="number">-1</span>));</span><br><span class="line">					<span class="keyword">else</span> maxs=<span class="built_in">max</span>(maxs,stac[top].h*(i<span class="number">-1</span>));</span><br><span class="line">					top--;</span><br><span class="line">				&#125; </span><br><span class="line">				t.index=i;</span><br><span class="line">				stac[++top]=t;</span><br><span class="line">			&#125;		</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(top)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(top&gt;<span class="number">1</span>) maxs=<span class="built_in">max</span>(maxs,stac[top].h*(n-stac[top<span class="number">-1</span>].index));</span><br><span class="line">			<span class="keyword">else</span> maxs=<span class="built_in">max</span>(maxs,stac[top].h*(n));</span><br><span class="line">			top--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,maxs);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-TT’s-Magic-Cat"><a class="header-anchor" href="#B-TT’s-Magic-Cat">♔</a>B TT’s Magic Cat</h2>
<h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3>
<p>Thanks to everyone’s help last week, TT finally got a cute cat. But what TT didn’t expect is that this is a magic cat.</p>
<p>One day, the magic cat decided to investigate TT’s ability by giving a problem to him. That is select nn cities from the world map, and a[i]a[i] represents the asset value owned by the ii-th city.</p>
<p>Then the magic cat will perform several operations. Each turn is to choose the city in the interval [l,r][l,r] and increase their asset value by cc. And finally, it is required to give the asset value of each city after qq operations.</p>
<p>Could you help TT find the answer?</p>
<h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3>
<p>The first line contains two integers n,q (1≤n,q≤2⋅1e5) — the number of cities and operations.</p>
<p>The second line contains elements of the sequence a: integer numbers a1,a2,…,an(−1e6≤ai≤1e6).</p>
<p>Then qq lines follow, each line represents an operation. The i-th line contains three integers l,r and c (1≤l≤r≤n,−1e5≤c≤1e5)for the i-th operation.</p>
<h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3>
<p>Print nn integers a1,a2,…,an one per line, and aiai should be equal to the final asset value of the i-th city.</p>
<h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3>
<h4 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 2</span><br><span class="line">-3 6 8 4</span><br><span class="line">4 4 -2</span><br><span class="line">3 3 1</span><br></pre></td></tr></table></figure>
<h4 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-3 6 9 2</span><br></pre></td></tr></table></figure>
<h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3>
<p>这一题用前缀和求解即可，对于每一次更改，在标记数组b中b[l]+=c,b[r+1]-=c。然后对b数组求前缀和，最后依次输出a[i]+b[i]即可。</p>
<h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll n,q,l,r,a[<span class="number">200005</span>],b[<span class="number">200005</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;q);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;l,&amp;r,&amp;j);</span><br><span class="line">		b[l]+=j,b[r+<span class="number">1</span>]-=j;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		b[i]+=b[i<span class="number">-1</span>];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld "</span>,a[i]+b[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-平衡字符串"><a class="header-anchor" href="#C-平衡字符串">♔</a>C 平衡字符串</h2>
<h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3>
<p>一个长度为 n 的字符串 s，其中仅包含 ‘Q’, ‘W’, ‘E’, ‘R’ 四种字符。</p>
<p>如果四种字符在字符串中出现次数均为 n/4，则其为一个平衡字符串。</p>
<p>现可以将 s 中连续的一段子串替换成相同长度的只包含那四个字符的任意字符串，使其变为一个平衡字符串，问替换子串的最小长度?</p>
<p>如果 s 已经平衡则输出0。</p>
<h3 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h3>
<p>一行字符表示给定的字符串s</p>
<h3 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h3>
<p>一个整数表示答案</p>
<h3 id="Examples-v2"><a class="header-anchor" href="#Examples-v2">♔</a>Examples</h3>
<h4 id="Input-v6"><a class="header-anchor" href="#Input-v6">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">QQER</span><br></pre></td></tr></table></figure>
<h4 id="Output-v6"><a class="header-anchor" href="#Output-v6">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3>
<p>使用尺取法来解这道题，设定两个标记f1，f2。计算区间f1，f2之外的各个字母的数量sum1~4 ,取maxs=max(sum1~4)，且tot=(f2-f1)-∑（maxs-sumi）。若tot大于等于0且为4的整数倍，则当前区间可以使字符串合法，用当前区间的长度更新答案，f1++；否则f2++。处理结束之后输出最小的区间长度即可。</p>
<h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,f1,f2,sum[<span class="number">5</span>],minx=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,maxi,tot;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line">	n=<span class="built_in">strlen</span>(a);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="string">'Q'</span>) sum[<span class="number">1</span>]++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">'W'</span>) sum[<span class="number">2</span>]++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">'E'</span>) sum[<span class="number">3</span>]++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">'R'</span>) sum[<span class="number">4</span>]++;</span><br><span class="line">	&#125;</span><br><span class="line">	f1=<span class="number">0</span>;</span><br><span class="line">	f2=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(f1&lt;n &amp;&amp; f2&lt;n)</span><br><span class="line">	&#123;</span><br><span class="line">		maxi=<span class="built_in">max</span>(sum[<span class="number">1</span>],sum[<span class="number">2</span>]);</span><br><span class="line">		maxi=<span class="built_in">max</span>(maxi,sum[<span class="number">3</span>]);</span><br><span class="line">		maxi=<span class="built_in">max</span>(maxi,sum[<span class="number">4</span>]);</span><br><span class="line">		tot=f1-f2;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)</span><br><span class="line">			tot=tot-(maxi-sum[i]);<span class="comment">//,printf("%d ",sum[i])</span></span><br><span class="line">		<span class="comment">//printf(" %d %d %d--\n",f1,f2,tot);</span></span><br><span class="line">		<span class="keyword">if</span>(tot&gt;=<span class="number">0</span> &amp;&amp; tot%<span class="number">4</span>==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			minx=<span class="built_in">min</span>(minx,f1-f2);</span><br><span class="line">			f2++;</span><br><span class="line">			<span class="keyword">if</span>(a[f2]==<span class="string">'Q'</span>) sum[<span class="number">1</span>]++;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(a[f2]==<span class="string">'W'</span>) sum[<span class="number">2</span>]++;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(a[f2]==<span class="string">'E'</span>) sum[<span class="number">3</span>]++;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(a[f2]==<span class="string">'R'</span>) sum[<span class="number">4</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">			f1++;</span><br><span class="line">			<span class="keyword">if</span>(a[f1]==<span class="string">'Q'</span>) sum[<span class="number">1</span>]--;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(a[f1]==<span class="string">'W'</span>) sum[<span class="number">2</span>]--;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(a[f1]==<span class="string">'E'</span>) sum[<span class="number">3</span>]--;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(a[f1]==<span class="string">'R'</span>) sum[<span class="number">4</span>]--;</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,minx);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-滑动窗口"><a class="header-anchor" href="#D-滑动窗口">♔</a>D 滑动窗口</h2>
<h3 id="Problem-v4"><a class="header-anchor" href="#Problem-v4">♔</a>Problem</h3>
<p>ZJM 有一个长度为 n 的数列和一个大小为 k 的窗口, 窗口可以在数列上来回移动. 现在 ZJM 想知道在窗口从左往右滑的时候，每次窗口内数的最大值和最小值分别是多少. 例如：<br>
数列是 [1 3 -1 -3 5 3 6 7], 其中 <em>k</em> 等于 3.</p>
<table>
<thead>
<tr>
<th>Window position</th>
<th>Minimum value</th>
<th>Maximum value</th>
</tr>
</thead>
<tbody>
<tr>
<td>[1 3 -1] -3 5 3 6 7</td>
<td>-1</td>
<td>3</td>
</tr>
<tr>
<td>1 [3 -1 -3] 5 3 6 7</td>
<td>-3</td>
<td>3</td>
</tr>
<tr>
<td>1 3 [-1 -3 5] 3 6 7</td>
<td>-3</td>
<td>5</td>
</tr>
<tr>
<td>1 3 -1 [-3 5 3] 6 7</td>
<td>-3</td>
<td>5</td>
</tr>
<tr>
<td>1 3 -1 -3 [5 3 6] 7</td>
<td>3</td>
<td>6</td>
</tr>
<tr>
<td>1 3 -1 -3 5 [3 6 7]</td>
<td>3</td>
<td>7</td>
</tr>
</tbody>
</table>
<h3 id="Input-v7"><a class="header-anchor" href="#Input-v7">♔</a>Input</h3>
<p>输入有两行。第一行两个整数n和k分别表示数列的长度和滑动窗口的大小，1&lt;=k&lt;=n&lt;=1000000。第二行有n个整数表示ZJM的数列。</p>
<h3 id="Output-v7"><a class="header-anchor" href="#Output-v7">♔</a>Output</h3>
<p>输出有两行。第一行输出滑动窗口在从左到右的每个位置时，滑动窗口中的最小值。第二行是最大值。</p>
<h3 id="Examples-v3"><a class="header-anchor" href="#Examples-v3">♔</a>Examples</h3>
<h4 id="Input-v8"><a class="header-anchor" href="#Input-v8">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8 3</span><br><span class="line">1 3 -1 -3 5 3 6 7</span><br></pre></td></tr></table></figure>
<h4 id="Output-v8"><a class="header-anchor" href="#Output-v8">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1 -3 -3 -3 3 3</span><br><span class="line">3 3 5 5 6 7</span><br></pre></td></tr></table></figure>
<h3 id="解题思路-v4"><a class="header-anchor" href="#解题思路-v4">♔</a>解题思路</h3>
<p>我们用单调队列来解这道题，依旧定义结构体类型data来在栈中存储元素的数值即下标。对于取最小值，我们需要一个单调不减的队列对于第i个元素，我们需要从队尾开始判断，若第i个元素小于队尾元素，则将队尾元素弹出，直到第i个元素大于等于队尾元素再将第i个元素加入队列。同时对于每一次窗口的滑动，我们还要判断队列中的元素是否过时。因为队列中的元素加入队列的时间是严格递增的，故我们从队列头部开始判断，若队首元素的下标小于等于i-k，则队首元素出队，直到队首元素大于i-k为止。此时，队首元素即为当前窗口内的最小元素。</p>
<p>求最大元素的过程与上面类似，只不过是改为使用单调不增的队列。</p>
<h3 id="代码-v4"><a class="header-anchor" href="#代码-v4">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> x,i;</span><br><span class="line">&#125;q[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> n,k,head,tail;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(tail&gt;head &amp;&amp; a[i]&lt;q[tail<span class="number">-1</span>].x) tail--;</span><br><span class="line">		q[tail].x=a[i],q[tail].i=i;</span><br><span class="line">		tail++;</span><br><span class="line">		<span class="keyword">while</span>(head&lt;tail &amp;&amp; q[head].i&lt;=i-k) head++;</span><br><span class="line">		<span class="keyword">if</span>(i&gt;=k) <span class="built_in">printf</span>(<span class="string">"%d "</span>,q[head].x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	head=<span class="number">0</span>,tail=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(tail&gt;head &amp;&amp; a[i]&gt;q[tail<span class="number">-1</span>].x) tail--;</span><br><span class="line">		q[tail].x=a[i],q[tail].i=i;</span><br><span class="line">		tail++;</span><br><span class="line">		<span class="keyword">while</span>(head&lt;tail &amp;&amp; q[head].i&lt;=i-k) head++;</span><br><span class="line">		<span class="keyword">if</span>(i&gt;=k) <span class="built_in">printf</span>(<span class="string">"%d "</span>,q[head].x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>作业</category>
        <category>程序设计思维</category>
      </categories>
      <tags>
        <tag>作业</tag>
        <tag>程序设计思维</tag>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>CCF CSP 201512-3 画图</title>
    <url>/blog/2020/03/17/csp201512-3/</url>
    <content><![CDATA[<h1>CCF CSP 201512-4 画图<a id="more"></a></h1>
<h2 id="题目"><a class="header-anchor" href="#题目">♔</a>题目</h2>
<p><img src="/blog/2020/03/17/csp201512-3/timu.png" alt></p>
<h2 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h2>
<p>这一题是比较简单的模拟题，只要按照题目要求读入然后进行处理即可。线段部分要注意当纵坐标相等时是横线，当横坐标相等时是竖线，然后注意处理线段相交的地方改为‘+’（‘+’也改为‘+’或跳过）。填充部分用bfs进行遍历，然后遇到线段和边界停止。</p>
<p>虽然简单，但还是有坑点在的。首先是题目中给定的坐标与日常使用数组下标的习惯不符，于是我们对其进行一个转化x’=n-y,y’=x+1。然后要注意**坐标不要写反！**我就是因为这个wa到怀疑人生（不过居然填充字符之前把坐标写反还能拿到90分）</p>
<p><img src="/blog/2020/03/17/csp201512-3/wa.png" alt="image-20200317184001075"></p>
<p>然后在差错的过程中还遇到几个坑点，一个是dfs可能会爆栈，另一个是当一条线段经过一条线段端点时不要将‘+’修改掉。注意以上几点应该就可以解决这个问题了。</p>
<h2 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> tu[<span class="number">105</span>][<span class="number">105</span>],flag;</span><br><span class="line"><span class="keyword">int</span> fx[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> m,n,t;</span><br><span class="line"><span class="keyword">int</span> xx1,xx2,yy1,yy2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;yy1,&amp;xx1,&amp;yy2,&amp;xx2);</span><br><span class="line">	xx1=n-xx1;</span><br><span class="line">	xx2=n-xx2;</span><br><span class="line">	yy1++;</span><br><span class="line">	yy2++;</span><br><span class="line">	<span class="comment">//printf("-%d %d %d %d-\n",xx1,yy1,xx2,yy2);</span></span><br><span class="line">	<span class="keyword">if</span>(xx1==xx2)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(yy1&gt;yy2) swap(yy1,yy2);</span><br><span class="line">		<span class="keyword">for</span>(i=yy1;i&lt;=yy2;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(tu[xx1][i]==<span class="string">'+'</span> || tu[xx1][i]==<span class="string">'|'</span>) tu[xx1][i]=<span class="string">'+'</span>;</span><br><span class="line">			<span class="keyword">else</span> tu[xx1][i]=<span class="string">'-'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(yy1==yy2)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(xx1&gt;xx2) swap(xx1,xx2);</span><br><span class="line">		<span class="keyword">for</span>(i=xx1;i&lt;=xx2;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(tu[i][yy1]==<span class="string">'+'</span> || tu[i][yy1]==<span class="string">'-'</span>) tu[i][yy1]=<span class="string">'+'</span>;</span><br><span class="line">			<span class="keyword">else</span> tu[i][yy1]=<span class="string">'|'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x+fx[i][<span class="number">0</span>]&gt;n || x+fx[i][<span class="number">0</span>]&lt;<span class="number">1</span> || y+fx[i][<span class="number">1</span>]&gt;m || y+fx[i][<span class="number">1</span>]&lt;<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(tu[x+fx[i][<span class="number">0</span>]][y+fx[i][<span class="number">1</span>]]==flag || tu[x+fx[i][<span class="number">0</span>]][y+fx[i][<span class="number">1</span>]]==<span class="string">'-'</span> || tu[x+fx[i][<span class="number">0</span>]][y+fx[i][<span class="number">1</span>]]==<span class="string">'|'</span> || tu[x+fx[i][<span class="number">0</span>]][y+fx[i][<span class="number">1</span>]]==<span class="string">'+'</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="comment">//visit[x+fx[i][0]][y+fx[i][1]]=1;</span></span><br><span class="line">		tu[x+fx[i][<span class="number">0</span>]][y+fx[i][<span class="number">1</span>]]=flag;</span><br><span class="line">		dfs(x+fx[i][<span class="number">0</span>],y+fx[i][<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line">	q.push(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x,y));</span><br><span class="line">	<span class="keyword">int</span> xx,yy;</span><br><span class="line">	<span class="keyword">while</span>(!q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		xx=q.front().first;</span><br><span class="line">		yy=q.front().second;</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(xx+fx[i][<span class="number">0</span>]&gt;n || xx+fx[i][<span class="number">0</span>]&lt;<span class="number">1</span> || yy+fx[i][<span class="number">1</span>]&gt;m || yy+fx[i][<span class="number">1</span>]&lt;<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="comment">//if(visit[xx+fx[i][0]][yy+fx[i][1]] || tu[xx+fx[i][0]][yy+fx[i][1]]=='-' || tu[xx+fx[i][0]][yy+fx[i][1]]=='|' || tu[xx+fx[i][0]][yy+fx[i][1]]=='+') continue;</span></span><br><span class="line">			<span class="comment">//visit[xx+fx[i][0]][yy+fx[i][1]]=1;</span></span><br><span class="line">			tu[xx+fx[i][<span class="number">0</span>]][yy+fx[i][<span class="number">1</span>]]=flag;</span><br><span class="line">			q.push(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(xx+fx[i][<span class="number">0</span>],yy+fx[i][<span class="number">1</span>]));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;m,&amp;n,&amp;t);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++) tu[i][j]=<span class="string">'.'</span>;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=t;k++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//printf("----\n");</span></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;j);</span><br><span class="line">		<span class="keyword">if</span>(j==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			xd();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//memset(visit,0,sizeof(visit));</span></span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d %c"</span>,&amp;yy1,&amp;xx1,&amp;flag);</span><br><span class="line">			xx1=n-xx1;</span><br><span class="line">			yy1++;</span><br><span class="line">			tu[xx1][yy1]=flag;</span><br><span class="line">			<span class="comment">//visit[xx1][yy1]=1;</span></span><br><span class="line">			dfs(xx1,yy1);</span><br><span class="line">			<span class="comment">//bfs(xx1,yy1);</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//		for(i=1;i&lt;=max(m,n);i++)</span></span><br><span class="line"><span class="comment">//		&#123;</span></span><br><span class="line"><span class="comment">//			for(j=1;j&lt;=max(m,n);j++)</span></span><br><span class="line"><span class="comment">//			&#123;</span></span><br><span class="line"><span class="comment">//				if(tu[i][j]==' ') printf(".");</span></span><br><span class="line"><span class="comment">//				else printf("%c",tu[i][j]);</span></span><br><span class="line"><span class="comment">//			&#125;</span></span><br><span class="line"><span class="comment">//			printf("\n");</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%c"</span>,tu[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(i!=n) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
        <category>csp</category>
      </categories>
      <tags>
        <tag>csp</tag>
        <tag>笔记</tag>
        <tag>模拟</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>【作业向】程序设计思维与实践 Week3 作业</title>
    <url>/blog/2020/03/17/week3hw/</url>
    <content><![CDATA[<h1>【作业向】程序设计思维与实践 Week3 作业<a id="more"></a></h1>
<h2 id="A-选数问题"><a class="header-anchor" href="#A-选数问题">♔</a>A 选数问题</h2>
<h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3>
<p>Given nn positive numbers, ZJM can select exactly KK of them that sums to SS. Now ZJM wonders how many ways to get it!</p>
<h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3>
<p>The first line, an integer T&lt;=100T&lt;=100, indicates the number of test cases. For each case, there are two lines. The first line, three integers indicate nn, KK and SS. The second line, nn integers indicate the positive numbers.</p>
<h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3>
<p>For each case, an integer indicate the answer in a independent line.</p>
<h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3>
<h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">10 3 10</span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br></pre></td></tr></table></figure>
<h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>
<h3 id="Note"><a class="header-anchor" href="#Note">♔</a>Note</h3>
<p>Remember that k&lt;=n&lt;=16 and all numbers can be stored in 32-bit integer</p>
<h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3>
<p>由题意得，本题可以使用dfs的方式枚举，dfs有三个参数x,p,sum；x表示当前应该选第x个数，p表示当前判断到了第p个数，sum表示当前选中的前x-1个数的和。在每次dfs时，首先判断如果p&gt;s表示已经选择了s个数，则判断sum的值是否等于k，如果等于则方案数cnt加一；当p&lt;=s时，从第p个数到第n个数开始执行dfs(x+1,i+1,sum+a[i])。当dfs结束后输出cnt即可。</p>
<h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,s,k,cnt;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p,<span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;s)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(sum==k) cnt++;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(sum&gt;=k) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=p;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		dfs(x+<span class="number">1</span>,i+<span class="number">1</span>,sum+a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;s,&amp;k);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		cnt=<span class="number">0</span>;</span><br><span class="line">		dfs(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-区间选点"><a class="header-anchor" href="#B-区间选点">♔</a>B 区间选点</h2>
<h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3>
<p>数轴上有 n 个闭区间 [a_i, b_i]。取尽量少的点，使得每个区间内都至少有一个点（不同区间内含的点可以是同一个）</p>
<h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3>
<p>第一行1个整数N（N&lt;=100）<br>
第2~N+1行，每行两个整数a,b（a,b&lt;=100）</p>
<h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3>
<p>一个整数，代表选点的数目</p>
<h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3>
<h4 id="Input-1"><a class="header-anchor" href="#Input-1">♔</a>Input 1</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">1 5</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure>
<h4 id="Output-1"><a class="header-anchor" href="#Output-1">♔</a>Output 1</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<h4 id="Input-2"><a class="header-anchor" href="#Input-2">♔</a>Input 2</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 3</span><br><span class="line">2 5</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure>
<h4 id="Output-2"><a class="header-anchor" href="#Output-2">♔</a>Output 2</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3>
<p>由题意可知，这是一道贪心题，我们需要用最少的点来覆盖尽可能多的点。</p>
<p>那么我们的贪心策略是将区间按右端点升序排序，右端点相同的按左端点降序排序（其实没必要），然后从第一个区间开始，选择该区间的右端点，然后遍历剩下的节点，若遇到未被当前节点选择的区间，则选择该区间的右端点，节点数加一并将当前节点设置为该点，继续遍历，直到遍历完所有的节点为止。</p>
<h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">&#125;<span class="built_in">line</span>[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> n,cnt,pre;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wly</span><span class="params">(data a,data b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.y&lt;b.y) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(a.y==b.y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;<span class="built_in">line</span>[i].x,&amp;<span class="built_in">line</span>[i].y);</span><br><span class="line">	sort(<span class="built_in">line</span>+<span class="number">1</span>,<span class="built_in">line</span>+<span class="number">1</span>+n,wly);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(pre&gt;=<span class="built_in">line</span>[i].x &amp;&amp; pre&lt;=<span class="built_in">line</span>[i].y) <span class="keyword">continue</span>;</span><br><span class="line">		cnt++;</span><br><span class="line">		pre=<span class="built_in">line</span>[i].y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,cnt);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-区间覆盖"><a class="header-anchor" href="#C-区间覆盖">♔</a>C 区间覆盖</h2>
<h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3>
<p>数轴上有 n (1&lt;=n&lt;=25000)个闭区间 [ai, bi]，选择尽量少的区间覆盖一条指定线段 [1, t]（ 1&lt;=t&lt;=1,000,000）。<br>
覆盖整点，即(1,2)+(3,4)可以覆盖(1,4)。<br>
不可能办到输出-1</p>
<h3 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h3>
<p>第一行：N和T<br>
第二行至N+1行: 每一行一个闭区间。</p>
<h3 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h3>
<p>选择的区间的数目，不可能办到输出-1</p>
<h3 id="Examples-v2"><a class="header-anchor" href="#Examples-v2">♔</a>Examples</h3>
<h4 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 10</span><br><span class="line">1 7</span><br><span class="line">3 6</span><br><span class="line">6 10</span><br></pre></td></tr></table></figure>
<h4 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3>
<p>这一题也是一个很经典的区间问题的贪心题目，贪心的策略是首先读入的时候排除掉完全在区间 [1, t]之外的区间，然后将剩下的区间按照左端点进行升序排序。先将所选择的区间能够覆盖道的最远点x设为0，然后从第一个区间开始，如果该区间的左端点小于等于x+1，那么选择该区间，并当区间的左端点小于等于x+1时进行循环，求出被覆盖的区间能够覆盖到的最远点maxx，选择的区间数cnt+1，并将x设为maxx然后继续遍历各个区间。当循环结束后判断x若大于等于T则输出cnt，否则不能覆盖 [1, t]，输出-1。</p>
<p>ps：这一题wa了好几发，坑点在于最开始没有说是覆盖离散的点，意识到这个问题之后就A了</p>
<h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">&#125; <span class="built_in">line</span>[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> n,cnt=<span class="number">0</span>,bac,maxn,T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wly</span><span class="params">(data a,data b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;T)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;<span class="built_in">line</span>[i].x,&amp;<span class="built_in">line</span>[i].y);</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">line</span>[i].y&lt;<span class="number">1</span> || <span class="built_in">line</span>[i].x&gt;T) i--,n--;</span><br><span class="line">		&#125;</span><br><span class="line">		sort(<span class="built_in">line</span>+<span class="number">1</span>,<span class="built_in">line</span>+<span class="number">1</span>+n,wly);</span><br><span class="line">		bac=<span class="number">0</span>;</span><br><span class="line">		cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">line</span>[i].x&lt;=bac+<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				maxn=<span class="built_in">line</span>[i].y;</span><br><span class="line">				<span class="keyword">while</span>(<span class="built_in">line</span>[i].x&lt;=bac+<span class="number">1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					maxn=<span class="built_in">max</span>(maxn,<span class="built_in">line</span>[i].y);</span><br><span class="line">					i++;</span><br><span class="line">					<span class="keyword">if</span>(i&gt;n) <span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				i--;</span><br><span class="line">				bac=maxn;</span><br><span class="line">				cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(bac&gt;=T) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(bac&gt;=T) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>作业</category>
        <category>程序设计思维</category>
      </categories>
      <tags>
        <tag>作业</tag>
        <tag>程序设计思维</tag>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>【作业向】程序设计思维与实践 Week4 作业</title>
    <url>/blog/2020/03/17/week4hw/</url>
    <content><![CDATA[<h1>【作业向】程序设计思维与实践 Week4 作业<a id="more"></a></h1>
<h2 id="A-DDL-的恐惧"><a class="header-anchor" href="#A-DDL-的恐惧">♔</a>A DDL 的恐惧</h2>
<h3 id="Problem"><a class="header-anchor" href="#Problem">♔</a>Problem</h3>
<p>ZJM 有 n 个作业，每个作业都有自己的 DDL，如果 ZJM 没有在 DDL 前做完这个作业，那么老师会扣掉这个作业的全部平时分。</p>
<p>所以 ZJM 想知道如何安排做作业的顺序，才能尽可能少扣一点分。</p>
<p>请你帮帮他吧！</p>
<h3 id="Input"><a class="header-anchor" href="#Input">♔</a>Input</h3>
<p>输入包含T个测试用例。输入的第一行是单个整数T，为测试用例的数量。</p>
<p>每个测试用例以一个正整数N开头(1&lt;=N&lt;=1000)，表示作业的数量。</p>
<p>然后两行。第一行包含N个整数，表示DDL，下一行包含N个整数，表示扣的分。</p>
<h3 id="Output"><a class="header-anchor" href="#Output">♔</a>Output</h3>
<p>对于每个测试用例，您应该输出最小的总降低分数，每个测试用例一行。</p>
<h3 id="Example"><a class="header-anchor" href="#Example">♔</a>Example</h3>
<h4 id="Input-v2"><a class="header-anchor" href="#Input-v2">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">3</span><br><span class="line">3 3 3</span><br><span class="line">10 5 1</span><br><span class="line">3</span><br><span class="line">1 3 1</span><br><span class="line">6 2 3</span><br><span class="line">7</span><br><span class="line">1 4 6 4 2 4 3</span><br><span class="line">3 2 1 7 6 5 4</span><br></pre></td></tr></table></figure>
<h4 id="Output-v2"><a class="header-anchor" href="#Output-v2">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<h3 id="Hint"><a class="header-anchor" href="#Hint">♔</a>Hint</h3>
<p>上方有三组样例。</p>
<p>对于第一组样例，有三个作业它们的DDL均为第三天，ZJM每天做一个正好在DDL前全部做完，所以没有扣分，输出0。</p>
<p>对于第二组样例，有三个作业，它们的DDL分别为第一天，第三天、第一天。ZJM在第一天做了第一个作业，第二天做了第二个作业，共扣了3分，输出3。</p>
<h3 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h3>
<p>由题意得，本题要求扣除的最少分数，可以转化为得到的最多分数。使用贪心求解，策略为按照分数降序排序，从分数最高的事件进行遍历。处理每一个事件时，从DDL开始往前遍历，把该事件放到遇到的第一个空闲的时间，并获得该事件的分数。当所有事件遍历结束之后，用总分数减去获得的分数即为减去的分数。</p>
<h3 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> t,p;</span><br><span class="line">&#125;ddl[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> n,T,ans;</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">10005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wly</span><span class="params">(data a,data b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.p&lt;b.p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)</span><br><span class="line">	&#123;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ddl[i].t);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ddl[i].p);</span><br><span class="line">		sort(ddl+<span class="number">1</span>,ddl+<span class="number">1</span>+n,wly);</span><br><span class="line">		<span class="keyword">for</span>(i=n;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">		&#123;</span><br><span class="line">			j=ddl[i].t;</span><br><span class="line">			<span class="keyword">while</span>(visit[j] &amp;&amp; j&gt;<span class="number">0</span>) j--;</span><br><span class="line">			<span class="keyword">if</span>(j) visit[j]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> ans+=ddl[i].p;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-四个数列"><a class="header-anchor" href="#B-四个数列">♔</a>B 四个数列</h2>
<h3 id="Problem-v2"><a class="header-anchor" href="#Problem-v2">♔</a>Problem</h3>
<p>ZJM 有四个数列 A,B,C,D，每个数列都有 n 个数字。ZJM 从每个数列中各取出一个数，他想知道有多少种方案使得 4 个数的和为 0。</p>
<p>当一个数列中有多个相同的数字的时候，把它们当做不同的数对待。</p>
<p>请你帮帮他吧！</p>
<h3 id="Input-v3"><a class="header-anchor" href="#Input-v3">♔</a>Input</h3>
<p>第一行：n（代表数列中数字的个数） <strong>（1≤n≤4000）</strong></p>
<p>接下来的 n 行中，第 i 行有四个数字，分别表示数列 A,B,C,D 中的第 i 个数字（数字不超过 2 的 28 次方）</p>
<h3 id="Output-v3"><a class="header-anchor" href="#Output-v3">♔</a>Output</h3>
<p>输出不同组合的个数。</p>
<h3 id="Examples"><a class="header-anchor" href="#Examples">♔</a>Examples</h3>
<h4 id="Input-v4"><a class="header-anchor" href="#Input-v4">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">-45 22 42 -16</span><br><span class="line">-41 -27 56 30</span><br><span class="line">-36 53 -37 77</span><br><span class="line">-36 30 -75 -46</span><br><span class="line">26 -38 -10 62</span><br><span class="line">-32 -54 -6 45</span><br></pre></td></tr></table></figure>
<h4 id="Output-v4"><a class="header-anchor" href="#Output-v4">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>
<h3 id="Hint-v2"><a class="header-anchor" href="#Hint-v2">♔</a>Hint</h3>
<p>样例解释: (-45, -27, 42, 30), (26, 30, -10, -46), (-32, 22, 56, -46),(-32, 30, -75, 77), (-32, -54, 56, 30).</p>
<h3 id="解题思路-v2"><a class="header-anchor" href="#解题思路-v2">♔</a>解题思路</h3>
<p>从题目的数据范围我们可以得知我们需要使用二分的方法，对于前两个和后两个数组，我们分别求出他们中各个元素的和，于是我们可以得到两个大小为2n的数组。我们先将将其中一个数组A按升序排序，对于另一个数组B，从第一个元素开始遍历，并在数组A中用二分的方式找到等于-B[i]的元素的位置，并统计值等于-B[i]的元素个数。由此我们可以得到所有方案的个数。</p>
<h3 id="代码-v2"><a class="header-anchor" href="#代码-v2">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">4005</span>][<span class="number">4</span>],sum1[<span class="number">16000005</span>],sum2[<span class="number">16000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> l=<span class="number">0</span>,r=n*n<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">	&#123;</span><br><span class="line">		mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(sum2[mid]==-x)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> i,sum=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(i=l;i&lt;=r;i++) </span><br><span class="line">				<span class="keyword">if</span>(sum2[i]==-x) sum++;</span><br><span class="line">			<span class="keyword">return</span> sum;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(sum2[mid]&lt;-x) l=mid+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;a[i][<span class="number">0</span>],&amp;a[i][<span class="number">1</span>],&amp;a[i][<span class="number">2</span>],&amp;a[i][<span class="number">3</span>]);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">			sum1[i*n+j]=a[i][<span class="number">0</span>]+a[j][<span class="number">1</span>],sum2[i*n+j]=a[i][<span class="number">2</span>]+a[j][<span class="number">3</span>];</span><br><span class="line">	sort(sum2,sum2+n*n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n*n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans+=make(sum1[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-TT-的神秘礼物"><a class="header-anchor" href="#C-TT-的神秘礼物">♔</a>C TT 的神秘礼物</h2>
<h3 id="Problem-v3"><a class="header-anchor" href="#Problem-v3">♔</a>Problem</h3>
<p>TT 是一位重度爱猫人士，每日沉溺于 B 站上的猫咪频道。</p>
<p>有一天，TT 的好友 ZJM 决定交给 TT 一个难题，如果 TT 能够解决这个难题，ZJM 就会买一只可爱猫咪送给 TT。</p>
<p>任务内容是，给定一个 N 个数的数组 cat[i]，并用这个数组生成一个新数组 ans[i]。新数组定义为对于任意的 i, j 且 i != j，均有 ans[] = abs(cat[i] - cat[j])，1 &lt;= i &lt; j &lt;= N。试求出这个新数组的中位数，中位数即为排序之后 (len+1)/2 位置对应的数字，’/’ 为下取整。</p>
<p>TT 非常想得到那只可爱的猫咪，你能帮帮他吗？</p>
<h3 id="Input-v5"><a class="header-anchor" href="#Input-v5">♔</a>Input</h3>
<p>多组输入，每次输入一个 N，表示有 N 个数，之后输入一个长度为 N 的序列 cat， cat[i] &lt;= 1e9 , 3 &lt;= n &lt;= 1e5</p>
<h3 id="Output-v5"><a class="header-anchor" href="#Output-v5">♔</a>Output</h3>
<p>输出新数组 ans 的中位数</p>
<h3 id="Examples-v2"><a class="header-anchor" href="#Examples-v2">♔</a>Examples</h3>
<h4 id="Input-v6"><a class="header-anchor" href="#Input-v6">♔</a>Input</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1 3 2 4</span><br><span class="line">3</span><br><span class="line">1 10 2</span><br></pre></td></tr></table></figure>
<h4 id="Output-v6"><a class="header-anchor" href="#Output-v6">♔</a>Output</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">8</span><br></pre></td></tr></table></figure>
<h3 id="解题思路-v3"><a class="header-anchor" href="#解题思路-v3">♔</a>解题思路</h3>
<p>该题是要我们求出 abs(cat[i] - cat[j])，1 &lt;= i &lt; j &lt;= N的中位数。我们可以将cat数组按升序进行排序，以此来达到去绝对值的目的。然后使用二分答案，对于二分到的每一mid求出他们在abs(cat[i] - cat[j])中的排名，以此来判断他们是否是中位数。在求排名的时候我们同样使用二分的方法可以进一步降低复杂度。求排名的做法为对于每一个cat[i],在cat[i+1]到cat[n]中通过二分来求出abs(cat[i] - cat[j])=mid的第一个位置，以此求得有多少abs(cat[i] - cat[j])小于mid，然后将结果加一即为mid在abs(cat[i] - cat[j])中的排名。通过这种方法，我们就可以以O（n longn longn）的复杂度解决这个问题。</p>
<h3 id="代码-v3"><a class="header-anchor" href="#代码-v3">♔</a>代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,cat[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> mid,l,r;</span><br><span class="line">	<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		l=i+<span class="number">1</span>,r=n;</span><br><span class="line">		<span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">		&#123;</span><br><span class="line">			mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">			<span class="comment">//printf("%d %d %d %d\n",l,r,cat[mid],cat[i]);</span></span><br><span class="line">			<span class="keyword">if</span>(cat[mid]-cat[i]&lt;x) l=mid+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		sum+=l<span class="number">-1</span>-i;</span><br><span class="line">		<span class="comment">//printf("--%d %d--\n",l,i);</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//printf("+%d %d+\n",x,sum);</span></span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;cat[i]);</span><br><span class="line">		sort(cat+<span class="number">1</span>,cat+<span class="number">1</span>+n);</span><br><span class="line">		<span class="keyword">int</span> mid,l=<span class="number">0</span>,r=cat[n];</span><br><span class="line">		<span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//printf("%d %d\n",l,r);</span></span><br><span class="line">			mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span>(judge(mid)+<span class="number">1</span>&lt;=(((n<span class="number">-1</span>)*n/<span class="number">2</span>+<span class="number">1</span>)/<span class="number">2</span>)) l=mid+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,l<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>作业</category>
        <category>程序设计思维</category>
      </categories>
      <tags>
        <tag>作业</tag>
        <tag>程序设计思维</tag>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>【瞎折腾向】Windows-Kali双系统安装笔记</title>
    <url>/blog/2020/03/16/kali_install/</url>
    <content><![CDATA[<h1>【瞎折腾向】Windows-Kali双系统安装笔记</h1>
<p>最近因为被某同学怂恿<a href="https://fa555.github.io/" target="_blank" rel="noopener">@fa555</a>装了Ubuntu18和win10的双系统，但不知为何一直无法使用无线网卡，所以就一直搁置在那里。然后近日突然想搞个Kali玩玩于是准备用Kali替换掉Ubuntu18，现在把过程记录在这里。<a id="more"></a></p>
<h2 id="Kali简介"><a class="header-anchor" href="#Kali简介">♔</a>Kali简介</h2>
<p>Kali Linux是基于<a href="https://baike.baidu.com/item/Debian/748667" target="_blank" rel="noopener">Debian</a>的Linux发行版， 设计用于数字取证操作系统。由Offensive Security Ltd维护和资助。最先由Offensive Security的Mati Aharoni和Devon Kearns通过重写BackTrack来完成，BackTrack是他们之前写的用于取证的Linux发行版 。</p>
<p>Kali Linux预装了许多渗透测试软件，包括nmap 、Wireshark 、John the Ripper，以及Aircrack-ng.[2] 用户可通过硬盘、live CD或live USB运行Kali Linux。Kali Linux既有32位和64位的镜像。可用于x86 指令集。同时还有基于ARM架构的镜像，可用于树莓派和三星的ARM Chromebook。</p>
<h2 id="安装前必要的操作"><a class="header-anchor" href="#安装前必要的操作">♔</a>安装前必要的操作</h2>
<p>1.分一个存储空间给kali</p>
<p>2.一个8G及以上的U盘</p>
<p>3.安装软碟通或Win32DiskImager</p>
<p>4.下载kali镜像</p>
<h2 id="给kali分配存储空间"><a class="header-anchor" href="#给kali分配存储空间">♔</a>给kali分配存储空间</h2>
<p>因为我是<strong>双硬盘</strong>，所以先在C盘（按理来说就是电脑的第一块硬盘，部分电脑系统装得比较奇怪，装到了第二块硬盘）分出200M的空白分区用来安装ubuntu的启动项，然后再在另一块硬盘选择最后一个盘（比如 CD两个盘的最后一个是D盘，CDE盘的最后一个是E盘，CDEF盘的最后一个是F盘，以此类推），在该盘点击右键，选择压缩卷，如下，输入压缩空间量，单位为M,如果空间充足，建议分出80G或100G，空间不足也可以分60G（1G=1024M）</p>
<p><img src="/blog/2020/03/16/kali_install/1628751-20190510155645369-1469851559.png" alt="img"></p>
<h2 id="制作kali启动盘"><a class="header-anchor" href="#制作kali启动盘">♔</a>制作kali启动盘</h2>
<h3 id="使用软碟通"><a class="header-anchor" href="#使用软碟通">♔</a>使用软碟通</h3>
<p>选择放有iso文件的文件夹</p>
<p>双击iso文件</p>
<p>点击启动，选择写入硬盘映像</p>
<p><img src="/blog/2020/03/16/kali_install/b.png" alt="img"></p>
<p>这里要将写入方式改为<strong>raw</strong>，然后点击写入即可(如果写入后出现是否格式化U盘，一定不要点，不然就白做了)</p>
<p><img src="/blog/2020/03/16/kali_install/a.png" alt="img"></p>
<h2 id="进入BIOS关闭SecureBoot"><a class="header-anchor" href="#进入BIOS关闭SecureBoot">♔</a>进入BIOS关闭SecureBoot</h2>
<p><img src="/blog/2020/03/16/kali_install/c.jpg" alt="img"></p>
<p>然后重启电脑选择U盘启动。</p>
<h2 id="安装kali"><a class="header-anchor" href="#安装kali">♔</a>安装kali</h2>
<p>选择start installer,语言选中文，然后配置网卡（为了方便可以不先配置），然后设置主机名，域名(默认，空着就行了)，root密码等等。</p>
<p>然后<strong>选择手动分区</strong>，你可以看到两个空闲分区，其中一个大小是你分区时给定的；另一个空闲分区，大小200M左右</p>
<p>在这里，我们进行手动分区，假设你留出的空闲分区为 80G，点击空闲盘符，点击&quot;+&quot;进行分区，如下：</p>
<p>1）efi：因为我是<strong>双硬盘</strong>，找到事先分好的200M空闲分区添加，逻辑分区，空间起始位置，用于efi。这个分区必不可少，用于安装ubuntu启动项。以下步骤都在那个80G的空闲分区上添加</p>
<p>2）swap:中文是&quot;交换空间&quot;，充当ubuntu的虚拟内存，一般的大小为电脑物理内存的2倍左右，可以将其分为 16G，逻辑分区，空间起始位置，用于&quot;swap&quot;或&quot;交换空间&quot;</p>
<ol start="3">
<li>/:这是ubuntu 的根目录,用于安装系统和软件，相当于windows的C盘，我们将其分为 20G，主分区，空间起始位置，用于&quot;ext4日志文件系统&quot;，挂载点为&quot;/&quot;（根据你的磁盘空间调整，可以大一点，毕竟ubuntu装软件都是默认装在根目录的）</li>
</ol>
<p>4）/home:相当于windows的其他盘，剩下的全分给它，逻辑分区，空间起始位置，用于&quot;ext4日志文件系统&quot;，挂载点为&quot;/home&quot;</p>
<p><img src="/blog/2020/03/16/kali_install/d.png" alt="img"></p>
<p>至此分区结束，然后等待安装完成后自动重启，选择kali启动就可以进入系统了。</p>
<h2 id="参考文献"><a class="header-anchor" href="#参考文献">♔</a>参考文献</h2>
<p><a href="https://www.jianshu.com/p/6d90d8084128" target="_blank" rel="noopener">Windows-Kali双系统安装教程</a></p>
<p><a href="https://www.cnblogs.com/masbay/p/11627727.html" target="_blank" rel="noopener">Windows10安装ubuntu18.04双系统教程</a></p>
]]></content>
      <categories>
        <category>瞎折腾</category>
        <category>双系统</category>
        <category>Kali Linux</category>
      </categories>
      <tags>
        <tag>瞎折腾</tag>
        <tag>双系统</tag>
        <tag>Kali</tag>
        <tag>Linux</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CCF CSP 201403-4 无线网络</title>
    <url>/blog/2020/02/12/csp201403-4%20/</url>
    <content><![CDATA[<h1>CCF CSP 201403-4 无线网络</h1>
<h2 id="问题描述"><a class="header-anchor" href="#问题描述">♔</a>问题描述</h2>
<p>目前在一个很大的平面房间里有 n 个无线路由器,每个无线路由器都固定在某个点上。任何两个无线路由器只要距离不超过 r 就能互相建立网络连接。<br>
　　除此以外,另有 m 个可以摆放无线路由器的位置。你可以在这些位置中选择至多 k 个增设新的路由器。<br>
　　你的目标是使得第 1 个路由器和第 2 个路由器之间的网络连接经过尽量少的中转路由器。请问在最优方案下中转路由器的最少个数是多少?<a id="more"></a></p>
<h2 id="输入格式"><a class="header-anchor" href="#输入格式">♔</a>输入格式</h2>
<p>第一行包含四个正整数 n,m,k,r。(2 ≤ n ≤ 100,1 ≤ k ≤ m ≤ 100, 1 ≤ r ≤ 108)。<br>
　　接下来 n 行,每行包含两个整数 xi 和 yi,表示一个已经放置好的无线 路由器在 (xi, yi) 点处。输入数据保证第 1 和第 2 个路由器在仅有这 n 个路由器的情况下已经可以互相连接(经过一系列的中转路由器)。<br>
　　接下来 m 行,每行包含两个整数 xi 和 yi,表示 (xi, yi) 点处可以增设 一个路由器。<br>
　　输入中所有的坐标的绝对值不超过 108,保证输入中的坐标各不相同。</p>
<h2 id="输出格式"><a class="header-anchor" href="#输出格式">♔</a>输出格式</h2>
<p>输出只有一个数,即在指定的位置中增设 k 个路由器后,从第 1 个路 由器到第 2 个路由器最少经过的中转路由器的个数。</p>
<h2 id="样例输入"><a class="header-anchor" href="#样例输入">♔</a>样例输入</h2>
<p>5 3 1 3<br>
0 0<br>
5 5<br>
0 3<br>
0 5<br>
3 5<br>
3 3<br>
4 4<br>
3 0</p>
<h2 id="样例输出"><a class="header-anchor" href="#样例输出">♔</a>样例输出</h2>
<p>2</p>
<h2 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h2>
<p>​		根据题意可知，若把距离小于等于r的两路由器视为存在一条边，则题目转化为为求无权无向图的最短路径。这里用spfa跑一遍，在跑的过程中注意已经添加的路由器的个数，若已经达到上限则不再添加。又因为是求中转点的个数，故将最后求得的最短路-1，从而减去终点，求得中转点的个数。</p>
<p>​		（又及好像可以用分层图做，改天学一下</p>
<p>​		（又及的又及，经❤️帅气的小天天❤️提醒，这一题边数最多可以到达n^2，我数组开小了😓</p>
<h2 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ll x,y;</span><br><span class="line">&#125;po[<span class="number">20005</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> i,k;</span><br><span class="line">&#125;;</span><br><span class="line">ll r;</span><br><span class="line"><span class="keyword">int</span> n,m,k,ecnt;</span><br><span class="line"><span class="keyword">int</span> adj[<span class="number">20005</span>],nxt[<span class="number">40005</span>],too[<span class="number">40005</span>],dis[<span class="number">20005</span>],visit[<span class="number">20005</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%lld"</span>,&amp;n,&amp;m,&amp;k,&amp;r);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n+m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;po[i].x,&amp;po[i].y);</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(((po[i].x-po[j].x)*(po[i].x-po[j].x))+((po[i].y-po[j].y)*(po[i].y-po[j].y))&lt;=r*r)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//printf("-%d %d-\n",i,j);</span></span><br><span class="line">				nxt[++ecnt]=adj[i],adj[i]=ecnt,too[ecnt]=j;</span><br><span class="line">				nxt[++ecnt]=adj[j],adj[j]=ecnt,too[ecnt]=i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n+m;i++) dis[i]=<span class="number">2147483647</span>;</span><br><span class="line">	<span class="built_in">queue</span>&lt;data2&gt; q;</span><br><span class="line">	data2 s;</span><br><span class="line">	s.i=<span class="number">1</span>,s.k=<span class="number">0</span>;</span><br><span class="line">	q.push(s);</span><br><span class="line">	dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	visit[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	data2 v,u;</span><br><span class="line">	<span class="keyword">while</span>(!q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		u=q.front();</span><br><span class="line">		<span class="comment">//printf("%d %d\n",u.i,u.k);</span></span><br><span class="line">		q.pop();</span><br><span class="line">		visit[u.i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(i=adj[u.i];i;i=nxt[i])</span><br><span class="line">		&#123;</span><br><span class="line">			v.i=too[i];</span><br><span class="line">			<span class="comment">//printf("-%d %d %d %d %d-\n",u.i,v.i,dis[u.i],dis[v.i],u.k);</span></span><br><span class="line">			<span class="keyword">if</span>(v.i&gt;n &amp;&amp; u.k&gt;=k) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(dis[v.i]&gt;dis[u.i]+<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				dis[v.i]=dis[u.i]+<span class="number">1</span>;</span><br><span class="line">				<span class="comment">//printf("+%d %d %d %d %d+\n",u.i,v.i,dis[u.i],dis[v.i],u.k);</span></span><br><span class="line">				<span class="keyword">if</span>(!visit[v.i])</span><br><span class="line">				&#123;</span><br><span class="line">					v.k=u.k;</span><br><span class="line">					<span class="keyword">if</span>(v.i&gt;n) v.k+=<span class="number">1</span>;</span><br><span class="line">					q.push(v);</span><br><span class="line">					visit[v.i]=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,dis[<span class="number">2</span>]<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
        <category>csp</category>
      </categories>
      <tags>
        <tag>csp</tag>
        <tag>笔记</tag>
        <tag>图论</tag>
        <tag>最短路</tag>
        <tag>spfa</tag>
      </tags>
  </entry>
  <entry>
    <title>CCF CSP 201412-3 集合竞价</title>
    <url>/blog/2020/02/12/csp201412-3/</url>
    <content><![CDATA[<h1>CCF CSP 201412-3 集合竞价</h1>
<h2 id="问题描述"><a class="header-anchor" href="#问题描述">♔</a>问题描述</h2>
<p>某股票交易所请你编写一个程序，根据开盘前客户提交的订单来确定某特定股票的开盘价和开盘成交量。<br>
　　该程序的输入由很多行构成，每一行为一条记录，记录可能有以下几种：<br>
　　1. buy p s 表示一个购买股票的买单，每手出价为p，购买股数为s。<br>
　　2. sell p s 表示一个出售股票的卖单，每手出价为p，出售股数为s。<br>
　　3. cancel i表示撤销第i行的记录。<br>
　　如果开盘价为p0，则系统可以将所有出价至少为p0的买单和所有出价至多为p0的卖单进行匹配。因此，此时的开盘成交量为出价至少为p0的买单的总股数和所有出价至多为p0的卖单的总股数之间的较小值。<br>
　　你的程序需要确定一个开盘价，使得开盘成交量尽可能地大。如果有多个符合条件的开盘价，你的程序应当输出最高的那一个。<a id="more"></a></p>
<h2 id="输入格式"><a class="header-anchor" href="#输入格式">♔</a>输入格式</h2>
<p>输入数据有任意多行，每一行是一条记录。保证输入合法。股数为不超过108的正整数，出价为精确到恰好小数点后两位的正实数，且不超过10000.00。</p>
<h2 id="输出格式"><a class="header-anchor" href="#输出格式">♔</a>输出格式</h2>
<p>你需要输出一行，包含两个数，以一个空格分隔。第一个数是开盘价，第二个是此开盘价下的成交量。开盘价需要精确到小数点后恰好两位。</p>
<h2 id="样例输入"><a class="header-anchor" href="#样例输入">♔</a>样例输入</h2>
<p>buy 9.25 100<br>
buy 8.88 175<br>
sell 9.00 1000<br>
buy 9.00 400<br>
sell 8.92 400<br>
cancel 1<br>
buy 100.00 50</p>
<h2 id="样例输出"><a class="header-anchor" href="#样例输出">♔</a>样例输出</h2>
<p>9.00 450</p>
<h2 id="评测用例规模与约定"><a class="header-anchor" href="#评测用例规模与约定">♔</a>评测用例规模与约定</h2>
<p>对于100%的数据，输入的行数不超过5000。</p>
<h2 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h2>
<p>​		根据题意可知，我们要求的是使成交量最大的最高的价格，借鉴<a href="https://blog.csdn.net/more_ugly_less_bug/article/details/60147075" target="_blank" rel="noopener">博客</a>的证明可知开盘价一定是输入的p中。为什么呢，将测试案例按p从小到大排列开，如下图所示。图示中各价格用序号标识好，方便说明。</p>
<p><img src="https://img-blog.csdn.net/20170303205948247?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbW9yZV91Z2x5X2xlc3NfYnVn/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p>
<p>​		（下述最优解意思是可以取到最大开盘价的解）</p>
<p>​		假设(8.92,9.00)区间（注意是开区间）内某一点p是最优价格，那么大于或等于这个价格的buy点有3、5，小于等于它的sell点有2，那么不管p在区间(8.92,9.00)内怎么浮动，都不影响大于它的sell点和小于它的buy点的选择，都是点2和点3、5。题目要求取最大值，所以在假设在(2,3)区间存在最优价格的情况下，取值可以无限逼近与9.00。</p>
<p>​		当价格9.00存在sell点时，值取到9.00显然不会改变原有的buy、sell点的选择。</p>
<p>​		当9.00存在sell点时，取9.00将会影响buy、sell点的选择。在趋于9.00时，设sell的总股数为a，buy的总股数为b。取到9.00时.设sell的总股数为a+c，buy的总股数为b，很容易明白min(a,b) &lt;= min(a+c,b)，即在9.00存在sell点时，得到的结果总会优于趋近于9.00却没有取9.00上的sell点的情况。推广开来，我们可以知道，假设两个点的区间(a,b]上存在最优解，那么b一定也是最优解，且b是最大的，所以b是答案。所以答案一定是存在于已知的点上 。</p>
<p>​		（又及，十年oi一场空，不开long long见祖宗</p>
<h2 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ll sum,flag;</span><br><span class="line">	<span class="keyword">double</span> price; </span><br><span class="line">&#125;tic[<span class="number">5005</span>];</span><br><span class="line"><span class="built_in">string</span> a;</span><br><span class="line">ll n,alls,allb,maxs;</span><br><span class="line"><span class="keyword">double</span> maxp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wly</span><span class="params">(data a,data b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.price&gt;b.price) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(a.price==b.price &amp;&amp; a.flag&lt;b.flag) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	i=<span class="number">1</span>;n=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a)</span><br><span class="line">	&#123;	</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="string">"buy"</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tic[i].price;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tic[i].sum;</span><br><span class="line">			tic[i].flag=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="string">"sell"</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tic[i].price;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tic[i].sum;</span><br><span class="line">			tic[i].flag=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="string">"cancel"</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;j;</span><br><span class="line">			tic[j].price=<span class="number">0.0</span>;</span><br><span class="line">			tic[j].sum=<span class="number">0</span>;</span><br><span class="line">			n--;</span><br><span class="line">		&#125;</span><br><span class="line">		i++;n++;</span><br><span class="line">	&#125;</span><br><span class="line">	n--;</span><br><span class="line">	sort(tic+<span class="number">1</span>,tic+i,wly);</span><br><span class="line">	<span class="comment">//printf("%d %d\n",i,n);</span></span><br><span class="line">	<span class="comment">//for(i=1;i&lt;=n;i++) </span></span><br><span class="line">	<span class="comment">//	printf("%d %lf %d\n",tic[i].sum,tic[i].price,tic[i].flag);</span></span><br><span class="line">	j=n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=j;i++)	</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(tic[i].price==tic[i<span class="number">-1</span>].price &amp;&amp; tic[i].flag==tic[i<span class="number">-1</span>].flag)</span><br><span class="line">		&#123;</span><br><span class="line">			tic[i].sum+=tic[i<span class="number">-1</span>].sum;</span><br><span class="line">			tic[i<span class="number">-1</span>].flag=<span class="number">0</span>;tic[i<span class="number">-1</span>].price=<span class="number">0.0</span>;tic[i<span class="number">-1</span>].flag=<span class="number">0</span>;</span><br><span class="line">			n--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	sort(tic+<span class="number">1</span>,tic+i,wly);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) alls+=tic[i].flag*tic[i].sum;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//printf("-%d %d-\n",alls,allb);</span></span><br><span class="line">		<span class="keyword">if</span>(tic[i].flag)</span><br><span class="line">		&#123;</span><br><span class="line">			alls-=tic[i].sum;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		allb+=tic[i].sum;</span><br><span class="line">		<span class="keyword">if</span>(maxs&lt;min(alls,allb))</span><br><span class="line">		&#123;</span><br><span class="line">			maxs=min(alls,allb);</span><br><span class="line">			maxp=tic[i].price;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//for(i=1;i&lt;=n;i++) </span></span><br><span class="line">	<span class="comment">//	printf("%d %lf %d\n",tic[i].sum,tic[i].price,tic[i].flag);</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%.2lf %lld"</span>,maxp,maxs);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
        <category>csp</category>
      </categories>
      <tags>
        <tag>csp</tag>
        <tag>笔记</tag>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>CCF CSP 201512-4 送货</title>
    <url>/blog/2020/02/12/csp201512-4/</url>
    <content><![CDATA[<h1>CCF CSP 201512-4 送货</h1>
<h2 id="问题描述"><a class="header-anchor" href="#问题描述">♔</a>问题描述</h2>
<p>为了增加公司收入，F公司新开设了物流业务。由于F公司在业界的良好口碑，物流业务一开通即受到了消费者的欢迎，物流业务马上遍及了城市的每条街道。然而，F公司现在只安排了小明一个人负责所有街道的服务。<br>
　　任务虽然繁重，但是小明有足够的信心，他拿到了城市的地图，准备研究最好的方案。城市中有<em>n</em>个交叉路口，<em>m</em>条街道连接在这些交叉路口之间，每条街道的首尾都正好连接着一个交叉路口。除开街道的首尾端点，街道不会在其他位置与其他街道相交。每个交叉路口都至少连接着一条街道，有的交叉路口可能只连接着一条或两条街道。<br>
　　小明希望设计一个方案，从编号为1的交叉路口出发，每次必须沿街道去往街道另一端的路口，再从新的路口出发去往下一个路口，直到所有的街道都经过了正好一次。<a id="more"></a></p>
<h2 id="输入格式"><a class="header-anchor" href="#输入格式">♔</a>输入格式</h2>
<p>输入的第一行包含两个整数<em>n</em>, <em>m</em>，表示交叉路口的数量和街道的数量，交叉路口从1到<em>n</em>标号。<br>
　　接下来<em>m</em>行，每行两个整数<em>a</em>, <em>b</em>，表示和标号为<em>a</em>的交叉路口和标号为<em>b</em>的交叉路口之间有一条街道，街道是双向的，小明可以从任意一端走向另一端。两个路口之间最多有一条街道。</p>
<h2 id="输出格式"><a class="header-anchor" href="#输出格式">♔</a>输出格式</h2>
<p>如果小明可以经过每条街道正好一次，则输出一行包含<em>m</em>+1个整数<em>p</em>1, <em>p</em>2, <em>p</em>3, …, <em>pm</em>+1，表示小明经过的路口的顺序，相邻两个整数之间用一个空格分隔。如果有多种方案满足条件，则输出字典序最小的一种方案，即首先保证<em>p</em>1最小，<em>p</em>1最小的前提下再保证<em>p</em>2最小，依此类推。<br>
　　如果不存在方案使得小明经过每条街道正好一次，则输出一个整数-1。</p>
<h2 id="样例输入"><a class="header-anchor" href="#样例输入">♔</a>样例输入</h2>
<p>4 5<br>
1 2<br>
1 3<br>
1 4<br>
2 4<br>
3 4</p>
<h2 id="样例输出"><a class="header-anchor" href="#样例输出">♔</a>样例输出</h2>
<p>1 2 4 1 3 4</p>
<h2 id="样例说明"><a class="header-anchor" href="#样例说明">♔</a>样例说明</h2>
<p>城市的地图和小明的路径如下图所示。</p>
<p><img src="http://118.190.20.162/RequireFile.do?fid=HgNYQ5G9" alt="img"></p>
<h2 id="样例输入-v2"><a class="header-anchor" href="#样例输入-v2">♔</a>样例输入</h2>
<p>4 6<br>
1 2<br>
1 3<br>
1 4<br>
2 4<br>
3 4<br>
2 3</p>
<h2 id="样例输出-v2"><a class="header-anchor" href="#样例输出-v2">♔</a>样例输出</h2>
<p>-1</p>
<h2 id="样例说明-v2"><a class="header-anchor" href="#样例说明-v2">♔</a>样例说明</h2>
<p>城市的地图如下图所示，不存在满足条件的路径。</p>
<p><img src="http://118.190.20.162/RequireFile.do?fid=67NLAqAY" alt="img"></p>
<h2 id="评测用例规模与约定"><a class="header-anchor" href="#评测用例规模与约定">♔</a>评测用例规模与约定</h2>
<p>前30%的评测用例满足：1 ≤ <em>n</em> ≤ 10, <em>n</em>-1 ≤ <em>m</em> ≤ 20。<br>
　　前50%的评测用例满足：1 ≤ <em>n</em> ≤ 100, <em>n</em>-1 ≤ <em>m</em> ≤ 10000。<br>
　　所有评测用例满足：1 ≤ <em>n</em> ≤ 10000，<em>n</em>-1 ≤ <em>m</em> ≤ 100000。</p>
<h2 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h2>
<p>​		根据题意可知，这一题要首先要判断图是否联通，然后再判断图中是否存在欧拉路径或欧拉回路，即要么图中只有两个度数为奇数的点且编号为1的顶点的度数为奇数，要么没有度数为奇数的点。确定好之后通过dfs寻找路径即可。需要注意的是直接搜索的话会爆栈，只能得80分，那么我们就需要用手工栈来模拟dfs，这样就可以a掉了。</p>
<p>​		以及，根据这个<a href="https://blog.csdn.net/more_ugly_less_bug/article/details/60962425" target="_blank" rel="noopener">博客</a>所说，我们需要在递归回来之后才将该节点添加入栈，相当于倒序储存。一般情况下和用队列顺序存储差别不大。但是有一种存在孤点的图。如下图所示：</p>
<p><img src="https://img-blog.csdn.net/20170309165411115" alt="img"></p>
<p>图中点2 是孤立点，如果每次搜索到一个节点就存储进队列的话，就会出现错误，而用栈倒序存储就能解决这个问题。</p>
<h2 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> lu[<span class="number">1000005</span>],d[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">bool</span> tu[<span class="number">10005</span>][<span class="number">10005</span>],visit[<span class="number">100005</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; po[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> dsum,s1,s2;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line"><span class="comment">//	if(dsum==m+1)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		for(i=1;i&lt;=dsum;i++)</span></span><br><span class="line"><span class="comment">//			printf("%d ",lu[i]);</span></span><br><span class="line"><span class="comment">//		exit(0);</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;po[x].size();i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(tu[x][po[x][i]])</span><br><span class="line">		&#123;</span><br><span class="line">			</span><br><span class="line">			tu[x][po[x][i]]=<span class="number">0</span>;</span><br><span class="line">			tu[po[x][i]][x]=<span class="number">0</span>;</span><br><span class="line">			dfs(po[x][i]);</span><br><span class="line">			<span class="comment">//tu[x][po[x][i]]=1;</span></span><br><span class="line">			<span class="comment">//tu[po[x][i]][x]=1;</span></span><br><span class="line">			<span class="comment">//dsum--;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	lu[++dsum]=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;po[x].size();i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!visit[po[x][i]])</span><br><span class="line">		&#123;</span><br><span class="line">			visit[po[x][i]]=<span class="number">1</span>;</span><br><span class="line">			make(po[x][i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;j,&amp;k);</span><br><span class="line">		tu[j][k]=<span class="number">1</span>;</span><br><span class="line">		tu[k][j]=<span class="number">1</span>;</span><br><span class="line">		po[j].push_back(k);</span><br><span class="line">		po[k].push_back(j);</span><br><span class="line">		d[j]++,d[k]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		sort(po[i].begin(),po[i].end());</span><br><span class="line">		<span class="keyword">if</span>(d[i]%<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(dsum==<span class="number">2</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(!dsum)</span><br><span class="line">				s1=i;</span><br><span class="line">			<span class="keyword">else</span> </span><br><span class="line">				s2=i;</span><br><span class="line">			dsum++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dsum==<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!dsum) s1=s2=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(dsum==<span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(s1&gt;s2) swap(s1,s2); </span><br><span class="line">		<span class="keyword">if</span>(s1!=<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	visit[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	make(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!visit[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	dsum=<span class="number">0</span>;</span><br><span class="line">	<span class="comment">//lu[dsum]=s1;</span></span><br><span class="line">	<span class="comment">//dfs(s1);</span></span><br><span class="line">	st.push(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">while</span>(!st.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> x=st.top();</span><br><span class="line">		<span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;po[x].size();i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(tu[x][po[x][i]])</span><br><span class="line">			&#123;</span><br><span class="line">				tu[x][po[x][i]]=<span class="number">0</span>;</span><br><span class="line">				tu[po[x][i]][x]=<span class="number">0</span>;</span><br><span class="line">				st.push(po[x][i]);</span><br><span class="line">				flag=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag==<span class="number">0</span>) lu[++dsum]=x,st.pop();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=dsum;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>,lu[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
        <category>csp</category>
      </categories>
      <tags>
        <tag>csp</tag>
        <tag>笔记</tag>
        <tag>图论</tag>
        <tag>dfs</tag>
        <tag>欧拉图</tag>
      </tags>
  </entry>
  <entry>
    <title>CCF CSP 201409-4 最优配餐</title>
    <url>/blog/2020/02/11/csp201409-4/</url>
    <content><![CDATA[<h1>CCF CSP 201409-4 最优配餐</h1>
<h2 id="问题描述"><a class="header-anchor" href="#问题描述">♔</a>问题描述</h2>
<p>栋栋最近开了一家餐饮连锁店，提供外卖服务。随着连锁店越来越多，怎么合理的给客户送餐成为了一个急需解决的问题。<a id="more"></a><br>
　　栋栋的连锁店所在的区域可以看成是一个n×n的方格图（如下图所示），方格的格点上的位置上可能包含栋栋的分店（绿色标注）或者客户（蓝色标注），有一些格点是不能经过的（红色标注）。</p>
<p><img src="http://118.190.20.162/RequireFile.do?fid=383qHJjQ" alt="示例图片"></p>
<p>方格图中的线表示可以行走的道路，相邻两个格点的距离为1。栋栋要送餐必须走可以行走的道路，而且不能经过红色标注的点。</p>
<p>送餐的主要成本体现在路上所花的时间，每一份餐每走一个单位的距离需要花费1块钱。每个客户的需求都可以由栋栋的任意分店配送，每个分店没有配送总量的限制。<br>
　　现在你得到了栋栋的客户的需求，请问在最优的送餐方式下，送这些餐需要花费多大的成本。</p>
<h2 id="输入格式"><a class="header-anchor" href="#输入格式">♔</a>输入格式</h2>
<p>输入的第一行包含四个整数n, m, k, d，分别表示方格图的大小、栋栋的分店数量、客户的数量，以及不能经过的点的数量。<br>
　　接下来m行，每行两个整数xi, yi，表示栋栋的一个分店在方格图中的横坐标和纵坐标。<br>
　　接下来k行，每行三个整数xi, yi, ci，分别表示每个客户在方格图中的横坐标、纵坐标和订餐的量。（注意，可能有多个客户在方格图中的同一个位置）<br>
　　接下来d行，每行两个整数，分别表示每个不能经过的点的横坐标和纵坐标。</p>
<h2 id="输出格式"><a class="header-anchor" href="#输出格式">♔</a>输出格式</h2>
<p>输出一个整数，表示最优送餐方式下所需要花费的成本。</p>
<h2 id="样例输入"><a class="header-anchor" href="#样例输入">♔</a>样例输入</h2>
<p>10 2 3 3<br>
1 1<br>
8 8<br>
1 5 1<br>
2 3 3<br>
6 7 2<br>
1 2<br>
2 2<br>
6 8</p>
<h2 id="样例输出"><a class="header-anchor" href="#样例输出">♔</a>样例输出</h2>
<p>29</p>
<h2 id="评测用例规模与约定"><a class="header-anchor" href="#评测用例规模与约定">♔</a>评测用例规模与约定</h2>
<p>前30%的评测用例满足：1&lt;=n &lt;=20。<br>
　　前60%的评测用例满足：1&lt;=n&lt;=100。<br>
　　所有评测用例都满足：1&lt;=n&lt;=1000，1&lt;=m, k, d&lt;=n^2。可能有多个客户在同一个格点上。每个客户的订餐量不超过1000，每个客户所需要的餐都能被送到。</p>
<h2 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h2>
<p>​		根据题意可知，我们要求的是送餐需要花费的最小成本，这个问题可以转化为求从各个分店到图上任意一点的最短路。在此我们使用bfs的方法。最开始我采用的是从每一个分店开始，对这个图进行bfs的方法，这个方法在分店数目过多时会浪费大量时间，以至于TLE才得到了80分。然后对这个算法进行优化，多个起点同时对这个图进行bfs，实现方法也很简单，只要在开始前将所有分店都加入到队列中即可。</p>
<p>​		（又及，感觉这个写的好像spfa啊</p>
<p>​		（又及的又及，十年oi一场空，不开long long见祖宗</p>
<h2 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">po</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> x,y,sum;</span><br><span class="line">&#125;;</span><br><span class="line">po fd[<span class="number">1000005</span>],kh[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> tu[<span class="number">1005</span>][<span class="number">1005</span>],dis[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> fx[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,k,d;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="built_in">queue</span>&lt;po&gt; q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		dis[fd[i].x][fd[i].y]=<span class="number">0</span>;</span><br><span class="line">		tu[fd[i].x][fd[i].y]=<span class="number">1</span>;</span><br><span class="line">		po t;</span><br><span class="line">		t.x=fd[i].x,t.y=fd[i].y;</span><br><span class="line">		q.push(t);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(!q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		po u=q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		tu[u.x][u.y]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(u.x+fx[i][<span class="number">0</span>]&lt;=<span class="number">0</span> || u.x+fx[i][<span class="number">0</span>]&gt;n || u.y+fx[i][<span class="number">1</span>]&lt;=<span class="number">0</span> || u.y+fx[i][<span class="number">1</span>]&gt;n || tu[u.x+fx[i][<span class="number">0</span>]][u.y+fx[i][<span class="number">1</span>]]==<span class="number">-1</span>)</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(dis[u.x+fx[i][<span class="number">0</span>]][u.y+fx[i][<span class="number">1</span>]]&gt;dis[u.x][u.y]+<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				dis[u.x+fx[i][<span class="number">0</span>]][u.y+fx[i][<span class="number">1</span>]]=dis[u.x][u.y]+<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span>(!tu[u.x+fx[i][<span class="number">0</span>]][u.y+fx[i][<span class="number">1</span>]])</span><br><span class="line">				&#123;</span><br><span class="line">					po v;</span><br><span class="line">					v.x=u.x+fx[i][<span class="number">0</span>];</span><br><span class="line">					v.y=u.y+fx[i][<span class="number">1</span>];</span><br><span class="line">					q.push(v);</span><br><span class="line">					tu[u.x+fx[i][<span class="number">0</span>]][u.y+fx[i][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;k,&amp;d);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++) dis[i][j]=<span class="number">0x7fffffff</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;fd[i].x,&amp;fd[i].y);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=k;i++) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;kh[i].x,&amp;kh[i].y,&amp;kh[i].sum);</span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=d;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">		tu[x][y]=<span class="number">-1</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	bfs();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans+=(ll)(dis[kh[i].x][kh[i].y]*kh[i].sum);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
        <category>csp</category>
      </categories>
      <tags>
        <tag>csp</tag>
        <tag>笔记</tag>
        <tag>图论</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>CCF CSP 201509-4 高速公路</title>
    <url>/blog/2020/02/11/csp201509-4/</url>
    <content><![CDATA[<h1>CCF CSP 201509-4 高速公路</h1>
<h2 id="问题描述"><a class="header-anchor" href="#问题描述">♔</a>问题描述</h2>
<p>某国有<em>n</em>个城市，为了使得城市间的交通更便利，该国国王打算在城市之间修一些高速公路，由于经费限制，国王打算第一阶段先在部分城市之间修一些单向的高速公路。<br>
　　现在，大臣们帮国王拟了一个修高速公路的计划。看了计划后，国王发现，有些城市之间可以通过高速公路直接（不经过其他城市）或间接（经过一个或多个其他城市）到达，而有的却不能。如果城市A可以通过高速公路到达城市B，而且城市B也可以通过高速公路到达城市A，则这两个城市被称为便利城市对。<br>
　　国王想知道，在大臣们给他的计划中，有多少个便利城市对。<a id="more"></a></p>
<h2 id="输入格式"><a class="header-anchor" href="#输入格式">♔</a>输入格式</h2>
<p>输入的第一行包含两个整数<em>n</em>, <em>m</em>，分别表示城市和单向高速公路的数量。<br>
　　接下来<em>m</em>行，每行两个整数<em>a</em>, <em>b</em>，表示城市<em>a</em>有一条单向的高速公路连向城市<em>b</em>。</p>
<h2 id="输出格式"><a class="header-anchor" href="#输出格式">♔</a>输出格式</h2>
<p>输出一行，包含一个整数，表示便利城市对的数量。</p>
<h2 id="样例输入"><a class="header-anchor" href="#样例输入">♔</a>样例输入</h2>
<p>5 5<br>
1 2<br>
2 3<br>
3 4<br>
4 2<br>
3 5</p>
<h2 id="样例输出"><a class="header-anchor" href="#样例输出">♔</a>样例输出</h2>
<p>3</p>
<h2 id="样例说明"><a class="header-anchor" href="#样例说明">♔</a>样例说明</h2>
<p><img src="http://118.190.20.162/RequireFile.do?fid=4HG9GgbF" alt="img"></p>
<p>​		城市间的连接如图所示。有3个便利城市对，它们分别是(2, 3), (2, 4), (3, 4)，请注意(2, 3)和(3, 2)看成同一个便利城市对。</p>
<h2 id="评测用例规模与约定"><a class="header-anchor" href="#评测用例规模与约定">♔</a>评测用例规模与约定</h2>
<p>前30%的评测用例满足1 ≤ <em>n</em> ≤ 100, 1 ≤ <em>m</em> ≤ 1000；<br>
　　前60%的评测用例满足1 ≤ <em>n</em> ≤ 1000, 1 ≤ <em>m</em> ≤ 10000；<br>
　　所有评测用例满足1 ≤ <em>n</em> ≤ 10000, 1 ≤ <em>m</em> ≤ 100000。</p>
<h2 id="解题思路"><a class="header-anchor" href="#解题思路">♔</a>解题思路</h2>
<p>​		根据题意可知，我们只要分别求出图中各个连通分量所包含的节点数目，即可分别计算出便利城市对数，然后将各个连通分量的便利城市对数相加就可以了。题目不难，只要套个Tarjan板子就可以做，但迷惑的是我的板子好像是错的？？？我的模板是这么写的，只能得80分</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dfn[v] &amp;&amp; dfn[v]&lt;low[u]) low[u]=dfn[v];</span><br></pre></td></tr></table></figure>
<p>​		后来找的板子是这样的，可以a掉</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(visit[v] &amp;&amp; dfn[v]&lt;low[u]) low[u]=dfn[v];</span><br></pre></td></tr></table></figure>
<p>​</p>
<h2 id="代码"><a class="header-anchor" href="#代码">♔</a>代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dfn[<span class="number">100005</span>],low[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> m,n,times;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">stack</span>[<span class="number">100005</span>],visit[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> top,cnt,sum[<span class="number">100005</span>],icnt,isum[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> adj[<span class="number">100005</span>],nxt[<span class="number">200005</span>],to[<span class="number">200005</span>],ecnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adde</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	nxt[++ecnt]=adj[x],adj[x]=ecnt,to[ecnt]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	visit[u]=<span class="number">1</span>,<span class="built_in">stack</span>[++top]=u;</span><br><span class="line">	dfn[u]=low[u]=++times;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=adj[u];i;i=nxt[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=to[i];</span><br><span class="line">		<span class="keyword">if</span>(!dfn[v])</span><br><span class="line">		&#123;</span><br><span class="line">			Tarjan(v);</span><br><span class="line">			low[u]=min(low[u],low[v]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(visit[v] &amp;&amp; dfn[v]&lt;low[u]) low[u]=dfn[v];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dfn[u]==low[u])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v;</span><br><span class="line">		icnt++; </span><br><span class="line">		visit[u]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(v=<span class="built_in">stack</span>[top--],isum[icnt]++,v!=u) visit[v]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">		adde(a,b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">		<span class="keyword">if</span>(!dfn[i]) Tarjan(i);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=icnt;i++) </span><br><span class="line">		ans+=isum[i]*(isum[i]<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
        <category>csp</category>
      </categories>
      <tags>
        <tag>csp</tag>
        <tag>笔记</tag>
        <tag>图论</tag>
        <tag>Tarjan</tag>
      </tags>
  </entry>
  <entry>
    <title>Python——正则表达式(中)</title>
    <url>/blog/2019/08/19/python-re%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<h1>正则表达式（中）</h1>
<h2 id="re库的基本使用"><a class="header-anchor" href="#re库的基本使用">♔</a>re库的基本使用</h2>
<p>re库是python的标准库，不需要进行额外的安装，主要用于字符串匹配。调用方法也特别简单，只需要</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>re库采用raw string类型来表示正则表达式，表示为：r’text’。相较于string类型，raw string就是不包含转义符的字符串，当然也可以用string类型来 表示正则表达式，但是特别的繁琐。</p>
<p>Re库主要功能函数</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>re.search()</td>
<td>在一 个 字符串中搜索匹配正则表达式的第一个位置， 返回match对象</td>
</tr>
<tr>
<td>re.match()</td>
<td>从一个字符串的开始位置起匹配正则表达式，返回match对象</td>
</tr>
<tr>
<td>re.findall()</td>
<td>搜索字符串，以列表类型返回全部能匹配的子串</td>
</tr>
<tr>
<td>re.splito()</td>
<td>将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td>
</tr>
<tr>
<td>re.finditer()</td>
<td>搜索字符串，返回一个匹配结果的选代类型，每个选代元素是match对象</td>
</tr>
<tr>
<td>re.sub()</td>
<td>在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Python</category>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Python——正则表达式(上)</title>
    <url>/blog/2019/08/18/python-re/</url>
    <content><![CDATA[<h1>正则表达式（上）</h1>
<h2 id="零-什么是正则表达式"><a class="header-anchor" href="#零-什么是正则表达式">♔</a>零 什么是正则表达式</h2>
<p>正则表达式（<strong>r</strong>egular <strong>e</strong>xpression，简称<strong>RE</strong>），是用来简洁表达一组字符串的表达式。这种针对字符串表达“简洁”和“特征”思想的工具可以非常简单的表达一组字符串的特征，起到了“一行胜千言”的效果。在诸如爬虫等需要对字符串进行处理的地方应用广泛。<a id="more"></a></p>
<h2 id="壹-正则表达式的作用"><a class="header-anchor" href="#壹-正则表达式的作用">♔</a>壹 正则表达式的作用</h2>
<ul>
<li>表达文本类型的特征</li>
<li>同时查找或替换一组字符串</li>
<li>匹配字符串的全部或部分</li>
</ul>
<h2 id="贰-常用操作符"><a class="header-anchor" href="#贰-常用操作符">♔</a>贰 常用操作符</h2>
<p>因为正则表达式由字符和操作符构成，故应了解常用操作符及其用法。</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>表示任何单个字符</td>
<td></td>
</tr>
<tr>
<td>[]</td>
<td>字符集，对单个字符给出取值范围</td>
<td>[abc]表示a、b、c，[a-z]表示a到z任意单个字符</td>
</tr>
<tr>
<td>[^ ]</td>
<td>非字符集，对单个字符给出排除范围</td>
<td>[^abc]表示非a或b或c的单个字符</td>
</tr>
<tr>
<td>*</td>
<td>前一个字符0次或无限次扩展</td>
<td>abc*表示ab、abc、abcc、abccc等</td>
</tr>
<tr>
<td>+</td>
<td>前一个字符1次或无限次扩展</td>
<td>abc+表示abc、abcc、abccc等</td>
</tr>
<tr>
<td>?</td>
<td>前一个字符0次或1次扩展</td>
<td>abc?表示ab、abc等</td>
</tr>
<tr>
<td>|</td>
<td>左右表达式任意一个</td>
<td>abc|def表示abc或def</td>
</tr>
<tr>
<td>{m}</td>
<td>扩展前一个字符m次</td>
<td>ab{2}表示abbc</td>
</tr>
<tr>
<td>{m,n}</td>
<td>扩展前一个字符m到n次（含n）</td>
<td>ab{1,2}表示abc、abbc</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串开头</td>
<td></td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串结尾</td>
<td></td>
</tr>
<tr>
<td>()</td>
<td>分组标记（内部只能使用|操作符）</td>
<td></td>
</tr>
<tr>
<td>\d</td>
<td>数字，等价于[0-9]</td>
<td></td>
</tr>
<tr>
<td>\w</td>
<td>单词字符，等价于[A-Za-z0-9_]</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="叁-经典正则语法实例"><a class="header-anchor" href="#叁-经典正则语法实例">♔</a>叁 经典正则语法实例</h2>
<p>下面看几个实例（比较简单或前面已经出现过的就不再赘述）</p>
<table>
<thead>
<tr>
<th>正则表达式</th>
<th>对应字符串</th>
</tr>
</thead>
<tbody>
<tr>
<td><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>\w{0,31}$</td>
<td>合法的变量</td>
</tr>
<tr>
<td>[\u4e00-\u9fa5]</td>
<td>中文字符</td>
</tr>
<tr>
<td>(([1-9]?\d|1\d{2}|2[0-4]\d|25[0-5]).){3}(([1-9]?\d|1\d{2}|2[0-4]\d|25[0-5]).)</td>
<td>ip地址</td>
</tr>
</tbody>
</table>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>A-Za-z <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Python</category>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫——requests库入门（上）</title>
    <url>/blog/2019/08/17/pypc1/</url>
    <content><![CDATA[<h1>requests库入门（上）</h1>
<h2 id="零-前言"><a class="header-anchor" href="#零-前言">♔</a>零 前言</h2>
<p>本系列是pytho爬虫的学习笔记，根据<a href="https://www.icourse163.org/course/BIT-1001870001" target="_blank" rel="noopener">北京理工大学 Python网络爬虫与信息提取mooc</a>整理。本文主要阐述了requests库的基本知识以及爬取页面的通用框架。<a id="more"></a></p>
<h2 id="壹-requests库的安装"><a class="header-anchor" href="#壹-requests库的安装">♔</a>壹 requests库的安装</h2>
<p><strong>pip是个好东西</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure>
<h2 id="贰-requests库中的方法"><a class="header-anchor" href="#贰-requests库中的方法">♔</a>贰 requests库中的方法</h2>
<h3 id="0-七种方法："><a class="header-anchor" href="#0-七种方法：">♔</a>0. 七种方法：</h3>
<ol>
<li>requests.request()</li>
<li>requests.get()</li>
<li>requests.head()</li>
<li>requests.post()</li>
<li>requests.put()</li>
<li>requests.patch()</li>
<li>requests.delete()</li>
</ol>
<p><strong>所有方法本质上都是Requests方法</strong></p>
<h3 id="1-get（）方法"><a class="header-anchor" href="#1-get（）方法">♔</a>1. get（）方法</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r=requests.get(url,params=<span class="literal">None</span>,**kwargs)</span><br><span class="line"><span class="comment">#获得网页</span></span><br><span class="line"><span class="comment">#(第一个参数必选，第二个第三个可不选)</span></span><br></pre></td></tr></table></figure>
<h2 id="叁-requests库中两个重要对象"><a class="header-anchor" href="#叁-requests库中两个重要对象">♔</a>叁 requests库中两个重要对象</h2>
<h3 id="0-response对象及request对象"><a class="header-anchor" href="#0-response对象及request对象">♔</a>0.response对象及request对象</h3>
<p>在</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r=requests.get()</span><br></pre></td></tr></table></figure>
<p>中，等号前的部分，称为response对象（其中包含服务器返回的所有信息，也包含request请求的所有信息）；等号后的部分称为request对象。</p>
<h3 id="1-Response对象的属性"><a class="header-anchor" href="#1-Response对象的属性">♔</a>1. Response对象的属性</h3>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>r.status_code</td>
<td>HTTP请求返回的状态，200成功，404失败</td>
</tr>
<tr>
<td>r.text</td>
<td>HTTP响应内容的字符串形式，即url的页面内容</td>
</tr>
<tr>
<td>r.encoding</td>
<td>从HTTP header中猜测的响应内容的编码方式</td>
</tr>
<tr>
<td>r.apparent_encoding</td>
<td>从内容分析出的响应内容编码方式（备选编码方式）</td>
</tr>
<tr>
<td>r.content</td>
<td>HTTP响应内容的二进制形式</td>
</tr>
</tbody>
</table>
<h2 id="肆-requests库的异常"><a class="header-anchor" href="#肆-requests库的异常">♔</a>肆 requests库的异常</h2>
<table>
<thead>
<tr>
<th>异常</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>requests.ConnectionError</td>
<td>网络连接错误异常，如DNS查询失败、拒绝连接等</td>
</tr>
<tr>
<td>requests.HTTPError</td>
<td>HTTP错误异常</td>
</tr>
<tr>
<td>requests.URLRequired</td>
<td>URL缺失异常</td>
</tr>
<tr>
<td>requests.TooManyRedirects</td>
<td>超过最大重定向次数，产生重定向异常</td>
</tr>
<tr>
<td>requests.ConnectionTimeout</td>
<td>连接远程服务器超时异常</td>
</tr>
<tr>
<td>requests.Timeout</td>
<td>请求URL超时，产生超时异常</td>
</tr>
<tr>
<td>r.raise_for_statues()</td>
<td>如果不是200，产生异常 requests.HTTPError</td>
</tr>
</tbody>
</table>
<h2 id="伍-爬取页面通用框架"><a class="header-anchor" href="#伍-爬取页面通用框架">♔</a>伍 爬取页面通用框架</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span></span></span><br><span class="line"><span class="function">   <span class="title">try</span>:</span></span><br><span class="line">      r=requests.get(url)</span><br><span class="line">      r.raise_for_statues() <span class="comment">#如果状态码不是200，产生HTTPError异常</span></span><br><span class="line">      r.encoding=r.apparent_encoding <span class="comment">#替换编码方式</span></span><br><span class="line">      <span class="keyword">return</span> r.text</span><br><span class="line">   expect:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Error"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">   url=<span class="string">"http://www.baidu.com"</span></span><br><span class="line">   print(getHTMLText(url))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
        <category>Python</category>
        <category>爬虫</category>
        <category>requests库</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>requests库</tag>
      </tags>
  </entry>
  <entry>
    <title>重新开始</title>
    <url>/blog/2019/08/13/restart/</url>
    <content><![CDATA[<h1>如题</h1>
<a id="more"></a>]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
</search>
